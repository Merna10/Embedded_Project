
HIMI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003958  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000174  00800060  00003958  000039ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  008001d4  008001d4  00003b60  2**0
                  ALLOC
  3 .stab         000036f0  00000000  00000000  00003b60  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001c1a  00000000  00000000  00007250  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00008e6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000900a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000091fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000b607  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000c98d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000db64  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000dd24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000e01a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e988  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 39 08 	jmp	0x1072	; 0x1072 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e5       	ldi	r30, 0x58	; 88
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3d       	cpi	r26, 0xD4	; 212
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 ed       	ldi	r26, 0xD4	; 212
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3e       	cpi	r26, 0xED	; 237
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 89 1b 	call	0x3712	; 0x3712 <main>
      8a:	0c 94 aa 1c 	jmp	0x3954	; 0x3954 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 2e 1c 	jmp	0x385c	; 0x385c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae eb       	ldi	r26, 0xBE	; 190
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4a 1c 	jmp	0x3894	; 0x3894 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3a 1c 	jmp	0x3874	; 0x3874 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 56 1c 	jmp	0x38ac	; 0x38ac <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3a 1c 	jmp	0x3874	; 0x3874 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 56 1c 	jmp	0x38ac	; 0x38ac <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 2e 1c 	jmp	0x385c	; 0x385c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e eb       	ldi	r24, 0xBE	; 190
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4a 1c 	jmp	0x3894	; 0x3894 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 36 1c 	jmp	0x386c	; 0x386c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6e eb       	ldi	r22, 0xBE	; 190
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 52 1c 	jmp	0x38a4	; 0x38a4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 3a 1c 	jmp	0x3874	; 0x3874 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 56 1c 	jmp	0x38ac	; 0x38ac <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 3a 1c 	jmp	0x3874	; 0x3874 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 56 1c 	jmp	0x38ac	; 0x38ac <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 3a 1c 	jmp	0x3874	; 0x3874 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 56 1c 	jmp	0x38ac	; 0x38ac <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 3e 1c 	jmp	0x387c	; 0x387c <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 5a 1c 	jmp	0x38b4	; 0x38b4 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 36 1c 	jmp	0x386c	; 0x386c <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 52 1c 	jmp	0x38a4	; 0x38a4 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ea 53       	subi	r30, 0x3A	; 58
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(UART_Config *Config_Ptr)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <UART_init+0x6>
     e34:	00 d0       	rcall	.+0      	; 0xe36 <UART_init+0x8>
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	9c 83       	std	Y+4, r25	; 0x04
     e3c:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
     e3e:	1a 82       	std	Y+2, r1	; 0x02
     e40:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
     e42:	eb e2       	ldi	r30, 0x2B	; 43
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	82 e0       	ldi	r24, 0x02	; 2
     e48:	80 83       	st	Z, r24
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 according to the configuration structure
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
     e4a:	ea e2       	ldi	r30, 0x2A	; 42
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	88 e1       	ldi	r24, 0x18	; 24
     e50:	80 83       	st	Z, r24
	UCSRB= (UCSRB&0xFB)| ((Config_Ptr->frame)&0b100);
     e52:	aa e2       	ldi	r26, 0x2A	; 42
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	ea e2       	ldi	r30, 0x2A	; 42
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	98 2f       	mov	r25, r24
     e5e:	9b 7f       	andi	r25, 0xFB	; 251
     e60:	eb 81       	ldd	r30, Y+3	; 0x03
     e62:	fc 81       	ldd	r31, Y+4	; 0x04
     e64:	82 81       	ldd	r24, Z+2	; 0x02
     e66:	84 70       	andi	r24, 0x04	; 4
     e68:	89 2b       	or	r24, r25
     e6a:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
     e6c:	e0 e4       	ldi	r30, 0x40	; 64
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 e8       	ldi	r24, 0x80	; 128
     e72:	80 83       	st	Z, r24
	UCSRC= (UCSRC&0xCF) | ((Config_Ptr->parity)<<4);
     e74:	a0 e4       	ldi	r26, 0x40	; 64
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e0 e4       	ldi	r30, 0x40	; 64
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	28 2f       	mov	r18, r24
     e80:	2f 7c       	andi	r18, 0xCF	; 207
     e82:	eb 81       	ldd	r30, Y+3	; 0x03
     e84:	fc 81       	ldd	r31, Y+4	; 0x04
     e86:	80 81       	ld	r24, Z
     e88:	88 2f       	mov	r24, r24
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	82 95       	swap	r24
     e8e:	92 95       	swap	r25
     e90:	90 7f       	andi	r25, 0xF0	; 240
     e92:	98 27       	eor	r25, r24
     e94:	80 7f       	andi	r24, 0xF0	; 240
     e96:	98 27       	eor	r25, r24
     e98:	82 2b       	or	r24, r18
     e9a:	8c 93       	st	X, r24
	UCSRC=(UCSRC&0xF7) | ((Config_Ptr->stop_bit)<<3);
     e9c:	a0 e4       	ldi	r26, 0x40	; 64
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e0 e4       	ldi	r30, 0x40	; 64
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	28 2f       	mov	r18, r24
     ea8:	27 7f       	andi	r18, 0xF7	; 247
     eaa:	eb 81       	ldd	r30, Y+3	; 0x03
     eac:	fc 81       	ldd	r31, Y+4	; 0x04
     eae:	81 81       	ldd	r24, Z+1	; 0x01
     eb0:	88 2f       	mov	r24, r24
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	88 0f       	add	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	88 0f       	add	r24, r24
     eba:	99 1f       	adc	r25, r25
     ebc:	88 0f       	add	r24, r24
     ebe:	99 1f       	adc	r25, r25
     ec0:	82 2b       	or	r24, r18
     ec2:	8c 93       	st	X, r24
	UCSRC=(UCSRC&0xF9) | (((Config_Ptr->frame)&0x011)<<1);
     ec4:	a0 e4       	ldi	r26, 0x40	; 64
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e0 e4       	ldi	r30, 0x40	; 64
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	28 2f       	mov	r18, r24
     ed0:	29 7f       	andi	r18, 0xF9	; 249
     ed2:	eb 81       	ldd	r30, Y+3	; 0x03
     ed4:	fc 81       	ldd	r31, Y+4	; 0x04
     ed6:	82 81       	ldd	r24, Z+2	; 0x02
     ed8:	88 2f       	mov	r24, r24
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	81 71       	andi	r24, 0x11	; 17
     ede:	90 70       	andi	r25, 0x00	; 0
     ee0:	88 0f       	add	r24, r24
     ee2:	99 1f       	adc	r25, r25
     ee4:	82 2b       	or	r24, r18
     ee6:	8c 93       	st	X, r24
//	UCSRC = (1<<URSEL) |((Config_Ptr->parity & 0x03)<<UPM0)|((Config_Ptr->stop_bit & 0x01)<<USBS)|
	//		(Config_Ptr->frame);
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
     ee8:	eb 81       	ldd	r30, Y+3	; 0x03
     eea:	fc 81       	ldd	r31, Y+4	; 0x04
     eec:	83 81       	ldd	r24, Z+3	; 0x03
     eee:	94 81       	ldd	r25, Z+4	; 0x04
     ef0:	a5 81       	ldd	r26, Z+5	; 0x05
     ef2:	b6 81       	ldd	r27, Z+6	; 0x06
     ef4:	88 0f       	add	r24, r24
     ef6:	99 1f       	adc	r25, r25
     ef8:	aa 1f       	adc	r26, r26
     efa:	bb 1f       	adc	r27, r27
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	aa 1f       	adc	r26, r26
     f02:	bb 1f       	adc	r27, r27
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	aa 1f       	adc	r26, r26
     f0a:	bb 1f       	adc	r27, r27
     f0c:	9c 01       	movw	r18, r24
     f0e:	ad 01       	movw	r20, r26
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	92 e1       	ldi	r25, 0x12	; 18
     f14:	aa e7       	ldi	r26, 0x7A	; 122
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	bc 01       	movw	r22, r24
     f1a:	cd 01       	movw	r24, r26
     f1c:	0e 94 0c 1c 	call	0x3818	; 0x3818 <__udivmodsi4>
     f20:	da 01       	movw	r26, r20
     f22:	c9 01       	movw	r24, r18
     f24:	01 97       	sbiw	r24, 0x01	; 1
     f26:	9a 83       	std	Y+2, r25	; 0x02
     f28:	89 83       	std	Y+1, r24	; 0x01
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
     f2a:	e0 e4       	ldi	r30, 0x40	; 64
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	89 81       	ldd	r24, Y+1	; 0x01
     f30:	9a 81       	ldd	r25, Y+2	; 0x02
     f32:	89 2f       	mov	r24, r25
     f34:	99 27       	eor	r25, r25
     f36:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     f38:	e9 e2       	ldi	r30, 0x29	; 41
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	80 83       	st	Z, r24
}
     f40:	0f 90       	pop	r0
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	08 95       	ret

00000f4e <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
     f4e:	df 93       	push	r29
     f50:	cf 93       	push	r28
     f52:	0f 92       	push	r0
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62
     f58:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     f5a:	eb e2       	ldi	r30, 0x2B	; 43
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	88 2f       	mov	r24, r24
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	80 72       	andi	r24, 0x20	; 32
     f66:	90 70       	andi	r25, 0x00	; 0
     f68:	00 97       	sbiw	r24, 0x00	; 0
     f6a:	b9 f3       	breq	.-18     	; 0xf5a <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
     f6c:	ec e2       	ldi	r30, 0x2C	; 44
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	89 81       	ldd	r24, Y+1	; 0x01
     f72:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
     f74:	0f 90       	pop	r0
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	08 95       	ret

00000f7c <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     f84:	eb e2       	ldi	r30, 0x2B	; 43
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	88 23       	and	r24, r24
     f8c:	dc f7       	brge	.-10     	; 0xf84 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
     f8e:	ec e2       	ldi	r30, 0x2C	; 44
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
}
     f94:	cf 91       	pop	r28
     f96:	df 91       	pop	r29
     f98:	08 95       	ret

00000f9a <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
     f9a:	df 93       	push	r29
     f9c:	cf 93       	push	r28
     f9e:	00 d0       	rcall	.+0      	; 0xfa0 <UART_sendString+0x6>
     fa0:	0f 92       	push	r0
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
     fa6:	9b 83       	std	Y+3, r25	; 0x03
     fa8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     faa:	19 82       	std	Y+1, r1	; 0x01
     fac:	0e c0       	rjmp	.+28     	; 0xfca <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	9b 81       	ldd	r25, Y+3	; 0x03
     fb8:	fc 01       	movw	r30, r24
     fba:	e2 0f       	add	r30, r18
     fbc:	f3 1f       	adc	r31, r19
     fbe:	80 81       	ld	r24, Z
     fc0:	0e 94 a7 07 	call	0xf4e	; 0xf4e <UART_sendByte>
		i++;
     fc4:	89 81       	ldd	r24, Y+1	; 0x01
     fc6:	8f 5f       	subi	r24, 0xFF	; 255
     fc8:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
     fca:	89 81       	ldd	r24, Y+1	; 0x01
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	8a 81       	ldd	r24, Y+2	; 0x02
     fd2:	9b 81       	ldd	r25, Y+3	; 0x03
     fd4:	fc 01       	movw	r30, r24
     fd6:	e2 0f       	add	r30, r18
     fd8:	f3 1f       	adc	r31, r19
     fda:	80 81       	ld	r24, Z
     fdc:	88 23       	and	r24, r24
     fde:	39 f7       	brne	.-50     	; 0xfae <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
     fe0:	0f 90       	pop	r0
     fe2:	0f 90       	pop	r0
     fe4:	0f 90       	pop	r0
     fe6:	cf 91       	pop	r28
     fe8:	df 91       	pop	r29
     fea:	08 95       	ret

00000fec <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
     fec:	0f 93       	push	r16
     fee:	1f 93       	push	r17
     ff0:	df 93       	push	r29
     ff2:	cf 93       	push	r28
     ff4:	00 d0       	rcall	.+0      	; 0xff6 <UART_receiveString+0xa>
     ff6:	0f 92       	push	r0
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
     ffc:	9b 83       	std	Y+3, r25	; 0x03
     ffe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1000:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	8a 81       	ldd	r24, Y+2	; 0x02
    100a:	9b 81       	ldd	r25, Y+3	; 0x03
    100c:	8c 01       	movw	r16, r24
    100e:	02 0f       	add	r16, r18
    1010:	13 1f       	adc	r17, r19
    1012:	0e 94 be 07 	call	0xf7c	; 0xf7c <UART_recieveByte>
    1016:	f8 01       	movw	r30, r16
    1018:	80 83       	st	Z, r24
    101a:	0f c0       	rjmp	.+30     	; 0x103a <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    101c:	89 81       	ldd	r24, Y+1	; 0x01
    101e:	8f 5f       	subi	r24, 0xFF	; 255
    1020:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	8a 81       	ldd	r24, Y+2	; 0x02
    102a:	9b 81       	ldd	r25, Y+3	; 0x03
    102c:	8c 01       	movw	r16, r24
    102e:	02 0f       	add	r16, r18
    1030:	13 1f       	adc	r17, r19
    1032:	0e 94 be 07 	call	0xf7c	; 0xf7c <UART_recieveByte>
    1036:	f8 01       	movw	r30, r16
    1038:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	8a 81       	ldd	r24, Y+2	; 0x02
    1042:	9b 81       	ldd	r25, Y+3	; 0x03
    1044:	fc 01       	movw	r30, r24
    1046:	e2 0f       	add	r30, r18
    1048:	f3 1f       	adc	r31, r19
    104a:	80 81       	ld	r24, Z
    104c:	83 32       	cpi	r24, 0x23	; 35
    104e:	31 f7       	brne	.-52     	; 0x101c <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	9b 81       	ldd	r25, Y+3	; 0x03
    105a:	fc 01       	movw	r30, r24
    105c:	e2 0f       	add	r30, r18
    105e:	f3 1f       	adc	r31, r19
    1060:	10 82       	st	Z, r1
}
    1062:	0f 90       	pop	r0
    1064:	0f 90       	pop	r0
    1066:	0f 90       	pop	r0
    1068:	cf 91       	pop	r28
    106a:	df 91       	pop	r29
    106c:	1f 91       	pop	r17
    106e:	0f 91       	pop	r16
    1070:	08 95       	ret

00001072 <__vector_11>:
#define NULL_PTR ((void*)0)

uint32 g_tick;

ISR(TIMER0_OVF_vect)
{
    1072:	1f 92       	push	r1
    1074:	0f 92       	push	r0
    1076:	0f b6       	in	r0, 0x3f	; 63
    1078:	0f 92       	push	r0
    107a:	11 24       	eor	r1, r1
    107c:	2f 93       	push	r18
    107e:	3f 93       	push	r19
    1080:	4f 93       	push	r20
    1082:	5f 93       	push	r21
    1084:	6f 93       	push	r22
    1086:	7f 93       	push	r23
    1088:	8f 93       	push	r24
    108a:	9f 93       	push	r25
    108c:	af 93       	push	r26
    108e:	bf 93       	push	r27
    1090:	ef 93       	push	r30
    1092:	ff 93       	push	r31
    1094:	df 93       	push	r29
    1096:	cf 93       	push	r28
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    109c:	80 91 d6 01 	lds	r24, 0x01D6
    10a0:	90 91 d7 01 	lds	r25, 0x01D7
    10a4:	00 97       	sbiw	r24, 0x00	; 0
    10a6:	29 f0       	breq	.+10     	; 0x10b2 <__vector_11+0x40>
	{
		(*g_callBackPtr)();
    10a8:	e0 91 d6 01 	lds	r30, 0x01D6
    10ac:	f0 91 d7 01 	lds	r31, 0x01D7
    10b0:	09 95       	icall
	}
}
    10b2:	cf 91       	pop	r28
    10b4:	df 91       	pop	r29
    10b6:	ff 91       	pop	r31
    10b8:	ef 91       	pop	r30
    10ba:	bf 91       	pop	r27
    10bc:	af 91       	pop	r26
    10be:	9f 91       	pop	r25
    10c0:	8f 91       	pop	r24
    10c2:	7f 91       	pop	r23
    10c4:	6f 91       	pop	r22
    10c6:	5f 91       	pop	r21
    10c8:	4f 91       	pop	r20
    10ca:	3f 91       	pop	r19
    10cc:	2f 91       	pop	r18
    10ce:	0f 90       	pop	r0
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	0f 90       	pop	r0
    10d4:	1f 90       	pop	r1
    10d6:	18 95       	reti

000010d8 <Timer_init>:



void Timer_init(const TIMER_ConfigType *timer){
    10d8:	df 93       	push	r29
    10da:	cf 93       	push	r28
    10dc:	00 d0       	rcall	.+0      	; 0x10de <Timer_init+0x6>
    10de:	00 d0       	rcall	.+0      	; 0x10e0 <Timer_init+0x8>
    10e0:	cd b7       	in	r28, 0x3d	; 61
    10e2:	de b7       	in	r29, 0x3e	; 62
    10e4:	9a 83       	std	Y+2, r25	; 0x02
    10e6:	89 83       	std	Y+1, r24	; 0x01

	switch (timer->number) {
    10e8:	e9 81       	ldd	r30, Y+1	; 0x01
    10ea:	fa 81       	ldd	r31, Y+2	; 0x02
    10ec:	81 81       	ldd	r24, Z+1	; 0x01
    10ee:	28 2f       	mov	r18, r24
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	3c 83       	std	Y+4, r19	; 0x04
    10f4:	2b 83       	std	Y+3, r18	; 0x03
    10f6:	8b 81       	ldd	r24, Y+3	; 0x03
    10f8:	9c 81       	ldd	r25, Y+4	; 0x04
    10fa:	81 30       	cpi	r24, 0x01	; 1
    10fc:	91 05       	cpc	r25, r1
    10fe:	09 f4       	brne	.+2      	; 0x1102 <Timer_init+0x2a>
    1100:	73 c0       	rjmp	.+230    	; 0x11e8 <Timer_init+0x110>
    1102:	2b 81       	ldd	r18, Y+3	; 0x03
    1104:	3c 81       	ldd	r19, Y+4	; 0x04
    1106:	22 30       	cpi	r18, 0x02	; 2
    1108:	31 05       	cpc	r19, r1
    110a:	09 f4       	brne	.+2      	; 0x110e <Timer_init+0x36>
    110c:	e0 c0       	rjmp	.+448    	; 0x12ce <Timer_init+0x1f6>
    110e:	8b 81       	ldd	r24, Y+3	; 0x03
    1110:	9c 81       	ldd	r25, Y+4	; 0x04
    1112:	00 97       	sbiw	r24, 0x00	; 0
    1114:	09 f0       	breq	.+2      	; 0x1118 <Timer_init+0x40>
    1116:	41 c1       	rjmp	.+642    	; 0x139a <Timer_init+0x2c2>
	case TIMER0:
		TCNT0 = timer->initialCounter;
    1118:	a2 e5       	ldi	r26, 0x52	; 82
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e9 81       	ldd	r30, Y+1	; 0x01
    111e:	fa 81       	ldd	r31, Y+2	; 0x02
    1120:	85 81       	ldd	r24, Z+5	; 0x05
    1122:	96 81       	ldd	r25, Z+6	; 0x06
    1124:	8c 93       	st	X, r24
		TCCR0 = (TCCR0 & 0xF8) | (timer->prescaler);
    1126:	a3 e5       	ldi	r26, 0x53	; 83
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	e3 e5       	ldi	r30, 0x53	; 83
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	98 2f       	mov	r25, r24
    1132:	98 7f       	andi	r25, 0xF8	; 248
    1134:	e9 81       	ldd	r30, Y+1	; 0x01
    1136:	fa 81       	ldd	r31, Y+2	; 0x02
    1138:	82 81       	ldd	r24, Z+2	; 0x02
    113a:	89 2b       	or	r24, r25
    113c:	8c 93       	st	X, r24
		SET_BIT(TCNT0,0);
    113e:	a2 e5       	ldi	r26, 0x52	; 82
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	e2 e5       	ldi	r30, 0x52	; 82
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	81 60       	ori	r24, 0x01	; 1
    114a:	8c 93       	st	X, r24
		if(timer->mode==TIMER_OVF)
    114c:	e9 81       	ldd	r30, Y+1	; 0x01
    114e:	fa 81       	ldd	r31, Y+2	; 0x02
    1150:	80 81       	ld	r24, Z
    1152:	88 23       	and	r24, r24
    1154:	f1 f4       	brne	.+60     	; 0x1192 <Timer_init+0xba>
		{
			SET_BIT(TCCR0,FOC0);
    1156:	a3 e5       	ldi	r26, 0x53	; 83
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	e3 e5       	ldi	r30, 0x53	; 83
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	80 68       	ori	r24, 0x80	; 128
    1162:	8c 93       	st	X, r24
			TIMSK |= (1<<TOIE0)|(1<<timer->mode);
    1164:	a9 e5       	ldi	r26, 0x59	; 89
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e9 e5       	ldi	r30, 0x59	; 89
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	48 2f       	mov	r20, r24
    1170:	e9 81       	ldd	r30, Y+1	; 0x01
    1172:	fa 81       	ldd	r31, Y+2	; 0x02
    1174:	80 81       	ld	r24, Z
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	02 2e       	mov	r0, r18
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <Timer_init+0xae>
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	0a 94       	dec	r0
    1188:	e2 f7       	brpl	.-8      	; 0x1182 <Timer_init+0xaa>
    118a:	81 60       	ori	r24, 0x01	; 1
    118c:	84 2b       	or	r24, r20
    118e:	8c 93       	st	X, r24
    1190:	04 c1       	rjmp	.+520    	; 0x139a <Timer_init+0x2c2>
		}
		else if(timer->mode==TIMER_CTC)
    1192:	e9 81       	ldd	r30, Y+1	; 0x01
    1194:	fa 81       	ldd	r31, Y+2	; 0x02
    1196:	80 81       	ld	r24, Z
    1198:	88 30       	cpi	r24, 0x08	; 8
    119a:	09 f0       	breq	.+2      	; 0x119e <Timer_init+0xc6>
    119c:	fe c0       	rjmp	.+508    	; 0x139a <Timer_init+0x2c2>
		{
			SET_BIT(TCCR0,FOC0);
    119e:	a3 e5       	ldi	r26, 0x53	; 83
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	e3 e5       	ldi	r30, 0x53	; 83
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	80 68       	ori	r24, 0x80	; 128
    11aa:	8c 93       	st	X, r24
			TIMSK |= (1<<OCIE0)|(1<<timer->mode);
    11ac:	a9 e5       	ldi	r26, 0x59	; 89
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	e9 e5       	ldi	r30, 0x59	; 89
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	48 2f       	mov	r20, r24
    11b8:	e9 81       	ldd	r30, Y+1	; 0x01
    11ba:	fa 81       	ldd	r31, Y+2	; 0x02
    11bc:	80 81       	ld	r24, Z
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	02 2e       	mov	r0, r18
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <Timer_init+0xf6>
    11ca:	88 0f       	add	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	0a 94       	dec	r0
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <Timer_init+0xf2>
    11d2:	82 60       	ori	r24, 0x02	; 2
    11d4:	84 2b       	or	r24, r20
    11d6:	8c 93       	st	X, r24
			OCR0 = timer->compareValue;
    11d8:	ac e5       	ldi	r26, 0x5C	; 92
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	e9 81       	ldd	r30, Y+1	; 0x01
    11de:	fa 81       	ldd	r31, Y+2	; 0x02
    11e0:	83 81       	ldd	r24, Z+3	; 0x03
    11e2:	94 81       	ldd	r25, Z+4	; 0x04
    11e4:	8c 93       	st	X, r24
    11e6:	d9 c0       	rjmp	.+434    	; 0x139a <Timer_init+0x2c2>
		}
		break;
	case TIMER1:
		TCNT1 = timer->initialCounter;
    11e8:	ac e4       	ldi	r26, 0x4C	; 76
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	e9 81       	ldd	r30, Y+1	; 0x01
    11ee:	fa 81       	ldd	r31, Y+2	; 0x02
    11f0:	85 81       	ldd	r24, Z+5	; 0x05
    11f2:	96 81       	ldd	r25, Z+6	; 0x06
    11f4:	11 96       	adiw	r26, 0x01	; 1
    11f6:	9c 93       	st	X, r25
    11f8:	8e 93       	st	-X, r24
		TCCR1B = (TCCR1B & 0xF8) | (timer->prescaler);
    11fa:	ae e4       	ldi	r26, 0x4E	; 78
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	ee e4       	ldi	r30, 0x4E	; 78
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	98 2f       	mov	r25, r24
    1206:	98 7f       	andi	r25, 0xF8	; 248
    1208:	e9 81       	ldd	r30, Y+1	; 0x01
    120a:	fa 81       	ldd	r31, Y+2	; 0x02
    120c:	82 81       	ldd	r24, Z+2	; 0x02
    120e:	89 2b       	or	r24, r25
    1210:	8c 93       	st	X, r24
		if(timer->mode==TIMER_OVF)
    1212:	e9 81       	ldd	r30, Y+1	; 0x01
    1214:	fa 81       	ldd	r31, Y+2	; 0x02
    1216:	80 81       	ld	r24, Z
    1218:	88 23       	and	r24, r24
    121a:	29 f5       	brne	.+74     	; 0x1266 <Timer_init+0x18e>
		{
			SET_BIT(TCCR1A, FOC1A);
    121c:	af e4       	ldi	r26, 0x4F	; 79
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	ef e4       	ldi	r30, 0x4F	; 79
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	88 60       	ori	r24, 0x08	; 8
    1228:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, FOC1B);
    122a:	af e4       	ldi	r26, 0x4F	; 79
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	ef e4       	ldi	r30, 0x4F	; 79
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	84 60       	ori	r24, 0x04	; 4
    1236:	8c 93       	st	X, r24
			TIMSK |= (1<<TOIE1)|(1<<timer->mode);
    1238:	a9 e5       	ldi	r26, 0x59	; 89
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	e9 e5       	ldi	r30, 0x59	; 89
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	48 2f       	mov	r20, r24
    1244:	e9 81       	ldd	r30, Y+1	; 0x01
    1246:	fa 81       	ldd	r31, Y+2	; 0x02
    1248:	80 81       	ld	r24, Z
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	02 2e       	mov	r0, r18
    1254:	02 c0       	rjmp	.+4      	; 0x125a <Timer_init+0x182>
    1256:	88 0f       	add	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	0a 94       	dec	r0
    125c:	e2 f7       	brpl	.-8      	; 0x1256 <Timer_init+0x17e>
    125e:	84 60       	ori	r24, 0x04	; 4
    1260:	84 2b       	or	r24, r20
    1262:	8c 93       	st	X, r24
    1264:	9a c0       	rjmp	.+308    	; 0x139a <Timer_init+0x2c2>
		}
		else if(timer->mode==TIMER_CTC)
    1266:	e9 81       	ldd	r30, Y+1	; 0x01
    1268:	fa 81       	ldd	r31, Y+2	; 0x02
    126a:	80 81       	ld	r24, Z
    126c:	88 30       	cpi	r24, 0x08	; 8
    126e:	09 f0       	breq	.+2      	; 0x1272 <Timer_init+0x19a>
    1270:	94 c0       	rjmp	.+296    	; 0x139a <Timer_init+0x2c2>
		{
			SET_BIT(TCCR1A, FOC1A);
    1272:	af e4       	ldi	r26, 0x4F	; 79
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	ef e4       	ldi	r30, 0x4F	; 79
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	88 60       	ori	r24, 0x08	; 8
    127e:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, FOC1B);
    1280:	af e4       	ldi	r26, 0x4F	; 79
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	ef e4       	ldi	r30, 0x4F	; 79
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	84 60       	ori	r24, 0x04	; 4
    128c:	8c 93       	st	X, r24
			TIMSK |= (1<<OCIE1A)|(1<<timer->mode);
    128e:	a9 e5       	ldi	r26, 0x59	; 89
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	e9 e5       	ldi	r30, 0x59	; 89
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	48 2f       	mov	r20, r24
    129a:	e9 81       	ldd	r30, Y+1	; 0x01
    129c:	fa 81       	ldd	r31, Y+2	; 0x02
    129e:	80 81       	ld	r24, Z
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	02 2e       	mov	r0, r18
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <Timer_init+0x1d8>
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	0a 94       	dec	r0
    12b2:	e2 f7       	brpl	.-8      	; 0x12ac <Timer_init+0x1d4>
    12b4:	80 61       	ori	r24, 0x10	; 16
    12b6:	84 2b       	or	r24, r20
    12b8:	8c 93       	st	X, r24
			OCR1A = timer->compareValue;
    12ba:	aa e4       	ldi	r26, 0x4A	; 74
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	e9 81       	ldd	r30, Y+1	; 0x01
    12c0:	fa 81       	ldd	r31, Y+2	; 0x02
    12c2:	83 81       	ldd	r24, Z+3	; 0x03
    12c4:	94 81       	ldd	r25, Z+4	; 0x04
    12c6:	11 96       	adiw	r26, 0x01	; 1
    12c8:	9c 93       	st	X, r25
    12ca:	8e 93       	st	-X, r24
    12cc:	66 c0       	rjmp	.+204    	; 0x139a <Timer_init+0x2c2>
		}
		break;
	case TIMER2:
		TCNT2 = timer->initialCounter;
    12ce:	a4 e4       	ldi	r26, 0x44	; 68
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	e9 81       	ldd	r30, Y+1	; 0x01
    12d4:	fa 81       	ldd	r31, Y+2	; 0x02
    12d6:	85 81       	ldd	r24, Z+5	; 0x05
    12d8:	96 81       	ldd	r25, Z+6	; 0x06
    12da:	8c 93       	st	X, r24
		TCCR2 = (TCCR0 & 0xF8) | (timer->prescaler);
    12dc:	a5 e4       	ldi	r26, 0x45	; 69
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e3 e5       	ldi	r30, 0x53	; 83
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	98 2f       	mov	r25, r24
    12e8:	98 7f       	andi	r25, 0xF8	; 248
    12ea:	e9 81       	ldd	r30, Y+1	; 0x01
    12ec:	fa 81       	ldd	r31, Y+2	; 0x02
    12ee:	82 81       	ldd	r24, Z+2	; 0x02
    12f0:	89 2b       	or	r24, r25
    12f2:	8c 93       	st	X, r24
		SET_BIT(TCNT0,0);
    12f4:	a2 e5       	ldi	r26, 0x52	; 82
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	e2 e5       	ldi	r30, 0x52	; 82
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	81 60       	ori	r24, 0x01	; 1
    1300:	8c 93       	st	X, r24
		if(timer->mode==TIMER_OVF)
    1302:	e9 81       	ldd	r30, Y+1	; 0x01
    1304:	fa 81       	ldd	r31, Y+2	; 0x02
    1306:	80 81       	ld	r24, Z
    1308:	88 23       	and	r24, r24
    130a:	f1 f4       	brne	.+60     	; 0x1348 <Timer_init+0x270>
		{
			SET_BIT(TCCR2,FOC2);
    130c:	a5 e4       	ldi	r26, 0x45	; 69
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	e5 e4       	ldi	r30, 0x45	; 69
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	80 68       	ori	r24, 0x80	; 128
    1318:	8c 93       	st	X, r24
			TIMSK |= (1<<TOIE2)|(1<<timer->mode);
    131a:	a9 e5       	ldi	r26, 0x59	; 89
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	e9 e5       	ldi	r30, 0x59	; 89
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	48 2f       	mov	r20, r24
    1326:	e9 81       	ldd	r30, Y+1	; 0x01
    1328:	fa 81       	ldd	r31, Y+2	; 0x02
    132a:	80 81       	ld	r24, Z
    132c:	28 2f       	mov	r18, r24
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	02 2e       	mov	r0, r18
    1336:	02 c0       	rjmp	.+4      	; 0x133c <Timer_init+0x264>
    1338:	88 0f       	add	r24, r24
    133a:	99 1f       	adc	r25, r25
    133c:	0a 94       	dec	r0
    133e:	e2 f7       	brpl	.-8      	; 0x1338 <Timer_init+0x260>
    1340:	80 64       	ori	r24, 0x40	; 64
    1342:	84 2b       	or	r24, r20
    1344:	8c 93       	st	X, r24
    1346:	29 c0       	rjmp	.+82     	; 0x139a <Timer_init+0x2c2>
		}
		else if(timer->mode==TIMER_CTC)
    1348:	e9 81       	ldd	r30, Y+1	; 0x01
    134a:	fa 81       	ldd	r31, Y+2	; 0x02
    134c:	80 81       	ld	r24, Z
    134e:	88 30       	cpi	r24, 0x08	; 8
    1350:	21 f5       	brne	.+72     	; 0x139a <Timer_init+0x2c2>
		{
			SET_BIT(TCCR2,FOC2);
    1352:	a5 e4       	ldi	r26, 0x45	; 69
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	e5 e4       	ldi	r30, 0x45	; 69
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	80 68       	ori	r24, 0x80	; 128
    135e:	8c 93       	st	X, r24
			TIMSK |= (1<<OCIE2)|(1<<timer->mode);
    1360:	a9 e5       	ldi	r26, 0x59	; 89
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	e9 e5       	ldi	r30, 0x59	; 89
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	48 2f       	mov	r20, r24
    136c:	e9 81       	ldd	r30, Y+1	; 0x01
    136e:	fa 81       	ldd	r31, Y+2	; 0x02
    1370:	80 81       	ld	r24, Z
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	02 2e       	mov	r0, r18
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <Timer_init+0x2aa>
    137e:	88 0f       	add	r24, r24
    1380:	99 1f       	adc	r25, r25
    1382:	0a 94       	dec	r0
    1384:	e2 f7       	brpl	.-8      	; 0x137e <Timer_init+0x2a6>
    1386:	80 68       	ori	r24, 0x80	; 128
    1388:	84 2b       	or	r24, r20
    138a:	8c 93       	st	X, r24
			OCR2 = timer->compareValue;
    138c:	a3 e4       	ldi	r26, 0x43	; 67
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	e9 81       	ldd	r30, Y+1	; 0x01
    1392:	fa 81       	ldd	r31, Y+2	; 0x02
    1394:	83 81       	ldd	r24, Z+3	; 0x03
    1396:	94 81       	ldd	r25, Z+4	; 0x04
    1398:	8c 93       	st	X, r24
		break;
	default:
		break;
	}

}
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	cf 91       	pop	r28
    13a4:	df 91       	pop	r29
    13a6:	08 95       	ret

000013a8 <Timer0_DeInit>:

void Timer0_DeInit(void){
    13a8:	df 93       	push	r29
    13aa:	cf 93       	push	r28
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;
    13b0:	e3 e5       	ldi	r30, 0x53	; 83
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	10 82       	st	Z, r1
	TCNT0 = 0;
    13b6:	e2 e5       	ldi	r30, 0x52	; 82
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	10 82       	st	Z, r1
	OCR0 = 0;
    13bc:	ec e5       	ldi	r30, 0x5C	; 92
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	10 82       	st	Z, r1
	TIMSK=0;
    13c2:	e9 e5       	ldi	r30, 0x59	; 89
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	10 82       	st	Z, r1
}
    13c8:	cf 91       	pop	r28
    13ca:	df 91       	pop	r29
    13cc:	08 95       	ret

000013ce <Delay_Timer>:

void Delay_Timer(uint32 seconds){
    13ce:	df 93       	push	r29
    13d0:	cf 93       	push	r28
    13d2:	cd b7       	in	r28, 0x3d	; 61
    13d4:	de b7       	in	r29, 0x3e	; 62
    13d6:	28 97       	sbiw	r28, 0x08	; 8
    13d8:	0f b6       	in	r0, 0x3f	; 63
    13da:	f8 94       	cli
    13dc:	de bf       	out	0x3e, r29	; 62
    13de:	0f be       	out	0x3f, r0	; 63
    13e0:	cd bf       	out	0x3d, r28	; 61
    13e2:	6d 83       	std	Y+5, r22	; 0x05
    13e4:	7e 83       	std	Y+6, r23	; 0x06
    13e6:	8f 83       	std	Y+7, r24	; 0x07
    13e8:	98 87       	std	Y+8, r25	; 0x08
	g_tick = 0;
    13ea:	10 92 da 01 	sts	0x01DA, r1
    13ee:	10 92 db 01 	sts	0x01DB, r1
    13f2:	10 92 dc 01 	sts	0x01DC, r1
    13f6:	10 92 dd 01 	sts	0x01DD, r1
	uint32 tick = seconds;
    13fa:	8d 81       	ldd	r24, Y+5	; 0x05
    13fc:	9e 81       	ldd	r25, Y+6	; 0x06
    13fe:	af 81       	ldd	r26, Y+7	; 0x07
    1400:	b8 85       	ldd	r27, Y+8	; 0x08
    1402:	89 83       	std	Y+1, r24	; 0x01
    1404:	9a 83       	std	Y+2, r25	; 0x02
    1406:	ab 83       	std	Y+3, r26	; 0x03
    1408:	bc 83       	std	Y+4, r27	; 0x04
	Timer0_setCallBack(&timer0_tick);
    140a:	87 e3       	ldi	r24, 0x37	; 55
    140c:	9a e0       	ldi	r25, 0x0A	; 10
    140e:	0e 94 25 0a 	call	0x144a	; 0x144a <Timer0_setCallBack>
	while(g_tick  < tick);
    1412:	20 91 da 01 	lds	r18, 0x01DA
    1416:	30 91 db 01 	lds	r19, 0x01DB
    141a:	40 91 dc 01 	lds	r20, 0x01DC
    141e:	50 91 dd 01 	lds	r21, 0x01DD
    1422:	89 81       	ldd	r24, Y+1	; 0x01
    1424:	9a 81       	ldd	r25, Y+2	; 0x02
    1426:	ab 81       	ldd	r26, Y+3	; 0x03
    1428:	bc 81       	ldd	r27, Y+4	; 0x04
    142a:	28 17       	cp	r18, r24
    142c:	39 07       	cpc	r19, r25
    142e:	4a 07       	cpc	r20, r26
    1430:	5b 07       	cpc	r21, r27
    1432:	78 f3       	brcs	.-34     	; 0x1412 <Delay_Timer+0x44>
	Timer0_DeInit();
    1434:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <Timer0_DeInit>
}
    1438:	28 96       	adiw	r28, 0x08	; 8
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	de bf       	out	0x3e, r29	; 62
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	cd bf       	out	0x3d, r28	; 61
    1444:	cf 91       	pop	r28
    1446:	df 91       	pop	r29
    1448:	08 95       	ret

0000144a <Timer0_setCallBack>:
void Timer0_setCallBack(void(*a_ptr)(void)){
    144a:	df 93       	push	r29
    144c:	cf 93       	push	r28
    144e:	00 d0       	rcall	.+0      	; 0x1450 <Timer0_setCallBack+0x6>
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
    1454:	9a 83       	std	Y+2, r25	; 0x02
    1456:	89 83       	std	Y+1, r24	; 0x01
	Timer0_CALLBACK_Fptr=a_ptr;
    1458:	89 81       	ldd	r24, Y+1	; 0x01
    145a:	9a 81       	ldd	r25, Y+2	; 0x02
    145c:	90 93 d5 01 	sts	0x01D5, r25
    1460:	80 93 d4 01 	sts	0x01D4, r24

}
    1464:	0f 90       	pop	r0
    1466:	0f 90       	pop	r0
    1468:	cf 91       	pop	r28
    146a:	df 91       	pop	r29
    146c:	08 95       	ret

0000146e <timer0_tick>:

void timer0_tick(void)
{
    146e:	df 93       	push	r29
    1470:	cf 93       	push	r28
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    1476:	80 91 da 01 	lds	r24, 0x01DA
    147a:	90 91 db 01 	lds	r25, 0x01DB
    147e:	a0 91 dc 01 	lds	r26, 0x01DC
    1482:	b0 91 dd 01 	lds	r27, 0x01DD
    1486:	01 96       	adiw	r24, 0x01	; 1
    1488:	a1 1d       	adc	r26, r1
    148a:	b1 1d       	adc	r27, r1
    148c:	80 93 da 01 	sts	0x01DA, r24
    1490:	90 93 db 01 	sts	0x01DB, r25
    1494:	a0 93 dc 01 	sts	0x01DC, r26
    1498:	b0 93 dd 01 	sts	0x01DD, r27
}
    149c:	cf 91       	pop	r28
    149e:	df 91       	pop	r29
    14a0:	08 95       	ret

000014a2 <PWM_Timer0_Start>:
void PWM_Timer0_Start(uint8 duty_cycle)
{
    14a2:	0f 93       	push	r16
    14a4:	1f 93       	push	r17
    14a6:	df 93       	push	r29
    14a8:	cf 93       	push	r28
    14aa:	0f 92       	push	r0
    14ac:	cd b7       	in	r28, 0x3d	; 61
    14ae:	de b7       	in	r29, 0x3e	; 62
    14b0:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 =0;
    14b2:	e2 e5       	ldi	r30, 0x52	; 82
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	10 82       	st	Z, r1
	/*Compare Value*/
	OCR0= ((float)duty_cycle / 100) * 255;
    14b8:	0c e5       	ldi	r16, 0x5C	; 92
    14ba:	10 e0       	ldi	r17, 0x00	; 0
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
    14be:	88 2f       	mov	r24, r24
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	a0 e0       	ldi	r26, 0x00	; 0
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	bc 01       	movw	r22, r24
    14c8:	cd 01       	movw	r24, r26
    14ca:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    14ce:	dc 01       	movw	r26, r24
    14d0:	cb 01       	movw	r24, r22
    14d2:	bc 01       	movw	r22, r24
    14d4:	cd 01       	movw	r24, r26
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	48 ec       	ldi	r20, 0xC8	; 200
    14dc:	52 e4       	ldi	r21, 0x42	; 66
    14de:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    14e2:	dc 01       	movw	r26, r24
    14e4:	cb 01       	movw	r24, r22
    14e6:	bc 01       	movw	r22, r24
    14e8:	cd 01       	movw	r24, r26
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	4f e7       	ldi	r20, 0x7F	; 127
    14f0:	53 e4       	ldi	r21, 0x43	; 67
    14f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f6:	dc 01       	movw	r26, r24
    14f8:	cb 01       	movw	r24, r22
    14fa:	bc 01       	movw	r22, r24
    14fc:	cd 01       	movw	r24, r26
    14fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1502:	dc 01       	movw	r26, r24
    1504:	cb 01       	movw	r24, r22
    1506:	f8 01       	movw	r30, r16
    1508:	80 83       	st	Z, r24
	/*TIMER0_PIN_ID as output*/
	GPIO_setupPinDirection (TIMER0_PORT_ID,TIMER0_PIN_ID,PIN_OUTPUT);
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	63 e0       	ldi	r22, 0x03	; 3
    150e:	41 e0       	ldi	r20, 0x01	; 1
    1510:	0e 94 97 0a 	call	0x152e	; 0x152e <GPIO_setupPinDirection>
	TCCR0 |= (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    1514:	a3 e5       	ldi	r26, 0x53	; 83
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	e3 e5       	ldi	r30, 0x53	; 83
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	8a 66       	ori	r24, 0x6A	; 106
    1520:	8c 93       	st	X, r24
}
    1522:	0f 90       	pop	r0
    1524:	cf 91       	pop	r28
    1526:	df 91       	pop	r29
    1528:	1f 91       	pop	r17
    152a:	0f 91       	pop	r16
    152c:	08 95       	ret

0000152e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    152e:	df 93       	push	r29
    1530:	cf 93       	push	r28
    1532:	00 d0       	rcall	.+0      	; 0x1534 <GPIO_setupPinDirection+0x6>
    1534:	00 d0       	rcall	.+0      	; 0x1536 <GPIO_setupPinDirection+0x8>
    1536:	0f 92       	push	r0
    1538:	cd b7       	in	r28, 0x3d	; 61
    153a:	de b7       	in	r29, 0x3e	; 62
    153c:	89 83       	std	Y+1, r24	; 0x01
    153e:	6a 83       	std	Y+2, r22	; 0x02
    1540:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num >= NUM_OF_PORTS)||(pin_num >= NUM_OF_PINS_PER_PORT))
    1542:	89 81       	ldd	r24, Y+1	; 0x01
    1544:	84 30       	cpi	r24, 0x04	; 4
    1546:	08 f0       	brcs	.+2      	; 0x154a <GPIO_setupPinDirection+0x1c>
    1548:	d5 c0       	rjmp	.+426    	; 0x16f4 <GPIO_setupPinDirection+0x1c6>
    154a:	8a 81       	ldd	r24, Y+2	; 0x02
    154c:	88 30       	cpi	r24, 0x08	; 8
    154e:	08 f0       	brcs	.+2      	; 0x1552 <GPIO_setupPinDirection+0x24>
    1550:	d1 c0       	rjmp	.+418    	; 0x16f4 <GPIO_setupPinDirection+0x1c6>
	{
		/* nothing */
	}
	else
	{
		switch(port_num)
    1552:	89 81       	ldd	r24, Y+1	; 0x01
    1554:	28 2f       	mov	r18, r24
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	3d 83       	std	Y+5, r19	; 0x05
    155a:	2c 83       	std	Y+4, r18	; 0x04
    155c:	8c 81       	ldd	r24, Y+4	; 0x04
    155e:	9d 81       	ldd	r25, Y+5	; 0x05
    1560:	81 30       	cpi	r24, 0x01	; 1
    1562:	91 05       	cpc	r25, r1
    1564:	09 f4       	brne	.+2      	; 0x1568 <GPIO_setupPinDirection+0x3a>
    1566:	43 c0       	rjmp	.+134    	; 0x15ee <GPIO_setupPinDirection+0xc0>
    1568:	2c 81       	ldd	r18, Y+4	; 0x04
    156a:	3d 81       	ldd	r19, Y+5	; 0x05
    156c:	22 30       	cpi	r18, 0x02	; 2
    156e:	31 05       	cpc	r19, r1
    1570:	2c f4       	brge	.+10     	; 0x157c <GPIO_setupPinDirection+0x4e>
    1572:	8c 81       	ldd	r24, Y+4	; 0x04
    1574:	9d 81       	ldd	r25, Y+5	; 0x05
    1576:	00 97       	sbiw	r24, 0x00	; 0
    1578:	71 f0       	breq	.+28     	; 0x1596 <GPIO_setupPinDirection+0x68>
    157a:	bc c0       	rjmp	.+376    	; 0x16f4 <GPIO_setupPinDirection+0x1c6>
    157c:	2c 81       	ldd	r18, Y+4	; 0x04
    157e:	3d 81       	ldd	r19, Y+5	; 0x05
    1580:	22 30       	cpi	r18, 0x02	; 2
    1582:	31 05       	cpc	r19, r1
    1584:	09 f4       	brne	.+2      	; 0x1588 <GPIO_setupPinDirection+0x5a>
    1586:	5f c0       	rjmp	.+190    	; 0x1646 <GPIO_setupPinDirection+0x118>
    1588:	8c 81       	ldd	r24, Y+4	; 0x04
    158a:	9d 81       	ldd	r25, Y+5	; 0x05
    158c:	83 30       	cpi	r24, 0x03	; 3
    158e:	91 05       	cpc	r25, r1
    1590:	09 f4       	brne	.+2      	; 0x1594 <GPIO_setupPinDirection+0x66>
    1592:	85 c0       	rjmp	.+266    	; 0x169e <GPIO_setupPinDirection+0x170>
    1594:	af c0       	rjmp	.+350    	; 0x16f4 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	81 30       	cpi	r24, 0x01	; 1
    159a:	a1 f4       	brne	.+40     	; 0x15c4 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    159c:	aa e3       	ldi	r26, 0x3A	; 58
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	ea e3       	ldi	r30, 0x3A	; 58
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	48 2f       	mov	r20, r24
    15a8:	8a 81       	ldd	r24, Y+2	; 0x02
    15aa:	28 2f       	mov	r18, r24
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	02 2e       	mov	r0, r18
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <GPIO_setupPinDirection+0x8c>
    15b6:	88 0f       	add	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	0a 94       	dec	r0
    15bc:	e2 f7       	brpl	.-8      	; 0x15b6 <GPIO_setupPinDirection+0x88>
    15be:	84 2b       	or	r24, r20
    15c0:	8c 93       	st	X, r24
    15c2:	98 c0       	rjmp	.+304    	; 0x16f4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    15c4:	aa e3       	ldi	r26, 0x3A	; 58
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	ea e3       	ldi	r30, 0x3A	; 58
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	48 2f       	mov	r20, r24
    15d0:	8a 81       	ldd	r24, Y+2	; 0x02
    15d2:	28 2f       	mov	r18, r24
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	02 2e       	mov	r0, r18
    15dc:	02 c0       	rjmp	.+4      	; 0x15e2 <GPIO_setupPinDirection+0xb4>
    15de:	88 0f       	add	r24, r24
    15e0:	99 1f       	adc	r25, r25
    15e2:	0a 94       	dec	r0
    15e4:	e2 f7       	brpl	.-8      	; 0x15de <GPIO_setupPinDirection+0xb0>
    15e6:	80 95       	com	r24
    15e8:	84 23       	and	r24, r20
    15ea:	8c 93       	st	X, r24
    15ec:	83 c0       	rjmp	.+262    	; 0x16f4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    15ee:	8b 81       	ldd	r24, Y+3	; 0x03
    15f0:	81 30       	cpi	r24, 0x01	; 1
    15f2:	a1 f4       	brne	.+40     	; 0x161c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    15f4:	a7 e3       	ldi	r26, 0x37	; 55
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	e7 e3       	ldi	r30, 0x37	; 55
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	48 2f       	mov	r20, r24
    1600:	8a 81       	ldd	r24, Y+2	; 0x02
    1602:	28 2f       	mov	r18, r24
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	02 2e       	mov	r0, r18
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <GPIO_setupPinDirection+0xe4>
    160e:	88 0f       	add	r24, r24
    1610:	99 1f       	adc	r25, r25
    1612:	0a 94       	dec	r0
    1614:	e2 f7       	brpl	.-8      	; 0x160e <GPIO_setupPinDirection+0xe0>
    1616:	84 2b       	or	r24, r20
    1618:	8c 93       	st	X, r24
    161a:	6c c0       	rjmp	.+216    	; 0x16f4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    161c:	a7 e3       	ldi	r26, 0x37	; 55
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	e7 e3       	ldi	r30, 0x37	; 55
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	48 2f       	mov	r20, r24
    1628:	8a 81       	ldd	r24, Y+2	; 0x02
    162a:	28 2f       	mov	r18, r24
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	02 2e       	mov	r0, r18
    1634:	02 c0       	rjmp	.+4      	; 0x163a <GPIO_setupPinDirection+0x10c>
    1636:	88 0f       	add	r24, r24
    1638:	99 1f       	adc	r25, r25
    163a:	0a 94       	dec	r0
    163c:	e2 f7       	brpl	.-8      	; 0x1636 <GPIO_setupPinDirection+0x108>
    163e:	80 95       	com	r24
    1640:	84 23       	and	r24, r20
    1642:	8c 93       	st	X, r24
    1644:	57 c0       	rjmp	.+174    	; 0x16f4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1646:	8b 81       	ldd	r24, Y+3	; 0x03
    1648:	81 30       	cpi	r24, 0x01	; 1
    164a:	a1 f4       	brne	.+40     	; 0x1674 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    164c:	a4 e3       	ldi	r26, 0x34	; 52
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	e4 e3       	ldi	r30, 0x34	; 52
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	48 2f       	mov	r20, r24
    1658:	8a 81       	ldd	r24, Y+2	; 0x02
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	02 2e       	mov	r0, r18
    1664:	02 c0       	rjmp	.+4      	; 0x166a <GPIO_setupPinDirection+0x13c>
    1666:	88 0f       	add	r24, r24
    1668:	99 1f       	adc	r25, r25
    166a:	0a 94       	dec	r0
    166c:	e2 f7       	brpl	.-8      	; 0x1666 <GPIO_setupPinDirection+0x138>
    166e:	84 2b       	or	r24, r20
    1670:	8c 93       	st	X, r24
    1672:	40 c0       	rjmp	.+128    	; 0x16f4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1674:	a4 e3       	ldi	r26, 0x34	; 52
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	e4 e3       	ldi	r30, 0x34	; 52
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	48 2f       	mov	r20, r24
    1680:	8a 81       	ldd	r24, Y+2	; 0x02
    1682:	28 2f       	mov	r18, r24
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	02 2e       	mov	r0, r18
    168c:	02 c0       	rjmp	.+4      	; 0x1692 <GPIO_setupPinDirection+0x164>
    168e:	88 0f       	add	r24, r24
    1690:	99 1f       	adc	r25, r25
    1692:	0a 94       	dec	r0
    1694:	e2 f7       	brpl	.-8      	; 0x168e <GPIO_setupPinDirection+0x160>
    1696:	80 95       	com	r24
    1698:	84 23       	and	r24, r20
    169a:	8c 93       	st	X, r24
    169c:	2b c0       	rjmp	.+86     	; 0x16f4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    169e:	8b 81       	ldd	r24, Y+3	; 0x03
    16a0:	81 30       	cpi	r24, 0x01	; 1
    16a2:	a1 f4       	brne	.+40     	; 0x16cc <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    16a4:	a1 e3       	ldi	r26, 0x31	; 49
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	e1 e3       	ldi	r30, 0x31	; 49
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	48 2f       	mov	r20, r24
    16b0:	8a 81       	ldd	r24, Y+2	; 0x02
    16b2:	28 2f       	mov	r18, r24
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	02 2e       	mov	r0, r18
    16bc:	02 c0       	rjmp	.+4      	; 0x16c2 <GPIO_setupPinDirection+0x194>
    16be:	88 0f       	add	r24, r24
    16c0:	99 1f       	adc	r25, r25
    16c2:	0a 94       	dec	r0
    16c4:	e2 f7       	brpl	.-8      	; 0x16be <GPIO_setupPinDirection+0x190>
    16c6:	84 2b       	or	r24, r20
    16c8:	8c 93       	st	X, r24
    16ca:	14 c0       	rjmp	.+40     	; 0x16f4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    16cc:	a1 e3       	ldi	r26, 0x31	; 49
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	e1 e3       	ldi	r30, 0x31	; 49
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	48 2f       	mov	r20, r24
    16d8:	8a 81       	ldd	r24, Y+2	; 0x02
    16da:	28 2f       	mov	r18, r24
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	02 2e       	mov	r0, r18
    16e4:	02 c0       	rjmp	.+4      	; 0x16ea <GPIO_setupPinDirection+0x1bc>
    16e6:	88 0f       	add	r24, r24
    16e8:	99 1f       	adc	r25, r25
    16ea:	0a 94       	dec	r0
    16ec:	e2 f7       	brpl	.-8      	; 0x16e6 <GPIO_setupPinDirection+0x1b8>
    16ee:	80 95       	com	r24
    16f0:	84 23       	and	r24, r20
    16f2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    16f4:	0f 90       	pop	r0
    16f6:	0f 90       	pop	r0
    16f8:	0f 90       	pop	r0
    16fa:	0f 90       	pop	r0
    16fc:	0f 90       	pop	r0
    16fe:	cf 91       	pop	r28
    1700:	df 91       	pop	r29
    1702:	08 95       	ret

00001704 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1704:	df 93       	push	r29
    1706:	cf 93       	push	r28
    1708:	00 d0       	rcall	.+0      	; 0x170a <GPIO_writePin+0x6>
    170a:	00 d0       	rcall	.+0      	; 0x170c <GPIO_writePin+0x8>
    170c:	0f 92       	push	r0
    170e:	cd b7       	in	r28, 0x3d	; 61
    1710:	de b7       	in	r29, 0x3e	; 62
    1712:	89 83       	std	Y+1, r24	; 0x01
    1714:	6a 83       	std	Y+2, r22	; 0x02
    1716:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT))
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	84 30       	cpi	r24, 0x04	; 4
    171c:	08 f0       	brcs	.+2      	; 0x1720 <GPIO_writePin+0x1c>
    171e:	d5 c0       	rjmp	.+426    	; 0x18ca <GPIO_writePin+0x1c6>
    1720:	8a 81       	ldd	r24, Y+2	; 0x02
    1722:	88 30       	cpi	r24, 0x08	; 8
    1724:	08 f0       	brcs	.+2      	; 0x1728 <GPIO_writePin+0x24>
    1726:	d1 c0       	rjmp	.+418    	; 0x18ca <GPIO_writePin+0x1c6>
	{
		/* nothing */
	}
	else
	{
		switch(port_num)
    1728:	89 81       	ldd	r24, Y+1	; 0x01
    172a:	28 2f       	mov	r18, r24
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	3d 83       	std	Y+5, r19	; 0x05
    1730:	2c 83       	std	Y+4, r18	; 0x04
    1732:	8c 81       	ldd	r24, Y+4	; 0x04
    1734:	9d 81       	ldd	r25, Y+5	; 0x05
    1736:	81 30       	cpi	r24, 0x01	; 1
    1738:	91 05       	cpc	r25, r1
    173a:	09 f4       	brne	.+2      	; 0x173e <GPIO_writePin+0x3a>
    173c:	43 c0       	rjmp	.+134    	; 0x17c4 <GPIO_writePin+0xc0>
    173e:	2c 81       	ldd	r18, Y+4	; 0x04
    1740:	3d 81       	ldd	r19, Y+5	; 0x05
    1742:	22 30       	cpi	r18, 0x02	; 2
    1744:	31 05       	cpc	r19, r1
    1746:	2c f4       	brge	.+10     	; 0x1752 <GPIO_writePin+0x4e>
    1748:	8c 81       	ldd	r24, Y+4	; 0x04
    174a:	9d 81       	ldd	r25, Y+5	; 0x05
    174c:	00 97       	sbiw	r24, 0x00	; 0
    174e:	71 f0       	breq	.+28     	; 0x176c <GPIO_writePin+0x68>
    1750:	bc c0       	rjmp	.+376    	; 0x18ca <GPIO_writePin+0x1c6>
    1752:	2c 81       	ldd	r18, Y+4	; 0x04
    1754:	3d 81       	ldd	r19, Y+5	; 0x05
    1756:	22 30       	cpi	r18, 0x02	; 2
    1758:	31 05       	cpc	r19, r1
    175a:	09 f4       	brne	.+2      	; 0x175e <GPIO_writePin+0x5a>
    175c:	5f c0       	rjmp	.+190    	; 0x181c <GPIO_writePin+0x118>
    175e:	8c 81       	ldd	r24, Y+4	; 0x04
    1760:	9d 81       	ldd	r25, Y+5	; 0x05
    1762:	83 30       	cpi	r24, 0x03	; 3
    1764:	91 05       	cpc	r25, r1
    1766:	09 f4       	brne	.+2      	; 0x176a <GPIO_writePin+0x66>
    1768:	85 c0       	rjmp	.+266    	; 0x1874 <GPIO_writePin+0x170>
    176a:	af c0       	rjmp	.+350    	; 0x18ca <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    176c:	8b 81       	ldd	r24, Y+3	; 0x03
    176e:	81 30       	cpi	r24, 0x01	; 1
    1770:	a1 f4       	brne	.+40     	; 0x179a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1772:	ab e3       	ldi	r26, 0x3B	; 59
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	eb e3       	ldi	r30, 0x3B	; 59
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	48 2f       	mov	r20, r24
    177e:	8a 81       	ldd	r24, Y+2	; 0x02
    1780:	28 2f       	mov	r18, r24
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	02 2e       	mov	r0, r18
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <GPIO_writePin+0x8c>
    178c:	88 0f       	add	r24, r24
    178e:	99 1f       	adc	r25, r25
    1790:	0a 94       	dec	r0
    1792:	e2 f7       	brpl	.-8      	; 0x178c <GPIO_writePin+0x88>
    1794:	84 2b       	or	r24, r20
    1796:	8c 93       	st	X, r24
    1798:	98 c0       	rjmp	.+304    	; 0x18ca <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    179a:	ab e3       	ldi	r26, 0x3B	; 59
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	eb e3       	ldi	r30, 0x3B	; 59
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	48 2f       	mov	r20, r24
    17a6:	8a 81       	ldd	r24, Y+2	; 0x02
    17a8:	28 2f       	mov	r18, r24
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	02 2e       	mov	r0, r18
    17b2:	02 c0       	rjmp	.+4      	; 0x17b8 <GPIO_writePin+0xb4>
    17b4:	88 0f       	add	r24, r24
    17b6:	99 1f       	adc	r25, r25
    17b8:	0a 94       	dec	r0
    17ba:	e2 f7       	brpl	.-8      	; 0x17b4 <GPIO_writePin+0xb0>
    17bc:	80 95       	com	r24
    17be:	84 23       	and	r24, r20
    17c0:	8c 93       	st	X, r24
    17c2:	83 c0       	rjmp	.+262    	; 0x18ca <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    17c4:	8b 81       	ldd	r24, Y+3	; 0x03
    17c6:	81 30       	cpi	r24, 0x01	; 1
    17c8:	a1 f4       	brne	.+40     	; 0x17f2 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    17ca:	a8 e3       	ldi	r26, 0x38	; 56
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	e8 e3       	ldi	r30, 0x38	; 56
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	48 2f       	mov	r20, r24
    17d6:	8a 81       	ldd	r24, Y+2	; 0x02
    17d8:	28 2f       	mov	r18, r24
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	02 2e       	mov	r0, r18
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <GPIO_writePin+0xe4>
    17e4:	88 0f       	add	r24, r24
    17e6:	99 1f       	adc	r25, r25
    17e8:	0a 94       	dec	r0
    17ea:	e2 f7       	brpl	.-8      	; 0x17e4 <GPIO_writePin+0xe0>
    17ec:	84 2b       	or	r24, r20
    17ee:	8c 93       	st	X, r24
    17f0:	6c c0       	rjmp	.+216    	; 0x18ca <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    17f2:	a8 e3       	ldi	r26, 0x38	; 56
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	e8 e3       	ldi	r30, 0x38	; 56
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	48 2f       	mov	r20, r24
    17fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1800:	28 2f       	mov	r18, r24
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	02 2e       	mov	r0, r18
    180a:	02 c0       	rjmp	.+4      	; 0x1810 <GPIO_writePin+0x10c>
    180c:	88 0f       	add	r24, r24
    180e:	99 1f       	adc	r25, r25
    1810:	0a 94       	dec	r0
    1812:	e2 f7       	brpl	.-8      	; 0x180c <GPIO_writePin+0x108>
    1814:	80 95       	com	r24
    1816:	84 23       	and	r24, r20
    1818:	8c 93       	st	X, r24
    181a:	57 c0       	rjmp	.+174    	; 0x18ca <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    181c:	8b 81       	ldd	r24, Y+3	; 0x03
    181e:	81 30       	cpi	r24, 0x01	; 1
    1820:	a1 f4       	brne	.+40     	; 0x184a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1822:	a5 e3       	ldi	r26, 0x35	; 53
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	e5 e3       	ldi	r30, 0x35	; 53
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	48 2f       	mov	r20, r24
    182e:	8a 81       	ldd	r24, Y+2	; 0x02
    1830:	28 2f       	mov	r18, r24
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	02 2e       	mov	r0, r18
    183a:	02 c0       	rjmp	.+4      	; 0x1840 <GPIO_writePin+0x13c>
    183c:	88 0f       	add	r24, r24
    183e:	99 1f       	adc	r25, r25
    1840:	0a 94       	dec	r0
    1842:	e2 f7       	brpl	.-8      	; 0x183c <GPIO_writePin+0x138>
    1844:	84 2b       	or	r24, r20
    1846:	8c 93       	st	X, r24
    1848:	40 c0       	rjmp	.+128    	; 0x18ca <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    184a:	a5 e3       	ldi	r26, 0x35	; 53
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	e5 e3       	ldi	r30, 0x35	; 53
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	48 2f       	mov	r20, r24
    1856:	8a 81       	ldd	r24, Y+2	; 0x02
    1858:	28 2f       	mov	r18, r24
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	02 2e       	mov	r0, r18
    1862:	02 c0       	rjmp	.+4      	; 0x1868 <GPIO_writePin+0x164>
    1864:	88 0f       	add	r24, r24
    1866:	99 1f       	adc	r25, r25
    1868:	0a 94       	dec	r0
    186a:	e2 f7       	brpl	.-8      	; 0x1864 <GPIO_writePin+0x160>
    186c:	80 95       	com	r24
    186e:	84 23       	and	r24, r20
    1870:	8c 93       	st	X, r24
    1872:	2b c0       	rjmp	.+86     	; 0x18ca <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1874:	8b 81       	ldd	r24, Y+3	; 0x03
    1876:	81 30       	cpi	r24, 0x01	; 1
    1878:	a1 f4       	brne	.+40     	; 0x18a2 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    187a:	a2 e3       	ldi	r26, 0x32	; 50
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	e2 e3       	ldi	r30, 0x32	; 50
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	48 2f       	mov	r20, r24
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	28 2f       	mov	r18, r24
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	02 2e       	mov	r0, r18
    1892:	02 c0       	rjmp	.+4      	; 0x1898 <GPIO_writePin+0x194>
    1894:	88 0f       	add	r24, r24
    1896:	99 1f       	adc	r25, r25
    1898:	0a 94       	dec	r0
    189a:	e2 f7       	brpl	.-8      	; 0x1894 <GPIO_writePin+0x190>
    189c:	84 2b       	or	r24, r20
    189e:	8c 93       	st	X, r24
    18a0:	14 c0       	rjmp	.+40     	; 0x18ca <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    18a2:	a2 e3       	ldi	r26, 0x32	; 50
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	e2 e3       	ldi	r30, 0x32	; 50
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	48 2f       	mov	r20, r24
    18ae:	8a 81       	ldd	r24, Y+2	; 0x02
    18b0:	28 2f       	mov	r18, r24
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	02 2e       	mov	r0, r18
    18ba:	02 c0       	rjmp	.+4      	; 0x18c0 <GPIO_writePin+0x1bc>
    18bc:	88 0f       	add	r24, r24
    18be:	99 1f       	adc	r25, r25
    18c0:	0a 94       	dec	r0
    18c2:	e2 f7       	brpl	.-8      	; 0x18bc <GPIO_writePin+0x1b8>
    18c4:	80 95       	com	r24
    18c6:	84 23       	and	r24, r20
    18c8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    18ca:	0f 90       	pop	r0
    18cc:	0f 90       	pop	r0
    18ce:	0f 90       	pop	r0
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	cf 91       	pop	r28
    18d6:	df 91       	pop	r29
    18d8:	08 95       	ret

000018da <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    18da:	df 93       	push	r29
    18dc:	cf 93       	push	r28
    18de:	00 d0       	rcall	.+0      	; 0x18e0 <GPIO_readPin+0x6>
    18e0:	00 d0       	rcall	.+0      	; 0x18e2 <GPIO_readPin+0x8>
    18e2:	0f 92       	push	r0
    18e4:	cd b7       	in	r28, 0x3d	; 61
    18e6:	de b7       	in	r29, 0x3e	; 62
    18e8:	8a 83       	std	Y+2, r24	; 0x02
    18ea:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    18ec:	19 82       	std	Y+1, r1	; 0x01
	if((port_num >= NUM_OF_PORTS)||(pin_num >= NUM_OF_PINS_PER_PORT))
    18ee:	8a 81       	ldd	r24, Y+2	; 0x02
    18f0:	84 30       	cpi	r24, 0x04	; 4
    18f2:	08 f0       	brcs	.+2      	; 0x18f6 <GPIO_readPin+0x1c>
    18f4:	84 c0       	rjmp	.+264    	; 0x19fe <GPIO_readPin+0x124>
    18f6:	8b 81       	ldd	r24, Y+3	; 0x03
    18f8:	88 30       	cpi	r24, 0x08	; 8
    18fa:	08 f0       	brcs	.+2      	; 0x18fe <GPIO_readPin+0x24>
    18fc:	80 c0       	rjmp	.+256    	; 0x19fe <GPIO_readPin+0x124>
	{
		/* nothing */
	}
	else
	{
		switch(port_num)
    18fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1900:	28 2f       	mov	r18, r24
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	3d 83       	std	Y+5, r19	; 0x05
    1906:	2c 83       	std	Y+4, r18	; 0x04
    1908:	4c 81       	ldd	r20, Y+4	; 0x04
    190a:	5d 81       	ldd	r21, Y+5	; 0x05
    190c:	41 30       	cpi	r20, 0x01	; 1
    190e:	51 05       	cpc	r21, r1
    1910:	79 f1       	breq	.+94     	; 0x1970 <GPIO_readPin+0x96>
    1912:	8c 81       	ldd	r24, Y+4	; 0x04
    1914:	9d 81       	ldd	r25, Y+5	; 0x05
    1916:	82 30       	cpi	r24, 0x02	; 2
    1918:	91 05       	cpc	r25, r1
    191a:	34 f4       	brge	.+12     	; 0x1928 <GPIO_readPin+0x4e>
    191c:	2c 81       	ldd	r18, Y+4	; 0x04
    191e:	3d 81       	ldd	r19, Y+5	; 0x05
    1920:	21 15       	cp	r18, r1
    1922:	31 05       	cpc	r19, r1
    1924:	69 f0       	breq	.+26     	; 0x1940 <GPIO_readPin+0x66>
    1926:	6b c0       	rjmp	.+214    	; 0x19fe <GPIO_readPin+0x124>
    1928:	4c 81       	ldd	r20, Y+4	; 0x04
    192a:	5d 81       	ldd	r21, Y+5	; 0x05
    192c:	42 30       	cpi	r20, 0x02	; 2
    192e:	51 05       	cpc	r21, r1
    1930:	b9 f1       	breq	.+110    	; 0x19a0 <GPIO_readPin+0xc6>
    1932:	8c 81       	ldd	r24, Y+4	; 0x04
    1934:	9d 81       	ldd	r25, Y+5	; 0x05
    1936:	83 30       	cpi	r24, 0x03	; 3
    1938:	91 05       	cpc	r25, r1
    193a:	09 f4       	brne	.+2      	; 0x193e <GPIO_readPin+0x64>
    193c:	49 c0       	rjmp	.+146    	; 0x19d0 <GPIO_readPin+0xf6>
    193e:	5f c0       	rjmp	.+190    	; 0x19fe <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1940:	e9 e3       	ldi	r30, 0x39	; 57
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	28 2f       	mov	r18, r24
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	8b 81       	ldd	r24, Y+3	; 0x03
    194c:	88 2f       	mov	r24, r24
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	a9 01       	movw	r20, r18
    1952:	02 c0       	rjmp	.+4      	; 0x1958 <GPIO_readPin+0x7e>
    1954:	55 95       	asr	r21
    1956:	47 95       	ror	r20
    1958:	8a 95       	dec	r24
    195a:	e2 f7       	brpl	.-8      	; 0x1954 <GPIO_readPin+0x7a>
    195c:	ca 01       	movw	r24, r20
    195e:	81 70       	andi	r24, 0x01	; 1
    1960:	90 70       	andi	r25, 0x00	; 0
    1962:	88 23       	and	r24, r24
    1964:	19 f0       	breq	.+6      	; 0x196c <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	89 83       	std	Y+1, r24	; 0x01
    196a:	49 c0       	rjmp	.+146    	; 0x19fe <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    196c:	19 82       	std	Y+1, r1	; 0x01
    196e:	47 c0       	rjmp	.+142    	; 0x19fe <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1970:	e6 e3       	ldi	r30, 0x36	; 54
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	28 2f       	mov	r18, r24
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	8b 81       	ldd	r24, Y+3	; 0x03
    197c:	88 2f       	mov	r24, r24
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	a9 01       	movw	r20, r18
    1982:	02 c0       	rjmp	.+4      	; 0x1988 <GPIO_readPin+0xae>
    1984:	55 95       	asr	r21
    1986:	47 95       	ror	r20
    1988:	8a 95       	dec	r24
    198a:	e2 f7       	brpl	.-8      	; 0x1984 <GPIO_readPin+0xaa>
    198c:	ca 01       	movw	r24, r20
    198e:	81 70       	andi	r24, 0x01	; 1
    1990:	90 70       	andi	r25, 0x00	; 0
    1992:	88 23       	and	r24, r24
    1994:	19 f0       	breq	.+6      	; 0x199c <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	89 83       	std	Y+1, r24	; 0x01
    199a:	31 c0       	rjmp	.+98     	; 0x19fe <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    199c:	19 82       	std	Y+1, r1	; 0x01
    199e:	2f c0       	rjmp	.+94     	; 0x19fe <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    19a0:	e3 e3       	ldi	r30, 0x33	; 51
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	80 81       	ld	r24, Z
    19a6:	28 2f       	mov	r18, r24
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	8b 81       	ldd	r24, Y+3	; 0x03
    19ac:	88 2f       	mov	r24, r24
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	a9 01       	movw	r20, r18
    19b2:	02 c0       	rjmp	.+4      	; 0x19b8 <GPIO_readPin+0xde>
    19b4:	55 95       	asr	r21
    19b6:	47 95       	ror	r20
    19b8:	8a 95       	dec	r24
    19ba:	e2 f7       	brpl	.-8      	; 0x19b4 <GPIO_readPin+0xda>
    19bc:	ca 01       	movw	r24, r20
    19be:	81 70       	andi	r24, 0x01	; 1
    19c0:	90 70       	andi	r25, 0x00	; 0
    19c2:	88 23       	and	r24, r24
    19c4:	19 f0       	breq	.+6      	; 0x19cc <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	89 83       	std	Y+1, r24	; 0x01
    19ca:	19 c0       	rjmp	.+50     	; 0x19fe <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19cc:	19 82       	std	Y+1, r1	; 0x01
    19ce:	17 c0       	rjmp	.+46     	; 0x19fe <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    19d0:	e0 e3       	ldi	r30, 0x30	; 48
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	80 81       	ld	r24, Z
    19d6:	28 2f       	mov	r18, r24
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	8b 81       	ldd	r24, Y+3	; 0x03
    19dc:	88 2f       	mov	r24, r24
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	a9 01       	movw	r20, r18
    19e2:	02 c0       	rjmp	.+4      	; 0x19e8 <GPIO_readPin+0x10e>
    19e4:	55 95       	asr	r21
    19e6:	47 95       	ror	r20
    19e8:	8a 95       	dec	r24
    19ea:	e2 f7       	brpl	.-8      	; 0x19e4 <GPIO_readPin+0x10a>
    19ec:	ca 01       	movw	r24, r20
    19ee:	81 70       	andi	r24, 0x01	; 1
    19f0:	90 70       	andi	r25, 0x00	; 0
    19f2:	88 23       	and	r24, r24
    19f4:	19 f0       	breq	.+6      	; 0x19fc <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	89 83       	std	Y+1, r24	; 0x01
    19fa:	01 c0       	rjmp	.+2      	; 0x19fe <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19fc:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return pin_value;
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a00:	0f 90       	pop	r0
    1a02:	0f 90       	pop	r0
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	0f 90       	pop	r0
    1a0a:	cf 91       	pop	r28
    1a0c:	df 91       	pop	r29
    1a0e:	08 95       	ret

00001a10 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, uint8 direction)
{
    1a10:	df 93       	push	r29
    1a12:	cf 93       	push	r28
    1a14:	00 d0       	rcall	.+0      	; 0x1a16 <GPIO_setupPortDirection+0x6>
    1a16:	00 d0       	rcall	.+0      	; 0x1a18 <GPIO_setupPortDirection+0x8>
    1a18:	cd b7       	in	r28, 0x3d	; 61
    1a1a:	de b7       	in	r29, 0x3e	; 62
    1a1c:	89 83       	std	Y+1, r24	; 0x01
    1a1e:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    1a20:	89 81       	ldd	r24, Y+1	; 0x01
    1a22:	84 30       	cpi	r24, 0x04	; 4
    1a24:	90 f5       	brcc	.+100    	; 0x1a8a <GPIO_setupPortDirection+0x7a>
	{
		/* nothing */
	}
	else
	{
		switch(port_num)
    1a26:	89 81       	ldd	r24, Y+1	; 0x01
    1a28:	28 2f       	mov	r18, r24
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	3c 83       	std	Y+4, r19	; 0x04
    1a2e:	2b 83       	std	Y+3, r18	; 0x03
    1a30:	8b 81       	ldd	r24, Y+3	; 0x03
    1a32:	9c 81       	ldd	r25, Y+4	; 0x04
    1a34:	81 30       	cpi	r24, 0x01	; 1
    1a36:	91 05       	cpc	r25, r1
    1a38:	d1 f0       	breq	.+52     	; 0x1a6e <GPIO_setupPortDirection+0x5e>
    1a3a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a3c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a3e:	22 30       	cpi	r18, 0x02	; 2
    1a40:	31 05       	cpc	r19, r1
    1a42:	2c f4       	brge	.+10     	; 0x1a4e <GPIO_setupPortDirection+0x3e>
    1a44:	8b 81       	ldd	r24, Y+3	; 0x03
    1a46:	9c 81       	ldd	r25, Y+4	; 0x04
    1a48:	00 97       	sbiw	r24, 0x00	; 0
    1a4a:	61 f0       	breq	.+24     	; 0x1a64 <GPIO_setupPortDirection+0x54>
    1a4c:	1e c0       	rjmp	.+60     	; 0x1a8a <GPIO_setupPortDirection+0x7a>
    1a4e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a50:	3c 81       	ldd	r19, Y+4	; 0x04
    1a52:	22 30       	cpi	r18, 0x02	; 2
    1a54:	31 05       	cpc	r19, r1
    1a56:	81 f0       	breq	.+32     	; 0x1a78 <GPIO_setupPortDirection+0x68>
    1a58:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5c:	83 30       	cpi	r24, 0x03	; 3
    1a5e:	91 05       	cpc	r25, r1
    1a60:	81 f0       	breq	.+32     	; 0x1a82 <GPIO_setupPortDirection+0x72>
    1a62:	13 c0       	rjmp	.+38     	; 0x1a8a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1a64:	ea e3       	ldi	r30, 0x3A	; 58
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6a:	80 83       	st	Z, r24
    1a6c:	0e c0       	rjmp	.+28     	; 0x1a8a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1a6e:	e7 e3       	ldi	r30, 0x37	; 55
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	8a 81       	ldd	r24, Y+2	; 0x02
    1a74:	80 83       	st	Z, r24
    1a76:	09 c0       	rjmp	.+18     	; 0x1a8a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1a78:	e4 e3       	ldi	r30, 0x34	; 52
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7e:	80 83       	st	Z, r24
    1a80:	04 c0       	rjmp	.+8      	; 0x1a8a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1a82:	e1 e3       	ldi	r30, 0x31	; 49
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	8a 81       	ldd	r24, Y+2	; 0x02
    1a88:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	0f 90       	pop	r0
    1a90:	0f 90       	pop	r0
    1a92:	cf 91       	pop	r28
    1a94:	df 91       	pop	r29
    1a96:	08 95       	ret

00001a98 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1a98:	df 93       	push	r29
    1a9a:	cf 93       	push	r28
    1a9c:	00 d0       	rcall	.+0      	; 0x1a9e <GPIO_writePort+0x6>
    1a9e:	00 d0       	rcall	.+0      	; 0x1aa0 <GPIO_writePort+0x8>
    1aa0:	cd b7       	in	r28, 0x3d	; 61
    1aa2:	de b7       	in	r29, 0x3e	; 62
    1aa4:	89 83       	std	Y+1, r24	; 0x01
    1aa6:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    1aa8:	89 81       	ldd	r24, Y+1	; 0x01
    1aaa:	84 30       	cpi	r24, 0x04	; 4
    1aac:	90 f5       	brcc	.+100    	; 0x1b12 <GPIO_writePort+0x7a>
	{
		/* nothing */
	}
	else
	{
		switch(port_num)
    1aae:	89 81       	ldd	r24, Y+1	; 0x01
    1ab0:	28 2f       	mov	r18, r24
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	3c 83       	std	Y+4, r19	; 0x04
    1ab6:	2b 83       	std	Y+3, r18	; 0x03
    1ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aba:	9c 81       	ldd	r25, Y+4	; 0x04
    1abc:	81 30       	cpi	r24, 0x01	; 1
    1abe:	91 05       	cpc	r25, r1
    1ac0:	d1 f0       	breq	.+52     	; 0x1af6 <GPIO_writePort+0x5e>
    1ac2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ac4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ac6:	22 30       	cpi	r18, 0x02	; 2
    1ac8:	31 05       	cpc	r19, r1
    1aca:	2c f4       	brge	.+10     	; 0x1ad6 <GPIO_writePort+0x3e>
    1acc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ace:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad0:	00 97       	sbiw	r24, 0x00	; 0
    1ad2:	61 f0       	breq	.+24     	; 0x1aec <GPIO_writePort+0x54>
    1ad4:	1e c0       	rjmp	.+60     	; 0x1b12 <GPIO_writePort+0x7a>
    1ad6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ad8:	3c 81       	ldd	r19, Y+4	; 0x04
    1ada:	22 30       	cpi	r18, 0x02	; 2
    1adc:	31 05       	cpc	r19, r1
    1ade:	81 f0       	breq	.+32     	; 0x1b00 <GPIO_writePort+0x68>
    1ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae4:	83 30       	cpi	r24, 0x03	; 3
    1ae6:	91 05       	cpc	r25, r1
    1ae8:	81 f0       	breq	.+32     	; 0x1b0a <GPIO_writePort+0x72>
    1aea:	13 c0       	rjmp	.+38     	; 0x1b12 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1aec:	eb e3       	ldi	r30, 0x3B	; 59
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	8a 81       	ldd	r24, Y+2	; 0x02
    1af2:	80 83       	st	Z, r24
    1af4:	0e c0       	rjmp	.+28     	; 0x1b12 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1af6:	e8 e3       	ldi	r30, 0x38	; 56
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	8a 81       	ldd	r24, Y+2	; 0x02
    1afc:	80 83       	st	Z, r24
    1afe:	09 c0       	rjmp	.+18     	; 0x1b12 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1b00:	e5 e3       	ldi	r30, 0x35	; 53
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	8a 81       	ldd	r24, Y+2	; 0x02
    1b06:	80 83       	st	Z, r24
    1b08:	04 c0       	rjmp	.+8      	; 0x1b12 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1b0a:	e2 e3       	ldi	r30, 0x32	; 50
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b10:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b12:	0f 90       	pop	r0
    1b14:	0f 90       	pop	r0
    1b16:	0f 90       	pop	r0
    1b18:	0f 90       	pop	r0
    1b1a:	cf 91       	pop	r28
    1b1c:	df 91       	pop	r29
    1b1e:	08 95       	ret

00001b20 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1b20:	df 93       	push	r29
    1b22:	cf 93       	push	r28
    1b24:	00 d0       	rcall	.+0      	; 0x1b26 <GPIO_readPort+0x6>
    1b26:	00 d0       	rcall	.+0      	; 0x1b28 <GPIO_readPort+0x8>
    1b28:	cd b7       	in	r28, 0x3d	; 61
    1b2a:	de b7       	in	r29, 0x3e	; 62
    1b2c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 port_value = LOGIC_LOW;
    1b2e:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS)
    1b30:	8a 81       	ldd	r24, Y+2	; 0x02
    1b32:	84 30       	cpi	r24, 0x04	; 4
    1b34:	90 f5       	brcc	.+100    	; 0x1b9a <GPIO_readPort+0x7a>
	{
		/* nothing */
	}
	else
	{
		switch(port_num)
    1b36:	8a 81       	ldd	r24, Y+2	; 0x02
    1b38:	28 2f       	mov	r18, r24
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	3c 83       	std	Y+4, r19	; 0x04
    1b3e:	2b 83       	std	Y+3, r18	; 0x03
    1b40:	8b 81       	ldd	r24, Y+3	; 0x03
    1b42:	9c 81       	ldd	r25, Y+4	; 0x04
    1b44:	81 30       	cpi	r24, 0x01	; 1
    1b46:	91 05       	cpc	r25, r1
    1b48:	d1 f0       	breq	.+52     	; 0x1b7e <GPIO_readPort+0x5e>
    1b4a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b4c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b4e:	22 30       	cpi	r18, 0x02	; 2
    1b50:	31 05       	cpc	r19, r1
    1b52:	2c f4       	brge	.+10     	; 0x1b5e <GPIO_readPort+0x3e>
    1b54:	8b 81       	ldd	r24, Y+3	; 0x03
    1b56:	9c 81       	ldd	r25, Y+4	; 0x04
    1b58:	00 97       	sbiw	r24, 0x00	; 0
    1b5a:	61 f0       	breq	.+24     	; 0x1b74 <GPIO_readPort+0x54>
    1b5c:	1e c0       	rjmp	.+60     	; 0x1b9a <GPIO_readPort+0x7a>
    1b5e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b60:	3c 81       	ldd	r19, Y+4	; 0x04
    1b62:	22 30       	cpi	r18, 0x02	; 2
    1b64:	31 05       	cpc	r19, r1
    1b66:	81 f0       	breq	.+32     	; 0x1b88 <GPIO_readPort+0x68>
    1b68:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6c:	83 30       	cpi	r24, 0x03	; 3
    1b6e:	91 05       	cpc	r25, r1
    1b70:	81 f0       	breq	.+32     	; 0x1b92 <GPIO_readPort+0x72>
    1b72:	13 c0       	rjmp	.+38     	; 0x1b9a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			PINA = port_value;
    1b74:	e9 e3       	ldi	r30, 0x39	; 57
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	89 81       	ldd	r24, Y+1	; 0x01
    1b7a:	80 83       	st	Z, r24
    1b7c:	0e c0       	rjmp	.+28     	; 0x1b9a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			PINB = port_value;
    1b7e:	e6 e3       	ldi	r30, 0x36	; 54
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	89 81       	ldd	r24, Y+1	; 0x01
    1b84:	80 83       	st	Z, r24
    1b86:	09 c0       	rjmp	.+18     	; 0x1b9a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			PINC = port_value;
    1b88:	e3 e3       	ldi	r30, 0x33	; 51
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	89 81       	ldd	r24, Y+1	; 0x01
    1b8e:	80 83       	st	Z, r24
    1b90:	04 c0       	rjmp	.+8      	; 0x1b9a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			PIND = port_value;
    1b92:	e0 e3       	ldi	r30, 0x30	; 48
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	89 81       	ldd	r24, Y+1	; 0x01
    1b98:	80 83       	st	Z, r24
			break;
		}
	}
	return port_value;
    1b9a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b9c:	0f 90       	pop	r0
    1b9e:	0f 90       	pop	r0
    1ba0:	0f 90       	pop	r0
    1ba2:	0f 90       	pop	r0
    1ba4:	cf 91       	pop	r28
    1ba6:	df 91       	pop	r29
    1ba8:	08 95       	ret

00001baa <LCD_init>:

/* FUNCTION DEFINATION*/

/*Initialize the LCD*/
void LCD_init(void)
{
    1baa:	df 93       	push	r29
    1bac:	cf 93       	push	r28
    1bae:	cd b7       	in	r28, 0x3d	; 61
    1bb0:	de b7       	in	r29, 0x3e	; 62
    1bb2:	2e 97       	sbiw	r28, 0x0e	; 14
    1bb4:	0f b6       	in	r0, 0x3f	; 63
    1bb6:	f8 94       	cli
    1bb8:	de bf       	out	0x3e, r29	; 62
    1bba:	0f be       	out	0x3f, r0	; 63
    1bbc:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID,PIN_OUTPUT );
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	60 e0       	ldi	r22, 0x00	; 0
    1bc2:	41 e0       	ldi	r20, 0x01	; 1
    1bc4:	0e 94 97 0a 	call	0x152e	; 0x152e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID,PIN_OUTPUT );
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	62 e0       	ldi	r22, 0x02	; 2
    1bcc:	41 e0       	ldi	r20, 0x01	; 1
    1bce:	0e 94 97 0a 	call	0x152e	; 0x152e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID, LCD_RW_PIN_ID,PIN_OUTPUT );
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	61 e0       	ldi	r22, 0x01	; 1
    1bd6:	41 e0       	ldi	r20, 0x01	; 1
    1bd8:	0e 94 97 0a 	call	0x152e	; 0x152e <GPIO_setupPinDirection>
    1bdc:	80 e0       	ldi	r24, 0x00	; 0
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	a0 ea       	ldi	r26, 0xA0	; 160
    1be2:	b1 e4       	ldi	r27, 0x41	; 65
    1be4:	8b 87       	std	Y+11, r24	; 0x0b
    1be6:	9c 87       	std	Y+12, r25	; 0x0c
    1be8:	ad 87       	std	Y+13, r26	; 0x0d
    1bea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bec:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bee:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bf0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bf2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	4a ef       	ldi	r20, 0xFA	; 250
    1bfa:	54 e4       	ldi	r21, 0x44	; 68
    1bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c00:	dc 01       	movw	r26, r24
    1c02:	cb 01       	movw	r24, r22
    1c04:	8f 83       	std	Y+7, r24	; 0x07
    1c06:	98 87       	std	Y+8, r25	; 0x08
    1c08:	a9 87       	std	Y+9, r26	; 0x09
    1c0a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c0e:	78 85       	ldd	r23, Y+8	; 0x08
    1c10:	89 85       	ldd	r24, Y+9	; 0x09
    1c12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	40 e8       	ldi	r20, 0x80	; 128
    1c1a:	5f e3       	ldi	r21, 0x3F	; 63
    1c1c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c20:	88 23       	and	r24, r24
    1c22:	2c f4       	brge	.+10     	; 0x1c2e <LCD_init+0x84>
		__ticks = 1;
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	9e 83       	std	Y+6, r25	; 0x06
    1c2a:	8d 83       	std	Y+5, r24	; 0x05
    1c2c:	3f c0       	rjmp	.+126    	; 0x1cac <LCD_init+0x102>
	else if (__tmp > 65535)
    1c2e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c30:	78 85       	ldd	r23, Y+8	; 0x08
    1c32:	89 85       	ldd	r24, Y+9	; 0x09
    1c34:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c36:	20 e0       	ldi	r18, 0x00	; 0
    1c38:	3f ef       	ldi	r19, 0xFF	; 255
    1c3a:	4f e7       	ldi	r20, 0x7F	; 127
    1c3c:	57 e4       	ldi	r21, 0x47	; 71
    1c3e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c42:	18 16       	cp	r1, r24
    1c44:	4c f5       	brge	.+82     	; 0x1c98 <LCD_init+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c46:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c48:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	40 e2       	ldi	r20, 0x20	; 32
    1c54:	51 e4       	ldi	r21, 0x41	; 65
    1c56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5a:	dc 01       	movw	r26, r24
    1c5c:	cb 01       	movw	r24, r22
    1c5e:	bc 01       	movw	r22, r24
    1c60:	cd 01       	movw	r24, r26
    1c62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	9e 83       	std	Y+6, r25	; 0x06
    1c6c:	8d 83       	std	Y+5, r24	; 0x05
    1c6e:	0f c0       	rjmp	.+30     	; 0x1c8e <LCD_init+0xe4>
    1c70:	88 ec       	ldi	r24, 0xC8	; 200
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	9c 83       	std	Y+4, r25	; 0x04
    1c76:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c78:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7c:	01 97       	sbiw	r24, 0x01	; 1
    1c7e:	f1 f7       	brne	.-4      	; 0x1c7c <LCD_init+0xd2>
    1c80:	9c 83       	std	Y+4, r25	; 0x04
    1c82:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c84:	8d 81       	ldd	r24, Y+5	; 0x05
    1c86:	9e 81       	ldd	r25, Y+6	; 0x06
    1c88:	01 97       	sbiw	r24, 0x01	; 1
    1c8a:	9e 83       	std	Y+6, r25	; 0x06
    1c8c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c90:	9e 81       	ldd	r25, Y+6	; 0x06
    1c92:	00 97       	sbiw	r24, 0x00	; 0
    1c94:	69 f7       	brne	.-38     	; 0x1c70 <LCD_init+0xc6>
    1c96:	14 c0       	rjmp	.+40     	; 0x1cc0 <LCD_init+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c98:	6f 81       	ldd	r22, Y+7	; 0x07
    1c9a:	78 85       	ldd	r23, Y+8	; 0x08
    1c9c:	89 85       	ldd	r24, Y+9	; 0x09
    1c9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	9e 83       	std	Y+6, r25	; 0x06
    1caa:	8d 83       	std	Y+5, r24	; 0x05
    1cac:	8d 81       	ldd	r24, Y+5	; 0x05
    1cae:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb0:	9a 83       	std	Y+2, r25	; 0x02
    1cb2:	89 83       	std	Y+1, r24	; 0x01
    1cb4:	89 81       	ldd	r24, Y+1	; 0x01
    1cb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb8:	01 97       	sbiw	r24, 0x01	; 1
    1cba:	f1 f7       	brne	.-4      	; 0x1cb8 <LCD_init+0x10e>
    1cbc:	9a 83       	std	Y+2, r25	; 0x02
    1cbe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);/*DELAY ALWAYS > 15MS*/

	#if(LCD_DATA_BITS_MODE == 8)
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    1cc0:	82 e0       	ldi	r24, 0x02	; 2
    1cc2:	6f ef       	ldi	r22, 0xFF	; 255
    1cc4:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <GPIO_setupPortDirection>
	LCD_SendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1cc8:	88 e3       	ldi	r24, 0x38	; 56
    1cca:	0e 94 76 0e 	call	0x1cec	; 0x1cec <LCD_SendCommand>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID , PIN_OUTPUT);
	LCD_SendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
	LCD_SendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
	LCD_SendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
#endif
	LCD_SendCommand(LCD_CURSOR_OFF); /* cursor off */
    1cce:	8c e0       	ldi	r24, 0x0C	; 12
    1cd0:	0e 94 76 0e 	call	0x1cec	; 0x1cec <LCD_SendCommand>
	LCD_SendCommand(LCD_CLEAR_COMMAND);
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	0e 94 76 0e 	call	0x1cec	; 0x1cec <LCD_SendCommand>
}
    1cda:	2e 96       	adiw	r28, 0x0e	; 14
    1cdc:	0f b6       	in	r0, 0x3f	; 63
    1cde:	f8 94       	cli
    1ce0:	de bf       	out	0x3e, r29	; 62
    1ce2:	0f be       	out	0x3f, r0	; 63
    1ce4:	cd bf       	out	0x3d, r28	; 61
    1ce6:	cf 91       	pop	r28
    1ce8:	df 91       	pop	r29
    1cea:	08 95       	ret

00001cec <LCD_SendCommand>:

/*SEND COMMAND*/

void LCD_SendCommand(uint8 command)
{
    1cec:	df 93       	push	r29
    1cee:	cf 93       	push	r28
    1cf0:	cd b7       	in	r28, 0x3d	; 61
    1cf2:	de b7       	in	r29, 0x3e	; 62
    1cf4:	e9 97       	sbiw	r28, 0x39	; 57
    1cf6:	0f b6       	in	r0, 0x3f	; 63
    1cf8:	f8 94       	cli
    1cfa:	de bf       	out	0x3e, r29	; 62
    1cfc:	0f be       	out	0x3f, r0	; 63
    1cfe:	cd bf       	out	0x3d, r28	; 61
    1d00:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);/*RS=0*/
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	60 e0       	ldi	r22, 0x00	; 0
    1d06:	40 e0       	ldi	r20, 0x00	; 0
    1d08:	0e 94 82 0b 	call	0x1704	; 0x1704 <GPIO_writePin>
    1d0c:	80 e0       	ldi	r24, 0x00	; 0
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	a0 e8       	ldi	r26, 0x80	; 128
    1d12:	bf e3       	ldi	r27, 0x3F	; 63
    1d14:	8d ab       	std	Y+53, r24	; 0x35
    1d16:	9e ab       	std	Y+54, r25	; 0x36
    1d18:	af ab       	std	Y+55, r26	; 0x37
    1d1a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d1c:	6d a9       	ldd	r22, Y+53	; 0x35
    1d1e:	7e a9       	ldd	r23, Y+54	; 0x36
    1d20:	8f a9       	ldd	r24, Y+55	; 0x37
    1d22:	98 ad       	ldd	r25, Y+56	; 0x38
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	4a ef       	ldi	r20, 0xFA	; 250
    1d2a:	54 e4       	ldi	r21, 0x44	; 68
    1d2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	89 ab       	std	Y+49, r24	; 0x31
    1d36:	9a ab       	std	Y+50, r25	; 0x32
    1d38:	ab ab       	std	Y+51, r26	; 0x33
    1d3a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d3c:	69 a9       	ldd	r22, Y+49	; 0x31
    1d3e:	7a a9       	ldd	r23, Y+50	; 0x32
    1d40:	8b a9       	ldd	r24, Y+51	; 0x33
    1d42:	9c a9       	ldd	r25, Y+52	; 0x34
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	40 e8       	ldi	r20, 0x80	; 128
    1d4a:	5f e3       	ldi	r21, 0x3F	; 63
    1d4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d50:	88 23       	and	r24, r24
    1d52:	2c f4       	brge	.+10     	; 0x1d5e <LCD_SendCommand+0x72>
		__ticks = 1;
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	98 ab       	std	Y+48, r25	; 0x30
    1d5a:	8f a7       	std	Y+47, r24	; 0x2f
    1d5c:	3f c0       	rjmp	.+126    	; 0x1ddc <LCD_SendCommand+0xf0>
	else if (__tmp > 65535)
    1d5e:	69 a9       	ldd	r22, Y+49	; 0x31
    1d60:	7a a9       	ldd	r23, Y+50	; 0x32
    1d62:	8b a9       	ldd	r24, Y+51	; 0x33
    1d64:	9c a9       	ldd	r25, Y+52	; 0x34
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	3f ef       	ldi	r19, 0xFF	; 255
    1d6a:	4f e7       	ldi	r20, 0x7F	; 127
    1d6c:	57 e4       	ldi	r21, 0x47	; 71
    1d6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d72:	18 16       	cp	r1, r24
    1d74:	4c f5       	brge	.+82     	; 0x1dc8 <LCD_SendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d76:	6d a9       	ldd	r22, Y+53	; 0x35
    1d78:	7e a9       	ldd	r23, Y+54	; 0x36
    1d7a:	8f a9       	ldd	r24, Y+55	; 0x37
    1d7c:	98 ad       	ldd	r25, Y+56	; 0x38
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	40 e2       	ldi	r20, 0x20	; 32
    1d84:	51 e4       	ldi	r21, 0x41	; 65
    1d86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	bc 01       	movw	r22, r24
    1d90:	cd 01       	movw	r24, r26
    1d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	98 ab       	std	Y+48, r25	; 0x30
    1d9c:	8f a7       	std	Y+47, r24	; 0x2f
    1d9e:	0f c0       	rjmp	.+30     	; 0x1dbe <LCD_SendCommand+0xd2>
    1da0:	88 ec       	ldi	r24, 0xC8	; 200
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	9e a7       	std	Y+46, r25	; 0x2e
    1da6:	8d a7       	std	Y+45, r24	; 0x2d
    1da8:	8d a5       	ldd	r24, Y+45	; 0x2d
    1daa:	9e a5       	ldd	r25, Y+46	; 0x2e
    1dac:	01 97       	sbiw	r24, 0x01	; 1
    1dae:	f1 f7       	brne	.-4      	; 0x1dac <LCD_SendCommand+0xc0>
    1db0:	9e a7       	std	Y+46, r25	; 0x2e
    1db2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1db6:	98 a9       	ldd	r25, Y+48	; 0x30
    1db8:	01 97       	sbiw	r24, 0x01	; 1
    1dba:	98 ab       	std	Y+48, r25	; 0x30
    1dbc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dbe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dc0:	98 a9       	ldd	r25, Y+48	; 0x30
    1dc2:	00 97       	sbiw	r24, 0x00	; 0
    1dc4:	69 f7       	brne	.-38     	; 0x1da0 <LCD_SendCommand+0xb4>
    1dc6:	14 c0       	rjmp	.+40     	; 0x1df0 <LCD_SendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dc8:	69 a9       	ldd	r22, Y+49	; 0x31
    1dca:	7a a9       	ldd	r23, Y+50	; 0x32
    1dcc:	8b a9       	ldd	r24, Y+51	; 0x33
    1dce:	9c a9       	ldd	r25, Y+52	; 0x34
    1dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	98 ab       	std	Y+48, r25	; 0x30
    1dda:	8f a7       	std	Y+47, r24	; 0x2f
    1ddc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dde:	98 a9       	ldd	r25, Y+48	; 0x30
    1de0:	9c a7       	std	Y+44, r25	; 0x2c
    1de2:	8b a7       	std	Y+43, r24	; 0x2b
    1de4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1de6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1de8:	01 97       	sbiw	r24, 0x01	; 1
    1dea:	f1 f7       	brne	.-4      	; 0x1de8 <LCD_SendCommand+0xfc>
    1dec:	9c a7       	std	Y+44, r25	; 0x2c
    1dee:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);/*E=1*/
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	62 e0       	ldi	r22, 0x02	; 2
    1df4:	41 e0       	ldi	r20, 0x01	; 1
    1df6:	0e 94 82 0b 	call	0x1704	; 0x1704 <GPIO_writePin>
    1dfa:	80 e0       	ldi	r24, 0x00	; 0
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	a0 e8       	ldi	r26, 0x80	; 128
    1e00:	bf e3       	ldi	r27, 0x3F	; 63
    1e02:	8f a3       	std	Y+39, r24	; 0x27
    1e04:	98 a7       	std	Y+40, r25	; 0x28
    1e06:	a9 a7       	std	Y+41, r26	; 0x29
    1e08:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e0a:	6f a1       	ldd	r22, Y+39	; 0x27
    1e0c:	78 a5       	ldd	r23, Y+40	; 0x28
    1e0e:	89 a5       	ldd	r24, Y+41	; 0x29
    1e10:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	4a ef       	ldi	r20, 0xFA	; 250
    1e18:	54 e4       	ldi	r21, 0x44	; 68
    1e1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	cb 01       	movw	r24, r22
    1e22:	8b a3       	std	Y+35, r24	; 0x23
    1e24:	9c a3       	std	Y+36, r25	; 0x24
    1e26:	ad a3       	std	Y+37, r26	; 0x25
    1e28:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e2a:	6b a1       	ldd	r22, Y+35	; 0x23
    1e2c:	7c a1       	ldd	r23, Y+36	; 0x24
    1e2e:	8d a1       	ldd	r24, Y+37	; 0x25
    1e30:	9e a1       	ldd	r25, Y+38	; 0x26
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	40 e8       	ldi	r20, 0x80	; 128
    1e38:	5f e3       	ldi	r21, 0x3F	; 63
    1e3a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e3e:	88 23       	and	r24, r24
    1e40:	2c f4       	brge	.+10     	; 0x1e4c <LCD_SendCommand+0x160>
		__ticks = 1;
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	9a a3       	std	Y+34, r25	; 0x22
    1e48:	89 a3       	std	Y+33, r24	; 0x21
    1e4a:	3f c0       	rjmp	.+126    	; 0x1eca <LCD_SendCommand+0x1de>
	else if (__tmp > 65535)
    1e4c:	6b a1       	ldd	r22, Y+35	; 0x23
    1e4e:	7c a1       	ldd	r23, Y+36	; 0x24
    1e50:	8d a1       	ldd	r24, Y+37	; 0x25
    1e52:	9e a1       	ldd	r25, Y+38	; 0x26
    1e54:	20 e0       	ldi	r18, 0x00	; 0
    1e56:	3f ef       	ldi	r19, 0xFF	; 255
    1e58:	4f e7       	ldi	r20, 0x7F	; 127
    1e5a:	57 e4       	ldi	r21, 0x47	; 71
    1e5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e60:	18 16       	cp	r1, r24
    1e62:	4c f5       	brge	.+82     	; 0x1eb6 <LCD_SendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e64:	6f a1       	ldd	r22, Y+39	; 0x27
    1e66:	78 a5       	ldd	r23, Y+40	; 0x28
    1e68:	89 a5       	ldd	r24, Y+41	; 0x29
    1e6a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e6c:	20 e0       	ldi	r18, 0x00	; 0
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	40 e2       	ldi	r20, 0x20	; 32
    1e72:	51 e4       	ldi	r21, 0x41	; 65
    1e74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e78:	dc 01       	movw	r26, r24
    1e7a:	cb 01       	movw	r24, r22
    1e7c:	bc 01       	movw	r22, r24
    1e7e:	cd 01       	movw	r24, r26
    1e80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e84:	dc 01       	movw	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	9a a3       	std	Y+34, r25	; 0x22
    1e8a:	89 a3       	std	Y+33, r24	; 0x21
    1e8c:	0f c0       	rjmp	.+30     	; 0x1eac <LCD_SendCommand+0x1c0>
    1e8e:	88 ec       	ldi	r24, 0xC8	; 200
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	98 a3       	std	Y+32, r25	; 0x20
    1e94:	8f 8f       	std	Y+31, r24	; 0x1f
    1e96:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e98:	98 a1       	ldd	r25, Y+32	; 0x20
    1e9a:	01 97       	sbiw	r24, 0x01	; 1
    1e9c:	f1 f7       	brne	.-4      	; 0x1e9a <LCD_SendCommand+0x1ae>
    1e9e:	98 a3       	std	Y+32, r25	; 0x20
    1ea0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ea2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ea4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ea6:	01 97       	sbiw	r24, 0x01	; 1
    1ea8:	9a a3       	std	Y+34, r25	; 0x22
    1eaa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eac:	89 a1       	ldd	r24, Y+33	; 0x21
    1eae:	9a a1       	ldd	r25, Y+34	; 0x22
    1eb0:	00 97       	sbiw	r24, 0x00	; 0
    1eb2:	69 f7       	brne	.-38     	; 0x1e8e <LCD_SendCommand+0x1a2>
    1eb4:	14 c0       	rjmp	.+40     	; 0x1ede <LCD_SendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eb6:	6b a1       	ldd	r22, Y+35	; 0x23
    1eb8:	7c a1       	ldd	r23, Y+36	; 0x24
    1eba:	8d a1       	ldd	r24, Y+37	; 0x25
    1ebc:	9e a1       	ldd	r25, Y+38	; 0x26
    1ebe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec2:	dc 01       	movw	r26, r24
    1ec4:	cb 01       	movw	r24, r22
    1ec6:	9a a3       	std	Y+34, r25	; 0x22
    1ec8:	89 a3       	std	Y+33, r24	; 0x21
    1eca:	89 a1       	ldd	r24, Y+33	; 0x21
    1ecc:	9a a1       	ldd	r25, Y+34	; 0x22
    1ece:	9e 8f       	std	Y+30, r25	; 0x1e
    1ed0:	8d 8f       	std	Y+29, r24	; 0x1d
    1ed2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ed4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ed6:	01 97       	sbiw	r24, 0x01	; 1
    1ed8:	f1 f7       	brne	.-4      	; 0x1ed6 <LCD_SendCommand+0x1ea>
    1eda:	9e 8f       	std	Y+30, r25	; 0x1e
    1edc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
#if(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID, command);/*WRITE COMMAND*/
    1ede:	82 e0       	ldi	r24, 0x02	; 2
    1ee0:	69 ad       	ldd	r22, Y+57	; 0x39
    1ee2:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <GPIO_writePort>
    1ee6:	80 e0       	ldi	r24, 0x00	; 0
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	a0 e8       	ldi	r26, 0x80	; 128
    1eec:	bf e3       	ldi	r27, 0x3F	; 63
    1eee:	89 8f       	std	Y+25, r24	; 0x19
    1ef0:	9a 8f       	std	Y+26, r25	; 0x1a
    1ef2:	ab 8f       	std	Y+27, r26	; 0x1b
    1ef4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef6:	69 8d       	ldd	r22, Y+25	; 0x19
    1ef8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1efa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1efc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	4a ef       	ldi	r20, 0xFA	; 250
    1f04:	54 e4       	ldi	r21, 0x44	; 68
    1f06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	8d 8b       	std	Y+21, r24	; 0x15
    1f10:	9e 8b       	std	Y+22, r25	; 0x16
    1f12:	af 8b       	std	Y+23, r26	; 0x17
    1f14:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f16:	6d 89       	ldd	r22, Y+21	; 0x15
    1f18:	7e 89       	ldd	r23, Y+22	; 0x16
    1f1a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f1c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	40 e8       	ldi	r20, 0x80	; 128
    1f24:	5f e3       	ldi	r21, 0x3F	; 63
    1f26:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f2a:	88 23       	and	r24, r24
    1f2c:	2c f4       	brge	.+10     	; 0x1f38 <LCD_SendCommand+0x24c>
		__ticks = 1;
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	9c 8b       	std	Y+20, r25	; 0x14
    1f34:	8b 8b       	std	Y+19, r24	; 0x13
    1f36:	3f c0       	rjmp	.+126    	; 0x1fb6 <LCD_SendCommand+0x2ca>
	else if (__tmp > 65535)
    1f38:	6d 89       	ldd	r22, Y+21	; 0x15
    1f3a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f3c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f3e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	3f ef       	ldi	r19, 0xFF	; 255
    1f44:	4f e7       	ldi	r20, 0x7F	; 127
    1f46:	57 e4       	ldi	r21, 0x47	; 71
    1f48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f4c:	18 16       	cp	r1, r24
    1f4e:	4c f5       	brge	.+82     	; 0x1fa2 <LCD_SendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f50:	69 8d       	ldd	r22, Y+25	; 0x19
    1f52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	40 e2       	ldi	r20, 0x20	; 32
    1f5e:	51 e4       	ldi	r21, 0x41	; 65
    1f60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	bc 01       	movw	r22, r24
    1f6a:	cd 01       	movw	r24, r26
    1f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	9c 8b       	std	Y+20, r25	; 0x14
    1f76:	8b 8b       	std	Y+19, r24	; 0x13
    1f78:	0f c0       	rjmp	.+30     	; 0x1f98 <LCD_SendCommand+0x2ac>
    1f7a:	88 ec       	ldi	r24, 0xC8	; 200
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	9a 8b       	std	Y+18, r25	; 0x12
    1f80:	89 8b       	std	Y+17, r24	; 0x11
    1f82:	89 89       	ldd	r24, Y+17	; 0x11
    1f84:	9a 89       	ldd	r25, Y+18	; 0x12
    1f86:	01 97       	sbiw	r24, 0x01	; 1
    1f88:	f1 f7       	brne	.-4      	; 0x1f86 <LCD_SendCommand+0x29a>
    1f8a:	9a 8b       	std	Y+18, r25	; 0x12
    1f8c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f8e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f90:	9c 89       	ldd	r25, Y+20	; 0x14
    1f92:	01 97       	sbiw	r24, 0x01	; 1
    1f94:	9c 8b       	std	Y+20, r25	; 0x14
    1f96:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f98:	8b 89       	ldd	r24, Y+19	; 0x13
    1f9a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f9c:	00 97       	sbiw	r24, 0x00	; 0
    1f9e:	69 f7       	brne	.-38     	; 0x1f7a <LCD_SendCommand+0x28e>
    1fa0:	14 c0       	rjmp	.+40     	; 0x1fca <LCD_SendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa2:	6d 89       	ldd	r22, Y+21	; 0x15
    1fa4:	7e 89       	ldd	r23, Y+22	; 0x16
    1fa6:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa8:	98 8d       	ldd	r25, Y+24	; 0x18
    1faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	9c 8b       	std	Y+20, r25	; 0x14
    1fb4:	8b 8b       	std	Y+19, r24	; 0x13
    1fb6:	8b 89       	ldd	r24, Y+19	; 0x13
    1fb8:	9c 89       	ldd	r25, Y+20	; 0x14
    1fba:	98 8b       	std	Y+16, r25	; 0x10
    1fbc:	8f 87       	std	Y+15, r24	; 0x0f
    1fbe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fc0:	98 89       	ldd	r25, Y+16	; 0x10
    1fc2:	01 97       	sbiw	r24, 0x01	; 1
    1fc4:	f1 f7       	brne	.-4      	; 0x1fc2 <LCD_SendCommand+0x2d6>
    1fc6:	98 8b       	std	Y+16, r25	; 0x10
    1fc8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID,LOGIC_LOW);/*E=0*/
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	62 e0       	ldi	r22, 0x02	; 2
    1fce:	40 e0       	ldi	r20, 0x00	; 0
    1fd0:	0e 94 82 0b 	call	0x1704	; 0x1704 <GPIO_writePin>
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	a0 e8       	ldi	r26, 0x80	; 128
    1fda:	bf e3       	ldi	r27, 0x3F	; 63
    1fdc:	8b 87       	std	Y+11, r24	; 0x0b
    1fde:	9c 87       	std	Y+12, r25	; 0x0c
    1fe0:	ad 87       	std	Y+13, r26	; 0x0d
    1fe2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fe4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fe6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fe8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fea:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	4a ef       	ldi	r20, 0xFA	; 250
    1ff2:	54 e4       	ldi	r21, 0x44	; 68
    1ff4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	cb 01       	movw	r24, r22
    1ffc:	8f 83       	std	Y+7, r24	; 0x07
    1ffe:	98 87       	std	Y+8, r25	; 0x08
    2000:	a9 87       	std	Y+9, r26	; 0x09
    2002:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2004:	6f 81       	ldd	r22, Y+7	; 0x07
    2006:	78 85       	ldd	r23, Y+8	; 0x08
    2008:	89 85       	ldd	r24, Y+9	; 0x09
    200a:	9a 85       	ldd	r25, Y+10	; 0x0a
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	40 e8       	ldi	r20, 0x80	; 128
    2012:	5f e3       	ldi	r21, 0x3F	; 63
    2014:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2018:	88 23       	and	r24, r24
    201a:	2c f4       	brge	.+10     	; 0x2026 <LCD_SendCommand+0x33a>
		__ticks = 1;
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	9e 83       	std	Y+6, r25	; 0x06
    2022:	8d 83       	std	Y+5, r24	; 0x05
    2024:	3f c0       	rjmp	.+126    	; 0x20a4 <LCD_SendCommand+0x3b8>
	else if (__tmp > 65535)
    2026:	6f 81       	ldd	r22, Y+7	; 0x07
    2028:	78 85       	ldd	r23, Y+8	; 0x08
    202a:	89 85       	ldd	r24, Y+9	; 0x09
    202c:	9a 85       	ldd	r25, Y+10	; 0x0a
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	3f ef       	ldi	r19, 0xFF	; 255
    2032:	4f e7       	ldi	r20, 0x7F	; 127
    2034:	57 e4       	ldi	r21, 0x47	; 71
    2036:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    203a:	18 16       	cp	r1, r24
    203c:	4c f5       	brge	.+82     	; 0x2090 <LCD_SendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    203e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2040:	7c 85       	ldd	r23, Y+12	; 0x0c
    2042:	8d 85       	ldd	r24, Y+13	; 0x0d
    2044:	9e 85       	ldd	r25, Y+14	; 0x0e
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	40 e2       	ldi	r20, 0x20	; 32
    204c:	51 e4       	ldi	r21, 0x41	; 65
    204e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2052:	dc 01       	movw	r26, r24
    2054:	cb 01       	movw	r24, r22
    2056:	bc 01       	movw	r22, r24
    2058:	cd 01       	movw	r24, r26
    205a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
    2062:	9e 83       	std	Y+6, r25	; 0x06
    2064:	8d 83       	std	Y+5, r24	; 0x05
    2066:	0f c0       	rjmp	.+30     	; 0x2086 <LCD_SendCommand+0x39a>
    2068:	88 ec       	ldi	r24, 0xC8	; 200
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	9c 83       	std	Y+4, r25	; 0x04
    206e:	8b 83       	std	Y+3, r24	; 0x03
    2070:	8b 81       	ldd	r24, Y+3	; 0x03
    2072:	9c 81       	ldd	r25, Y+4	; 0x04
    2074:	01 97       	sbiw	r24, 0x01	; 1
    2076:	f1 f7       	brne	.-4      	; 0x2074 <LCD_SendCommand+0x388>
    2078:	9c 83       	std	Y+4, r25	; 0x04
    207a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    207c:	8d 81       	ldd	r24, Y+5	; 0x05
    207e:	9e 81       	ldd	r25, Y+6	; 0x06
    2080:	01 97       	sbiw	r24, 0x01	; 1
    2082:	9e 83       	std	Y+6, r25	; 0x06
    2084:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2086:	8d 81       	ldd	r24, Y+5	; 0x05
    2088:	9e 81       	ldd	r25, Y+6	; 0x06
    208a:	00 97       	sbiw	r24, 0x00	; 0
    208c:	69 f7       	brne	.-38     	; 0x2068 <LCD_SendCommand+0x37c>
    208e:	14 c0       	rjmp	.+40     	; 0x20b8 <LCD_SendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2090:	6f 81       	ldd	r22, Y+7	; 0x07
    2092:	78 85       	ldd	r23, Y+8	; 0x08
    2094:	89 85       	ldd	r24, Y+9	; 0x09
    2096:	9a 85       	ldd	r25, Y+10	; 0x0a
    2098:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    209c:	dc 01       	movw	r26, r24
    209e:	cb 01       	movw	r24, r22
    20a0:	9e 83       	std	Y+6, r25	; 0x06
    20a2:	8d 83       	std	Y+5, r24	; 0x05
    20a4:	8d 81       	ldd	r24, Y+5	; 0x05
    20a6:	9e 81       	ldd	r25, Y+6	; 0x06
    20a8:	9a 83       	std	Y+2, r25	; 0x02
    20aa:	89 83       	std	Y+1, r24	; 0x01
    20ac:	89 81       	ldd	r24, Y+1	; 0x01
    20ae:	9a 81       	ldd	r25, Y+2	; 0x02
    20b0:	01 97       	sbiw	r24, 0x01	; 1
    20b2:	f1 f7       	brne	.-4      	; 0x20b0 <LCD_SendCommand+0x3c4>
    20b4:	9a 83       	std	Y+2, r25	; 0x02
    20b6:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /*E=0*/
	_delay_ms(1);

#endif

}
    20b8:	e9 96       	adiw	r28, 0x39	; 57
    20ba:	0f b6       	in	r0, 0x3f	; 63
    20bc:	f8 94       	cli
    20be:	de bf       	out	0x3e, r29	; 62
    20c0:	0f be       	out	0x3f, r0	; 63
    20c2:	cd bf       	out	0x3d, r28	; 61
    20c4:	cf 91       	pop	r28
    20c6:	df 91       	pop	r29
    20c8:	08 95       	ret

000020ca <LCD_DisplayChar>:

/*DISPLAY*/

void LCD_DisplayChar(uint8 data)
{
    20ca:	df 93       	push	r29
    20cc:	cf 93       	push	r28
    20ce:	cd b7       	in	r28, 0x3d	; 61
    20d0:	de b7       	in	r29, 0x3e	; 62
    20d2:	e9 97       	sbiw	r28, 0x39	; 57
    20d4:	0f b6       	in	r0, 0x3f	; 63
    20d6:	f8 94       	cli
    20d8:	de bf       	out	0x3e, r29	; 62
    20da:	0f be       	out	0x3f, r0	; 63
    20dc:	cd bf       	out	0x3d, r28	; 61
    20de:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);/*RS=1*/
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	60 e0       	ldi	r22, 0x00	; 0
    20e4:	41 e0       	ldi	r20, 0x01	; 1
    20e6:	0e 94 82 0b 	call	0x1704	; 0x1704 <GPIO_writePin>
    20ea:	80 e0       	ldi	r24, 0x00	; 0
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	a0 e8       	ldi	r26, 0x80	; 128
    20f0:	bf e3       	ldi	r27, 0x3F	; 63
    20f2:	8d ab       	std	Y+53, r24	; 0x35
    20f4:	9e ab       	std	Y+54, r25	; 0x36
    20f6:	af ab       	std	Y+55, r26	; 0x37
    20f8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20fa:	6d a9       	ldd	r22, Y+53	; 0x35
    20fc:	7e a9       	ldd	r23, Y+54	; 0x36
    20fe:	8f a9       	ldd	r24, Y+55	; 0x37
    2100:	98 ad       	ldd	r25, Y+56	; 0x38
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	4a ef       	ldi	r20, 0xFA	; 250
    2108:	54 e4       	ldi	r21, 0x44	; 68
    210a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	89 ab       	std	Y+49, r24	; 0x31
    2114:	9a ab       	std	Y+50, r25	; 0x32
    2116:	ab ab       	std	Y+51, r26	; 0x33
    2118:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    211a:	69 a9       	ldd	r22, Y+49	; 0x31
    211c:	7a a9       	ldd	r23, Y+50	; 0x32
    211e:	8b a9       	ldd	r24, Y+51	; 0x33
    2120:	9c a9       	ldd	r25, Y+52	; 0x34
    2122:	20 e0       	ldi	r18, 0x00	; 0
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	40 e8       	ldi	r20, 0x80	; 128
    2128:	5f e3       	ldi	r21, 0x3F	; 63
    212a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    212e:	88 23       	and	r24, r24
    2130:	2c f4       	brge	.+10     	; 0x213c <LCD_DisplayChar+0x72>
		__ticks = 1;
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	98 ab       	std	Y+48, r25	; 0x30
    2138:	8f a7       	std	Y+47, r24	; 0x2f
    213a:	3f c0       	rjmp	.+126    	; 0x21ba <LCD_DisplayChar+0xf0>
	else if (__tmp > 65535)
    213c:	69 a9       	ldd	r22, Y+49	; 0x31
    213e:	7a a9       	ldd	r23, Y+50	; 0x32
    2140:	8b a9       	ldd	r24, Y+51	; 0x33
    2142:	9c a9       	ldd	r25, Y+52	; 0x34
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	3f ef       	ldi	r19, 0xFF	; 255
    2148:	4f e7       	ldi	r20, 0x7F	; 127
    214a:	57 e4       	ldi	r21, 0x47	; 71
    214c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2150:	18 16       	cp	r1, r24
    2152:	4c f5       	brge	.+82     	; 0x21a6 <LCD_DisplayChar+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2154:	6d a9       	ldd	r22, Y+53	; 0x35
    2156:	7e a9       	ldd	r23, Y+54	; 0x36
    2158:	8f a9       	ldd	r24, Y+55	; 0x37
    215a:	98 ad       	ldd	r25, Y+56	; 0x38
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	40 e2       	ldi	r20, 0x20	; 32
    2162:	51 e4       	ldi	r21, 0x41	; 65
    2164:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2168:	dc 01       	movw	r26, r24
    216a:	cb 01       	movw	r24, r22
    216c:	bc 01       	movw	r22, r24
    216e:	cd 01       	movw	r24, r26
    2170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	98 ab       	std	Y+48, r25	; 0x30
    217a:	8f a7       	std	Y+47, r24	; 0x2f
    217c:	0f c0       	rjmp	.+30     	; 0x219c <LCD_DisplayChar+0xd2>
    217e:	88 ec       	ldi	r24, 0xC8	; 200
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	9e a7       	std	Y+46, r25	; 0x2e
    2184:	8d a7       	std	Y+45, r24	; 0x2d
    2186:	8d a5       	ldd	r24, Y+45	; 0x2d
    2188:	9e a5       	ldd	r25, Y+46	; 0x2e
    218a:	01 97       	sbiw	r24, 0x01	; 1
    218c:	f1 f7       	brne	.-4      	; 0x218a <LCD_DisplayChar+0xc0>
    218e:	9e a7       	std	Y+46, r25	; 0x2e
    2190:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2192:	8f a5       	ldd	r24, Y+47	; 0x2f
    2194:	98 a9       	ldd	r25, Y+48	; 0x30
    2196:	01 97       	sbiw	r24, 0x01	; 1
    2198:	98 ab       	std	Y+48, r25	; 0x30
    219a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    219c:	8f a5       	ldd	r24, Y+47	; 0x2f
    219e:	98 a9       	ldd	r25, Y+48	; 0x30
    21a0:	00 97       	sbiw	r24, 0x00	; 0
    21a2:	69 f7       	brne	.-38     	; 0x217e <LCD_DisplayChar+0xb4>
    21a4:	14 c0       	rjmp	.+40     	; 0x21ce <LCD_DisplayChar+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21a6:	69 a9       	ldd	r22, Y+49	; 0x31
    21a8:	7a a9       	ldd	r23, Y+50	; 0x32
    21aa:	8b a9       	ldd	r24, Y+51	; 0x33
    21ac:	9c a9       	ldd	r25, Y+52	; 0x34
    21ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	98 ab       	std	Y+48, r25	; 0x30
    21b8:	8f a7       	std	Y+47, r24	; 0x2f
    21ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    21bc:	98 a9       	ldd	r25, Y+48	; 0x30
    21be:	9c a7       	std	Y+44, r25	; 0x2c
    21c0:	8b a7       	std	Y+43, r24	; 0x2b
    21c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    21c4:	9c a5       	ldd	r25, Y+44	; 0x2c
    21c6:	01 97       	sbiw	r24, 0x01	; 1
    21c8:	f1 f7       	brne	.-4      	; 0x21c6 <LCD_DisplayChar+0xfc>
    21ca:	9c a7       	std	Y+44, r25	; 0x2c
    21cc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);/*E=1*/
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	62 e0       	ldi	r22, 0x02	; 2
    21d2:	41 e0       	ldi	r20, 0x01	; 1
    21d4:	0e 94 82 0b 	call	0x1704	; 0x1704 <GPIO_writePin>
    21d8:	80 e0       	ldi	r24, 0x00	; 0
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	a0 e8       	ldi	r26, 0x80	; 128
    21de:	bf e3       	ldi	r27, 0x3F	; 63
    21e0:	8f a3       	std	Y+39, r24	; 0x27
    21e2:	98 a7       	std	Y+40, r25	; 0x28
    21e4:	a9 a7       	std	Y+41, r26	; 0x29
    21e6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21e8:	6f a1       	ldd	r22, Y+39	; 0x27
    21ea:	78 a5       	ldd	r23, Y+40	; 0x28
    21ec:	89 a5       	ldd	r24, Y+41	; 0x29
    21ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    21f0:	20 e0       	ldi	r18, 0x00	; 0
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	4a ef       	ldi	r20, 0xFA	; 250
    21f6:	54 e4       	ldi	r21, 0x44	; 68
    21f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	8b a3       	std	Y+35, r24	; 0x23
    2202:	9c a3       	std	Y+36, r25	; 0x24
    2204:	ad a3       	std	Y+37, r26	; 0x25
    2206:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2208:	6b a1       	ldd	r22, Y+35	; 0x23
    220a:	7c a1       	ldd	r23, Y+36	; 0x24
    220c:	8d a1       	ldd	r24, Y+37	; 0x25
    220e:	9e a1       	ldd	r25, Y+38	; 0x26
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	40 e8       	ldi	r20, 0x80	; 128
    2216:	5f e3       	ldi	r21, 0x3F	; 63
    2218:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    221c:	88 23       	and	r24, r24
    221e:	2c f4       	brge	.+10     	; 0x222a <LCD_DisplayChar+0x160>
		__ticks = 1;
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	9a a3       	std	Y+34, r25	; 0x22
    2226:	89 a3       	std	Y+33, r24	; 0x21
    2228:	3f c0       	rjmp	.+126    	; 0x22a8 <LCD_DisplayChar+0x1de>
	else if (__tmp > 65535)
    222a:	6b a1       	ldd	r22, Y+35	; 0x23
    222c:	7c a1       	ldd	r23, Y+36	; 0x24
    222e:	8d a1       	ldd	r24, Y+37	; 0x25
    2230:	9e a1       	ldd	r25, Y+38	; 0x26
    2232:	20 e0       	ldi	r18, 0x00	; 0
    2234:	3f ef       	ldi	r19, 0xFF	; 255
    2236:	4f e7       	ldi	r20, 0x7F	; 127
    2238:	57 e4       	ldi	r21, 0x47	; 71
    223a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    223e:	18 16       	cp	r1, r24
    2240:	4c f5       	brge	.+82     	; 0x2294 <LCD_DisplayChar+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2242:	6f a1       	ldd	r22, Y+39	; 0x27
    2244:	78 a5       	ldd	r23, Y+40	; 0x28
    2246:	89 a5       	ldd	r24, Y+41	; 0x29
    2248:	9a a5       	ldd	r25, Y+42	; 0x2a
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	40 e2       	ldi	r20, 0x20	; 32
    2250:	51 e4       	ldi	r21, 0x41	; 65
    2252:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2256:	dc 01       	movw	r26, r24
    2258:	cb 01       	movw	r24, r22
    225a:	bc 01       	movw	r22, r24
    225c:	cd 01       	movw	r24, r26
    225e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	9a a3       	std	Y+34, r25	; 0x22
    2268:	89 a3       	std	Y+33, r24	; 0x21
    226a:	0f c0       	rjmp	.+30     	; 0x228a <LCD_DisplayChar+0x1c0>
    226c:	88 ec       	ldi	r24, 0xC8	; 200
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	98 a3       	std	Y+32, r25	; 0x20
    2272:	8f 8f       	std	Y+31, r24	; 0x1f
    2274:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2276:	98 a1       	ldd	r25, Y+32	; 0x20
    2278:	01 97       	sbiw	r24, 0x01	; 1
    227a:	f1 f7       	brne	.-4      	; 0x2278 <LCD_DisplayChar+0x1ae>
    227c:	98 a3       	std	Y+32, r25	; 0x20
    227e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2280:	89 a1       	ldd	r24, Y+33	; 0x21
    2282:	9a a1       	ldd	r25, Y+34	; 0x22
    2284:	01 97       	sbiw	r24, 0x01	; 1
    2286:	9a a3       	std	Y+34, r25	; 0x22
    2288:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    228a:	89 a1       	ldd	r24, Y+33	; 0x21
    228c:	9a a1       	ldd	r25, Y+34	; 0x22
    228e:	00 97       	sbiw	r24, 0x00	; 0
    2290:	69 f7       	brne	.-38     	; 0x226c <LCD_DisplayChar+0x1a2>
    2292:	14 c0       	rjmp	.+40     	; 0x22bc <LCD_DisplayChar+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2294:	6b a1       	ldd	r22, Y+35	; 0x23
    2296:	7c a1       	ldd	r23, Y+36	; 0x24
    2298:	8d a1       	ldd	r24, Y+37	; 0x25
    229a:	9e a1       	ldd	r25, Y+38	; 0x26
    229c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	9a a3       	std	Y+34, r25	; 0x22
    22a6:	89 a3       	std	Y+33, r24	; 0x21
    22a8:	89 a1       	ldd	r24, Y+33	; 0x21
    22aa:	9a a1       	ldd	r25, Y+34	; 0x22
    22ac:	9e 8f       	std	Y+30, r25	; 0x1e
    22ae:	8d 8f       	std	Y+29, r24	; 0x1d
    22b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22b4:	01 97       	sbiw	r24, 0x01	; 1
    22b6:	f1 f7       	brne	.-4      	; 0x22b4 <LCD_DisplayChar+0x1ea>
    22b8:	9e 8f       	std	Y+30, r25	; 0x1e
    22ba:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
#if(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID, data);/*OUT COMMAND*/
    22bc:	82 e0       	ldi	r24, 0x02	; 2
    22be:	69 ad       	ldd	r22, Y+57	; 0x39
    22c0:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <GPIO_writePort>
    22c4:	80 e0       	ldi	r24, 0x00	; 0
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	a0 e8       	ldi	r26, 0x80	; 128
    22ca:	bf e3       	ldi	r27, 0x3F	; 63
    22cc:	89 8f       	std	Y+25, r24	; 0x19
    22ce:	9a 8f       	std	Y+26, r25	; 0x1a
    22d0:	ab 8f       	std	Y+27, r26	; 0x1b
    22d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22d4:	69 8d       	ldd	r22, Y+25	; 0x19
    22d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	4a ef       	ldi	r20, 0xFA	; 250
    22e2:	54 e4       	ldi	r21, 0x44	; 68
    22e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	8d 8b       	std	Y+21, r24	; 0x15
    22ee:	9e 8b       	std	Y+22, r25	; 0x16
    22f0:	af 8b       	std	Y+23, r26	; 0x17
    22f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22f4:	6d 89       	ldd	r22, Y+21	; 0x15
    22f6:	7e 89       	ldd	r23, Y+22	; 0x16
    22f8:	8f 89       	ldd	r24, Y+23	; 0x17
    22fa:	98 8d       	ldd	r25, Y+24	; 0x18
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	40 e8       	ldi	r20, 0x80	; 128
    2302:	5f e3       	ldi	r21, 0x3F	; 63
    2304:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2308:	88 23       	and	r24, r24
    230a:	2c f4       	brge	.+10     	; 0x2316 <LCD_DisplayChar+0x24c>
		__ticks = 1;
    230c:	81 e0       	ldi	r24, 0x01	; 1
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	9c 8b       	std	Y+20, r25	; 0x14
    2312:	8b 8b       	std	Y+19, r24	; 0x13
    2314:	3f c0       	rjmp	.+126    	; 0x2394 <LCD_DisplayChar+0x2ca>
	else if (__tmp > 65535)
    2316:	6d 89       	ldd	r22, Y+21	; 0x15
    2318:	7e 89       	ldd	r23, Y+22	; 0x16
    231a:	8f 89       	ldd	r24, Y+23	; 0x17
    231c:	98 8d       	ldd	r25, Y+24	; 0x18
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	3f ef       	ldi	r19, 0xFF	; 255
    2322:	4f e7       	ldi	r20, 0x7F	; 127
    2324:	57 e4       	ldi	r21, 0x47	; 71
    2326:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    232a:	18 16       	cp	r1, r24
    232c:	4c f5       	brge	.+82     	; 0x2380 <LCD_DisplayChar+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    232e:	69 8d       	ldd	r22, Y+25	; 0x19
    2330:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2332:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2334:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	40 e2       	ldi	r20, 0x20	; 32
    233c:	51 e4       	ldi	r21, 0x41	; 65
    233e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2342:	dc 01       	movw	r26, r24
    2344:	cb 01       	movw	r24, r22
    2346:	bc 01       	movw	r22, r24
    2348:	cd 01       	movw	r24, r26
    234a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    234e:	dc 01       	movw	r26, r24
    2350:	cb 01       	movw	r24, r22
    2352:	9c 8b       	std	Y+20, r25	; 0x14
    2354:	8b 8b       	std	Y+19, r24	; 0x13
    2356:	0f c0       	rjmp	.+30     	; 0x2376 <LCD_DisplayChar+0x2ac>
    2358:	88 ec       	ldi	r24, 0xC8	; 200
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	9a 8b       	std	Y+18, r25	; 0x12
    235e:	89 8b       	std	Y+17, r24	; 0x11
    2360:	89 89       	ldd	r24, Y+17	; 0x11
    2362:	9a 89       	ldd	r25, Y+18	; 0x12
    2364:	01 97       	sbiw	r24, 0x01	; 1
    2366:	f1 f7       	brne	.-4      	; 0x2364 <LCD_DisplayChar+0x29a>
    2368:	9a 8b       	std	Y+18, r25	; 0x12
    236a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    236c:	8b 89       	ldd	r24, Y+19	; 0x13
    236e:	9c 89       	ldd	r25, Y+20	; 0x14
    2370:	01 97       	sbiw	r24, 0x01	; 1
    2372:	9c 8b       	std	Y+20, r25	; 0x14
    2374:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2376:	8b 89       	ldd	r24, Y+19	; 0x13
    2378:	9c 89       	ldd	r25, Y+20	; 0x14
    237a:	00 97       	sbiw	r24, 0x00	; 0
    237c:	69 f7       	brne	.-38     	; 0x2358 <LCD_DisplayChar+0x28e>
    237e:	14 c0       	rjmp	.+40     	; 0x23a8 <LCD_DisplayChar+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2380:	6d 89       	ldd	r22, Y+21	; 0x15
    2382:	7e 89       	ldd	r23, Y+22	; 0x16
    2384:	8f 89       	ldd	r24, Y+23	; 0x17
    2386:	98 8d       	ldd	r25, Y+24	; 0x18
    2388:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    238c:	dc 01       	movw	r26, r24
    238e:	cb 01       	movw	r24, r22
    2390:	9c 8b       	std	Y+20, r25	; 0x14
    2392:	8b 8b       	std	Y+19, r24	; 0x13
    2394:	8b 89       	ldd	r24, Y+19	; 0x13
    2396:	9c 89       	ldd	r25, Y+20	; 0x14
    2398:	98 8b       	std	Y+16, r25	; 0x10
    239a:	8f 87       	std	Y+15, r24	; 0x0f
    239c:	8f 85       	ldd	r24, Y+15	; 0x0f
    239e:	98 89       	ldd	r25, Y+16	; 0x10
    23a0:	01 97       	sbiw	r24, 0x01	; 1
    23a2:	f1 f7       	brne	.-4      	; 0x23a0 <LCD_DisplayChar+0x2d6>
    23a4:	98 8b       	std	Y+16, r25	; 0x10
    23a6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID,LOGIC_LOW);/*E=0*/
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	62 e0       	ldi	r22, 0x02	; 2
    23ac:	40 e0       	ldi	r20, 0x00	; 0
    23ae:	0e 94 82 0b 	call	0x1704	; 0x1704 <GPIO_writePin>
    23b2:	80 e0       	ldi	r24, 0x00	; 0
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	a0 e8       	ldi	r26, 0x80	; 128
    23b8:	bf e3       	ldi	r27, 0x3F	; 63
    23ba:	8b 87       	std	Y+11, r24	; 0x0b
    23bc:	9c 87       	std	Y+12, r25	; 0x0c
    23be:	ad 87       	std	Y+13, r26	; 0x0d
    23c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    23c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    23c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    23c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    23ca:	20 e0       	ldi	r18, 0x00	; 0
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	4a ef       	ldi	r20, 0xFA	; 250
    23d0:	54 e4       	ldi	r21, 0x44	; 68
    23d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d6:	dc 01       	movw	r26, r24
    23d8:	cb 01       	movw	r24, r22
    23da:	8f 83       	std	Y+7, r24	; 0x07
    23dc:	98 87       	std	Y+8, r25	; 0x08
    23de:	a9 87       	std	Y+9, r26	; 0x09
    23e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23e2:	6f 81       	ldd	r22, Y+7	; 0x07
    23e4:	78 85       	ldd	r23, Y+8	; 0x08
    23e6:	89 85       	ldd	r24, Y+9	; 0x09
    23e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ea:	20 e0       	ldi	r18, 0x00	; 0
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	40 e8       	ldi	r20, 0x80	; 128
    23f0:	5f e3       	ldi	r21, 0x3F	; 63
    23f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23f6:	88 23       	and	r24, r24
    23f8:	2c f4       	brge	.+10     	; 0x2404 <LCD_DisplayChar+0x33a>
		__ticks = 1;
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	9e 83       	std	Y+6, r25	; 0x06
    2400:	8d 83       	std	Y+5, r24	; 0x05
    2402:	3f c0       	rjmp	.+126    	; 0x2482 <LCD_DisplayChar+0x3b8>
	else if (__tmp > 65535)
    2404:	6f 81       	ldd	r22, Y+7	; 0x07
    2406:	78 85       	ldd	r23, Y+8	; 0x08
    2408:	89 85       	ldd	r24, Y+9	; 0x09
    240a:	9a 85       	ldd	r25, Y+10	; 0x0a
    240c:	20 e0       	ldi	r18, 0x00	; 0
    240e:	3f ef       	ldi	r19, 0xFF	; 255
    2410:	4f e7       	ldi	r20, 0x7F	; 127
    2412:	57 e4       	ldi	r21, 0x47	; 71
    2414:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2418:	18 16       	cp	r1, r24
    241a:	4c f5       	brge	.+82     	; 0x246e <LCD_DisplayChar+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    241c:	6b 85       	ldd	r22, Y+11	; 0x0b
    241e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2420:	8d 85       	ldd	r24, Y+13	; 0x0d
    2422:	9e 85       	ldd	r25, Y+14	; 0x0e
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	40 e2       	ldi	r20, 0x20	; 32
    242a:	51 e4       	ldi	r21, 0x41	; 65
    242c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2430:	dc 01       	movw	r26, r24
    2432:	cb 01       	movw	r24, r22
    2434:	bc 01       	movw	r22, r24
    2436:	cd 01       	movw	r24, r26
    2438:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    243c:	dc 01       	movw	r26, r24
    243e:	cb 01       	movw	r24, r22
    2440:	9e 83       	std	Y+6, r25	; 0x06
    2442:	8d 83       	std	Y+5, r24	; 0x05
    2444:	0f c0       	rjmp	.+30     	; 0x2464 <LCD_DisplayChar+0x39a>
    2446:	88 ec       	ldi	r24, 0xC8	; 200
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	9c 83       	std	Y+4, r25	; 0x04
    244c:	8b 83       	std	Y+3, r24	; 0x03
    244e:	8b 81       	ldd	r24, Y+3	; 0x03
    2450:	9c 81       	ldd	r25, Y+4	; 0x04
    2452:	01 97       	sbiw	r24, 0x01	; 1
    2454:	f1 f7       	brne	.-4      	; 0x2452 <LCD_DisplayChar+0x388>
    2456:	9c 83       	std	Y+4, r25	; 0x04
    2458:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    245a:	8d 81       	ldd	r24, Y+5	; 0x05
    245c:	9e 81       	ldd	r25, Y+6	; 0x06
    245e:	01 97       	sbiw	r24, 0x01	; 1
    2460:	9e 83       	std	Y+6, r25	; 0x06
    2462:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2464:	8d 81       	ldd	r24, Y+5	; 0x05
    2466:	9e 81       	ldd	r25, Y+6	; 0x06
    2468:	00 97       	sbiw	r24, 0x00	; 0
    246a:	69 f7       	brne	.-38     	; 0x2446 <LCD_DisplayChar+0x37c>
    246c:	14 c0       	rjmp	.+40     	; 0x2496 <LCD_DisplayChar+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    246e:	6f 81       	ldd	r22, Y+7	; 0x07
    2470:	78 85       	ldd	r23, Y+8	; 0x08
    2472:	89 85       	ldd	r24, Y+9	; 0x09
    2474:	9a 85       	ldd	r25, Y+10	; 0x0a
    2476:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    247a:	dc 01       	movw	r26, r24
    247c:	cb 01       	movw	r24, r22
    247e:	9e 83       	std	Y+6, r25	; 0x06
    2480:	8d 83       	std	Y+5, r24	; 0x05
    2482:	8d 81       	ldd	r24, Y+5	; 0x05
    2484:	9e 81       	ldd	r25, Y+6	; 0x06
    2486:	9a 83       	std	Y+2, r25	; 0x02
    2488:	89 83       	std	Y+1, r24	; 0x01
    248a:	89 81       	ldd	r24, Y+1	; 0x01
    248c:	9a 81       	ldd	r25, Y+2	; 0x02
    248e:	01 97       	sbiw	r24, 0x01	; 1
    2490:	f1 f7       	brne	.-4      	; 0x248e <LCD_DisplayChar+0x3c4>
    2492:	9a 83       	std	Y+2, r25	; 0x02
    2494:	89 83       	std	Y+1, r24	; 0x01

	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /*E=0*/
	_delay_ms(1);

#endif
}
    2496:	e9 96       	adiw	r28, 0x39	; 57
    2498:	0f b6       	in	r0, 0x3f	; 63
    249a:	f8 94       	cli
    249c:	de bf       	out	0x3e, r29	; 62
    249e:	0f be       	out	0x3f, r0	; 63
    24a0:	cd bf       	out	0x3d, r28	; 61
    24a2:	cf 91       	pop	r28
    24a4:	df 91       	pop	r29
    24a6:	08 95       	ret

000024a8 <LCD_DisplayString>:

/*DISPLAY*/

void LCD_DisplayString(const char *Str)
{
    24a8:	df 93       	push	r29
    24aa:	cf 93       	push	r28
    24ac:	00 d0       	rcall	.+0      	; 0x24ae <LCD_DisplayString+0x6>
    24ae:	0f 92       	push	r0
    24b0:	cd b7       	in	r28, 0x3d	; 61
    24b2:	de b7       	in	r29, 0x3e	; 62
    24b4:	9b 83       	std	Y+3, r25	; 0x03
    24b6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    24b8:	19 82       	std	Y+1, r1	; 0x01
    24ba:	0e c0       	rjmp	.+28     	; 0x24d8 <LCD_DisplayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_DisplayChar(Str[i]);
    24bc:	89 81       	ldd	r24, Y+1	; 0x01
    24be:	28 2f       	mov	r18, r24
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	8a 81       	ldd	r24, Y+2	; 0x02
    24c4:	9b 81       	ldd	r25, Y+3	; 0x03
    24c6:	fc 01       	movw	r30, r24
    24c8:	e2 0f       	add	r30, r18
    24ca:	f3 1f       	adc	r31, r19
    24cc:	80 81       	ld	r24, Z
    24ce:	0e 94 65 10 	call	0x20ca	; 0x20ca <LCD_DisplayChar>
		i++;
    24d2:	89 81       	ldd	r24, Y+1	; 0x01
    24d4:	8f 5f       	subi	r24, 0xFF	; 255
    24d6:	89 83       	std	Y+1, r24	; 0x01
/*DISPLAY*/

void LCD_DisplayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    24d8:	89 81       	ldd	r24, Y+1	; 0x01
    24da:	28 2f       	mov	r18, r24
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	8a 81       	ldd	r24, Y+2	; 0x02
    24e0:	9b 81       	ldd	r25, Y+3	; 0x03
    24e2:	fc 01       	movw	r30, r24
    24e4:	e2 0f       	add	r30, r18
    24e6:	f3 1f       	adc	r31, r19
    24e8:	80 81       	ld	r24, Z
    24ea:	88 23       	and	r24, r24
    24ec:	39 f7       	brne	.-50     	; 0x24bc <LCD_DisplayString+0x14>
	{
		LCD_DisplayChar(Str[i]);
		i++;
	}
}
    24ee:	0f 90       	pop	r0
    24f0:	0f 90       	pop	r0
    24f2:	0f 90       	pop	r0
    24f4:	cf 91       	pop	r28
    24f6:	df 91       	pop	r29
    24f8:	08 95       	ret

000024fa <LCD_moveCursor>:

/*WRITE IN IN SPECIFIC ROW*/

void LCD_moveCursor(uint8 row,uint8 col)
{
    24fa:	df 93       	push	r29
    24fc:	cf 93       	push	r28
    24fe:	00 d0       	rcall	.+0      	; 0x2500 <LCD_moveCursor+0x6>
    2500:	00 d0       	rcall	.+0      	; 0x2502 <LCD_moveCursor+0x8>
    2502:	0f 92       	push	r0
    2504:	cd b7       	in	r28, 0x3d	; 61
    2506:	de b7       	in	r29, 0x3e	; 62
    2508:	8a 83       	std	Y+2, r24	; 0x02
    250a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	switch(row)
    250c:	8a 81       	ldd	r24, Y+2	; 0x02
    250e:	28 2f       	mov	r18, r24
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	3d 83       	std	Y+5, r19	; 0x05
    2514:	2c 83       	std	Y+4, r18	; 0x04
    2516:	8c 81       	ldd	r24, Y+4	; 0x04
    2518:	9d 81       	ldd	r25, Y+5	; 0x05
    251a:	81 30       	cpi	r24, 0x01	; 1
    251c:	91 05       	cpc	r25, r1
    251e:	c1 f0       	breq	.+48     	; 0x2550 <LCD_moveCursor+0x56>
    2520:	2c 81       	ldd	r18, Y+4	; 0x04
    2522:	3d 81       	ldd	r19, Y+5	; 0x05
    2524:	22 30       	cpi	r18, 0x02	; 2
    2526:	31 05       	cpc	r19, r1
    2528:	2c f4       	brge	.+10     	; 0x2534 <LCD_moveCursor+0x3a>
    252a:	8c 81       	ldd	r24, Y+4	; 0x04
    252c:	9d 81       	ldd	r25, Y+5	; 0x05
    252e:	00 97       	sbiw	r24, 0x00	; 0
    2530:	61 f0       	breq	.+24     	; 0x254a <LCD_moveCursor+0x50>
    2532:	19 c0       	rjmp	.+50     	; 0x2566 <LCD_moveCursor+0x6c>
    2534:	2c 81       	ldd	r18, Y+4	; 0x04
    2536:	3d 81       	ldd	r19, Y+5	; 0x05
    2538:	22 30       	cpi	r18, 0x02	; 2
    253a:	31 05       	cpc	r19, r1
    253c:	69 f0       	breq	.+26     	; 0x2558 <LCD_moveCursor+0x5e>
    253e:	8c 81       	ldd	r24, Y+4	; 0x04
    2540:	9d 81       	ldd	r25, Y+5	; 0x05
    2542:	83 30       	cpi	r24, 0x03	; 3
    2544:	91 05       	cpc	r25, r1
    2546:	61 f0       	breq	.+24     	; 0x2560 <LCD_moveCursor+0x66>
    2548:	0e c0       	rjmp	.+28     	; 0x2566 <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address = col;
    254a:	8b 81       	ldd	r24, Y+3	; 0x03
    254c:	89 83       	std	Y+1, r24	; 0x01
    254e:	0b c0       	rjmp	.+22     	; 0x2566 <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address = col+0x40;
    2550:	8b 81       	ldd	r24, Y+3	; 0x03
    2552:	80 5c       	subi	r24, 0xC0	; 192
    2554:	89 83       	std	Y+1, r24	; 0x01
    2556:	07 c0       	rjmp	.+14     	; 0x2566 <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address = col+0x10;
    2558:	8b 81       	ldd	r24, Y+3	; 0x03
    255a:	80 5f       	subi	r24, 0xF0	; 240
    255c:	89 83       	std	Y+1, r24	; 0x01
    255e:	03 c0       	rjmp	.+6      	; 0x2566 <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address = col+0x50;
    2560:	8b 81       	ldd	r24, Y+3	; 0x03
    2562:	80 5b       	subi	r24, 0xB0	; 176
    2564:	89 83       	std	Y+1, r24	; 0x01
		break;

	}
	LCD_SendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2566:	89 81       	ldd	r24, Y+1	; 0x01
    2568:	80 68       	ori	r24, 0x80	; 128
    256a:	0e 94 76 0e 	call	0x1cec	; 0x1cec <LCD_SendCommand>
}
    256e:	0f 90       	pop	r0
    2570:	0f 90       	pop	r0
    2572:	0f 90       	pop	r0
    2574:	0f 90       	pop	r0
    2576:	0f 90       	pop	r0
    2578:	cf 91       	pop	r28
    257a:	df 91       	pop	r29
    257c:	08 95       	ret

0000257e <LCD_displayStringRowColumn>:

/*DISPLAY IN SPECIFIC ROW*/

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    257e:	df 93       	push	r29
    2580:	cf 93       	push	r28
    2582:	00 d0       	rcall	.+0      	; 0x2584 <LCD_displayStringRowColumn+0x6>
    2584:	00 d0       	rcall	.+0      	; 0x2586 <LCD_displayStringRowColumn+0x8>
    2586:	cd b7       	in	r28, 0x3d	; 61
    2588:	de b7       	in	r29, 0x3e	; 62
    258a:	89 83       	std	Y+1, r24	; 0x01
    258c:	6a 83       	std	Y+2, r22	; 0x02
    258e:	5c 83       	std	Y+4, r21	; 0x04
    2590:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col);
    2592:	89 81       	ldd	r24, Y+1	; 0x01
    2594:	6a 81       	ldd	r22, Y+2	; 0x02
    2596:	0e 94 7d 12 	call	0x24fa	; 0x24fa <LCD_moveCursor>
	LCD_DisplayString(Str);
    259a:	8b 81       	ldd	r24, Y+3	; 0x03
    259c:	9c 81       	ldd	r25, Y+4	; 0x04
    259e:	0e 94 54 12 	call	0x24a8	; 0x24a8 <LCD_DisplayString>
}
    25a2:	0f 90       	pop	r0
    25a4:	0f 90       	pop	r0
    25a6:	0f 90       	pop	r0
    25a8:	0f 90       	pop	r0
    25aa:	cf 91       	pop	r28
    25ac:	df 91       	pop	r29
    25ae:	08 95       	ret

000025b0 <LCD_intgerToString>:

/*NUMBERS*/

void LCD_intgerToString(int data)
{
    25b0:	df 93       	push	r29
    25b2:	cf 93       	push	r28
    25b4:	cd b7       	in	r28, 0x3d	; 61
    25b6:	de b7       	in	r29, 0x3e	; 62
    25b8:	62 97       	sbiw	r28, 0x12	; 18
    25ba:	0f b6       	in	r0, 0x3f	; 63
    25bc:	f8 94       	cli
    25be:	de bf       	out	0x3e, r29	; 62
    25c0:	0f be       	out	0x3f, r0	; 63
    25c2:	cd bf       	out	0x3d, r28	; 61
    25c4:	9a 8b       	std	Y+18, r25	; 0x12
    25c6:	89 8b       	std	Y+17, r24	; 0x11
	char str[16];
	itoa(data,str,10); /* 10 for decimal */
    25c8:	89 89       	ldd	r24, Y+17	; 0x11
    25ca:	9a 89       	ldd	r25, Y+18	; 0x12
    25cc:	9e 01       	movw	r18, r28
    25ce:	2f 5f       	subi	r18, 0xFF	; 255
    25d0:	3f 4f       	sbci	r19, 0xFF	; 255
    25d2:	b9 01       	movw	r22, r18
    25d4:	4a e0       	ldi	r20, 0x0A	; 10
    25d6:	50 e0       	ldi	r21, 0x00	; 0
    25d8:	0e 94 65 1c 	call	0x38ca	; 0x38ca <itoa>
	LCD_DisplayString(str);
    25dc:	ce 01       	movw	r24, r28
    25de:	01 96       	adiw	r24, 0x01	; 1
    25e0:	0e 94 54 12 	call	0x24a8	; 0x24a8 <LCD_DisplayString>
}
    25e4:	62 96       	adiw	r28, 0x12	; 18
    25e6:	0f b6       	in	r0, 0x3f	; 63
    25e8:	f8 94       	cli
    25ea:	de bf       	out	0x3e, r29	; 62
    25ec:	0f be       	out	0x3f, r0	; 63
    25ee:	cd bf       	out	0x3d, r28	; 61
    25f0:	cf 91       	pop	r28
    25f2:	df 91       	pop	r29
    25f4:	08 95       	ret

000025f6 <LCD_clearScreen>:

/*CLEAR*/

void LCD_clearScreen(void)
{
    25f6:	df 93       	push	r29
    25f8:	cf 93       	push	r28
    25fa:	cd b7       	in	r28, 0x3d	; 61
    25fc:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCommand(LCD_CLEAR_COMMAND); /* CLEAR COMMAND */
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	0e 94 76 0e 	call	0x1cec	; 0x1cec <LCD_SendCommand>
}
    2604:	cf 91       	pop	r28
    2606:	df 91       	pop	r29
    2608:	08 95       	ret

0000260a <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    260a:	df 93       	push	r29
    260c:	cf 93       	push	r28
    260e:	00 d0       	rcall	.+0      	; 0x2610 <KEYPAD_getPressedKey+0x6>
    2610:	0f 92       	push	r0
    2612:	cd b7       	in	r28, 0x3d	; 61
    2614:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    2616:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2618:	1b 82       	std	Y+3, r1	; 0x03
    261a:	43 c0       	rjmp	.+134    	; 0x26a2 <KEYPAD_getPressedKey+0x98>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    261c:	80 e0       	ldi	r24, 0x00	; 0
    261e:	60 e0       	ldi	r22, 0x00	; 0
    2620:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    2624:	8b 81       	ldd	r24, Y+3	; 0x03
    2626:	98 2f       	mov	r25, r24
    2628:	9c 5f       	subi	r25, 0xFC	; 252
    262a:	80 e0       	ldi	r24, 0x00	; 0
    262c:	69 2f       	mov	r22, r25
    262e:	41 e0       	ldi	r20, 0x01	; 1
    2630:	0e 94 97 0a 	call	0x152e	; 0x152e <GPIO_setupPinDirection>

#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    2634:	8b 81       	ldd	r24, Y+3	; 0x03
    2636:	88 2f       	mov	r24, r24
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	9c 01       	movw	r18, r24
    263c:	2c 5f       	subi	r18, 0xFC	; 252
    263e:	3f 4f       	sbci	r19, 0xFF	; 255
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	02 c0       	rjmp	.+4      	; 0x264a <KEYPAD_getPressedKey+0x40>
    2646:	88 0f       	add	r24, r24
    2648:	99 1f       	adc	r25, r25
    264a:	2a 95       	dec	r18
    264c:	e2 f7       	brpl	.-8      	; 0x2646 <KEYPAD_getPressedKey+0x3c>
    264e:	80 95       	com	r24
    2650:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    2652:	80 e0       	ldi	r24, 0x00	; 0
    2654:	69 81       	ldd	r22, Y+1	; 0x01
    2656:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    265a:	1a 82       	std	Y+2, r1	; 0x02
    265c:	1c c0       	rjmp	.+56     	; 0x2696 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    265e:	80 e0       	ldi	r24, 0x00	; 0
    2660:	6a 81       	ldd	r22, Y+2	; 0x02
    2662:	0e 94 6d 0c 	call	0x18da	; 0x18da <GPIO_readPin>
    2666:	88 23       	and	r24, r24
    2668:	99 f4       	brne	.+38     	; 0x2690 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    266a:	8a 81       	ldd	r24, Y+2	; 0x02
    266c:	88 2f       	mov	r24, r24
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	88 0f       	add	r24, r24
    2672:	99 1f       	adc	r25, r25
    2674:	88 0f       	add	r24, r24
    2676:	99 1f       	adc	r25, r25
    2678:	98 2f       	mov	r25, r24
    267a:	8b 81       	ldd	r24, Y+3	; 0x03
    267c:	89 0f       	add	r24, r25
    267e:	8f 5f       	subi	r24, 0xFF	; 255
    2680:	0e 94 56 13 	call	0x26ac	; 0x26ac <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}
}
    2684:	0f 90       	pop	r0
    2686:	0f 90       	pop	r0
    2688:	0f 90       	pop	r0
    268a:	cf 91       	pop	r28
    268c:	df 91       	pop	r29
    268e:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    2690:	8a 81       	ldd	r24, Y+2	; 0x02
    2692:	8f 5f       	subi	r24, 0xFF	; 255
    2694:	8a 83       	std	Y+2, r24	; 0x02
    2696:	8a 81       	ldd	r24, Y+2	; 0x02
    2698:	84 30       	cpi	r24, 0x04	; 4
    269a:	08 f3       	brcs	.-62     	; 0x265e <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    269c:	8b 81       	ldd	r24, Y+3	; 0x03
    269e:	8f 5f       	subi	r24, 0xFF	; 255
    26a0:	8b 83       	std	Y+3, r24	; 0x03
    26a2:	8b 81       	ldd	r24, Y+3	; 0x03
    26a4:	84 30       	cpi	r24, 0x04	; 4
    26a6:	08 f4       	brcc	.+2      	; 0x26aa <KEYPAD_getPressedKey+0xa0>
    26a8:	b9 cf       	rjmp	.-142    	; 0x261c <KEYPAD_getPressedKey+0x12>
    26aa:	b6 cf       	rjmp	.-148    	; 0x2618 <KEYPAD_getPressedKey+0xe>

000026ac <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    26ac:	df 93       	push	r29
    26ae:	cf 93       	push	r28
    26b0:	00 d0       	rcall	.+0      	; 0x26b2 <KEYPAD_4x4_adjustKeyNumber+0x6>
    26b2:	00 d0       	rcall	.+0      	; 0x26b4 <KEYPAD_4x4_adjustKeyNumber+0x8>
    26b4:	cd b7       	in	r28, 0x3d	; 61
    26b6:	de b7       	in	r29, 0x3e	; 62
    26b8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    26ba:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    26bc:	8a 81       	ldd	r24, Y+2	; 0x02
    26be:	28 2f       	mov	r18, r24
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	3c 83       	std	Y+4, r19	; 0x04
    26c4:	2b 83       	std	Y+3, r18	; 0x03
    26c6:	8b 81       	ldd	r24, Y+3	; 0x03
    26c8:	9c 81       	ldd	r25, Y+4	; 0x04
    26ca:	88 30       	cpi	r24, 0x08	; 8
    26cc:	91 05       	cpc	r25, r1
    26ce:	09 f4       	brne	.+2      	; 0x26d2 <KEYPAD_4x4_adjustKeyNumber+0x26>
    26d0:	70 c0       	rjmp	.+224    	; 0x27b2 <KEYPAD_4x4_adjustKeyNumber+0x106>
    26d2:	2b 81       	ldd	r18, Y+3	; 0x03
    26d4:	3c 81       	ldd	r19, Y+4	; 0x04
    26d6:	29 30       	cpi	r18, 0x09	; 9
    26d8:	31 05       	cpc	r19, r1
    26da:	5c f5       	brge	.+86     	; 0x2732 <KEYPAD_4x4_adjustKeyNumber+0x86>
    26dc:	8b 81       	ldd	r24, Y+3	; 0x03
    26de:	9c 81       	ldd	r25, Y+4	; 0x04
    26e0:	84 30       	cpi	r24, 0x04	; 4
    26e2:	91 05       	cpc	r25, r1
    26e4:	09 f4       	brne	.+2      	; 0x26e8 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    26e6:	59 c0       	rjmp	.+178    	; 0x279a <KEYPAD_4x4_adjustKeyNumber+0xee>
    26e8:	2b 81       	ldd	r18, Y+3	; 0x03
    26ea:	3c 81       	ldd	r19, Y+4	; 0x04
    26ec:	25 30       	cpi	r18, 0x05	; 5
    26ee:	31 05       	cpc	r19, r1
    26f0:	9c f4       	brge	.+38     	; 0x2718 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    26f2:	8b 81       	ldd	r24, Y+3	; 0x03
    26f4:	9c 81       	ldd	r25, Y+4	; 0x04
    26f6:	82 30       	cpi	r24, 0x02	; 2
    26f8:	91 05       	cpc	r25, r1
    26fa:	09 f4       	brne	.+2      	; 0x26fe <KEYPAD_4x4_adjustKeyNumber+0x52>
    26fc:	48 c0       	rjmp	.+144    	; 0x278e <KEYPAD_4x4_adjustKeyNumber+0xe2>
    26fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2700:	3c 81       	ldd	r19, Y+4	; 0x04
    2702:	23 30       	cpi	r18, 0x03	; 3
    2704:	31 05       	cpc	r19, r1
    2706:	0c f0       	brlt	.+2      	; 0x270a <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2708:	45 c0       	rjmp	.+138    	; 0x2794 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    270a:	8b 81       	ldd	r24, Y+3	; 0x03
    270c:	9c 81       	ldd	r25, Y+4	; 0x04
    270e:	81 30       	cpi	r24, 0x01	; 1
    2710:	91 05       	cpc	r25, r1
    2712:	09 f4       	brne	.+2      	; 0x2716 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2714:	39 c0       	rjmp	.+114    	; 0x2788 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2716:	67 c0       	rjmp	.+206    	; 0x27e6 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2718:	2b 81       	ldd	r18, Y+3	; 0x03
    271a:	3c 81       	ldd	r19, Y+4	; 0x04
    271c:	26 30       	cpi	r18, 0x06	; 6
    271e:	31 05       	cpc	r19, r1
    2720:	09 f4       	brne	.+2      	; 0x2724 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2722:	41 c0       	rjmp	.+130    	; 0x27a6 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2724:	8b 81       	ldd	r24, Y+3	; 0x03
    2726:	9c 81       	ldd	r25, Y+4	; 0x04
    2728:	87 30       	cpi	r24, 0x07	; 7
    272a:	91 05       	cpc	r25, r1
    272c:	0c f0       	brlt	.+2      	; 0x2730 <KEYPAD_4x4_adjustKeyNumber+0x84>
    272e:	3e c0       	rjmp	.+124    	; 0x27ac <KEYPAD_4x4_adjustKeyNumber+0x100>
    2730:	37 c0       	rjmp	.+110    	; 0x27a0 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2732:	2b 81       	ldd	r18, Y+3	; 0x03
    2734:	3c 81       	ldd	r19, Y+4	; 0x04
    2736:	2c 30       	cpi	r18, 0x0C	; 12
    2738:	31 05       	cpc	r19, r1
    273a:	09 f4       	brne	.+2      	; 0x273e <KEYPAD_4x4_adjustKeyNumber+0x92>
    273c:	46 c0       	rjmp	.+140    	; 0x27ca <KEYPAD_4x4_adjustKeyNumber+0x11e>
    273e:	8b 81       	ldd	r24, Y+3	; 0x03
    2740:	9c 81       	ldd	r25, Y+4	; 0x04
    2742:	8d 30       	cpi	r24, 0x0D	; 13
    2744:	91 05       	cpc	r25, r1
    2746:	5c f4       	brge	.+22     	; 0x275e <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2748:	2b 81       	ldd	r18, Y+3	; 0x03
    274a:	3c 81       	ldd	r19, Y+4	; 0x04
    274c:	2a 30       	cpi	r18, 0x0A	; 10
    274e:	31 05       	cpc	r19, r1
    2750:	b1 f1       	breq	.+108    	; 0x27be <KEYPAD_4x4_adjustKeyNumber+0x112>
    2752:	8b 81       	ldd	r24, Y+3	; 0x03
    2754:	9c 81       	ldd	r25, Y+4	; 0x04
    2756:	8b 30       	cpi	r24, 0x0B	; 11
    2758:	91 05       	cpc	r25, r1
    275a:	a4 f5       	brge	.+104    	; 0x27c4 <KEYPAD_4x4_adjustKeyNumber+0x118>
    275c:	2d c0       	rjmp	.+90     	; 0x27b8 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    275e:	2b 81       	ldd	r18, Y+3	; 0x03
    2760:	3c 81       	ldd	r19, Y+4	; 0x04
    2762:	2e 30       	cpi	r18, 0x0E	; 14
    2764:	31 05       	cpc	r19, r1
    2766:	b9 f1       	breq	.+110    	; 0x27d6 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2768:	8b 81       	ldd	r24, Y+3	; 0x03
    276a:	9c 81       	ldd	r25, Y+4	; 0x04
    276c:	8e 30       	cpi	r24, 0x0E	; 14
    276e:	91 05       	cpc	r25, r1
    2770:	7c f1       	brlt	.+94     	; 0x27d0 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2772:	2b 81       	ldd	r18, Y+3	; 0x03
    2774:	3c 81       	ldd	r19, Y+4	; 0x04
    2776:	2f 30       	cpi	r18, 0x0F	; 15
    2778:	31 05       	cpc	r19, r1
    277a:	79 f1       	breq	.+94     	; 0x27da <KEYPAD_4x4_adjustKeyNumber+0x12e>
    277c:	8b 81       	ldd	r24, Y+3	; 0x03
    277e:	9c 81       	ldd	r25, Y+4	; 0x04
    2780:	80 31       	cpi	r24, 0x10	; 16
    2782:	91 05       	cpc	r25, r1
    2784:	69 f1       	breq	.+90     	; 0x27e0 <KEYPAD_4x4_adjustKeyNumber+0x134>
    2786:	2f c0       	rjmp	.+94     	; 0x27e6 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2788:	87 e0       	ldi	r24, 0x07	; 7
    278a:	89 83       	std	Y+1, r24	; 0x01
    278c:	2e c0       	rjmp	.+92     	; 0x27ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    278e:	88 e0       	ldi	r24, 0x08	; 8
    2790:	89 83       	std	Y+1, r24	; 0x01
    2792:	2b c0       	rjmp	.+86     	; 0x27ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2794:	89 e0       	ldi	r24, 0x09	; 9
    2796:	89 83       	std	Y+1, r24	; 0x01
    2798:	28 c0       	rjmp	.+80     	; 0x27ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    279a:	85 e2       	ldi	r24, 0x25	; 37
    279c:	89 83       	std	Y+1, r24	; 0x01
    279e:	25 c0       	rjmp	.+74     	; 0x27ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    27a0:	84 e0       	ldi	r24, 0x04	; 4
    27a2:	89 83       	std	Y+1, r24	; 0x01
    27a4:	22 c0       	rjmp	.+68     	; 0x27ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    27a6:	85 e0       	ldi	r24, 0x05	; 5
    27a8:	89 83       	std	Y+1, r24	; 0x01
    27aa:	1f c0       	rjmp	.+62     	; 0x27ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    27ac:	86 e0       	ldi	r24, 0x06	; 6
    27ae:	89 83       	std	Y+1, r24	; 0x01
    27b0:	1c c0       	rjmp	.+56     	; 0x27ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    27b2:	8a e2       	ldi	r24, 0x2A	; 42
    27b4:	89 83       	std	Y+1, r24	; 0x01
    27b6:	19 c0       	rjmp	.+50     	; 0x27ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	89 83       	std	Y+1, r24	; 0x01
    27bc:	16 c0       	rjmp	.+44     	; 0x27ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    27be:	82 e0       	ldi	r24, 0x02	; 2
    27c0:	89 83       	std	Y+1, r24	; 0x01
    27c2:	13 c0       	rjmp	.+38     	; 0x27ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    27c4:	83 e0       	ldi	r24, 0x03	; 3
    27c6:	89 83       	std	Y+1, r24	; 0x01
    27c8:	10 c0       	rjmp	.+32     	; 0x27ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    27ca:	8d e2       	ldi	r24, 0x2D	; 45
    27cc:	89 83       	std	Y+1, r24	; 0x01
    27ce:	0d c0       	rjmp	.+26     	; 0x27ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    27d0:	8d e0       	ldi	r24, 0x0D	; 13
    27d2:	89 83       	std	Y+1, r24	; 0x01
    27d4:	0a c0       	rjmp	.+20     	; 0x27ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    27d6:	19 82       	std	Y+1, r1	; 0x01
    27d8:	08 c0       	rjmp	.+16     	; 0x27ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    27da:	8d e3       	ldi	r24, 0x3D	; 61
    27dc:	89 83       	std	Y+1, r24	; 0x01
    27de:	05 c0       	rjmp	.+10     	; 0x27ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    27e0:	8b e2       	ldi	r24, 0x2B	; 43
    27e2:	89 83       	std	Y+1, r24	; 0x01
    27e4:	02 c0       	rjmp	.+4      	; 0x27ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    27e6:	8a 81       	ldd	r24, Y+2	; 0x02
    27e8:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    27ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    27ec:	0f 90       	pop	r0
    27ee:	0f 90       	pop	r0
    27f0:	0f 90       	pop	r0
    27f2:	0f 90       	pop	r0
    27f4:	cf 91       	pop	r28
    27f6:	df 91       	pop	r29
    27f8:	08 95       	ret

000027fa <init>:

#include "himi.h"

uint8 Pass[SIZE],PassConfirm[SIZE],PassPrev[SIZE],check = 0,Buzzer_Flag=0;

void init(void) {
    27fa:	df 93       	push	r29
    27fc:	cf 93       	push	r28
    27fe:	cd b7       	in	r28, 0x3d	; 61
    2800:	de b7       	in	r29, 0x3e	; 62
    2802:	68 97       	sbiw	r28, 0x18	; 24
    2804:	0f b6       	in	r0, 0x3f	; 63
    2806:	f8 94       	cli
    2808:	de bf       	out	0x3e, r29	; 62
    280a:	0f be       	out	0x3f, r0	; 63
    280c:	cd bf       	out	0x3d, r28	; 61

	LCD_init();
    280e:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <LCD_init>
	UART_Config config = { DISABLED, ONE, EIGHT, 9600 };
    2812:	ce 01       	movw	r24, r28
    2814:	01 96       	adiw	r24, 0x01	; 1
    2816:	98 8b       	std	Y+16, r25	; 0x10
    2818:	8f 87       	std	Y+15, r24	; 0x0f
    281a:	ed ec       	ldi	r30, 0xCD	; 205
    281c:	f1 e0       	ldi	r31, 0x01	; 1
    281e:	fa 8b       	std	Y+18, r31	; 0x12
    2820:	e9 8b       	std	Y+17, r30	; 0x11
    2822:	f7 e0       	ldi	r31, 0x07	; 7
    2824:	fb 8b       	std	Y+19, r31	; 0x13
    2826:	e9 89       	ldd	r30, Y+17	; 0x11
    2828:	fa 89       	ldd	r31, Y+18	; 0x12
    282a:	00 80       	ld	r0, Z
    282c:	89 89       	ldd	r24, Y+17	; 0x11
    282e:	9a 89       	ldd	r25, Y+18	; 0x12
    2830:	01 96       	adiw	r24, 0x01	; 1
    2832:	9a 8b       	std	Y+18, r25	; 0x12
    2834:	89 8b       	std	Y+17, r24	; 0x11
    2836:	ef 85       	ldd	r30, Y+15	; 0x0f
    2838:	f8 89       	ldd	r31, Y+16	; 0x10
    283a:	00 82       	st	Z, r0
    283c:	8f 85       	ldd	r24, Y+15	; 0x0f
    283e:	98 89       	ldd	r25, Y+16	; 0x10
    2840:	01 96       	adiw	r24, 0x01	; 1
    2842:	98 8b       	std	Y+16, r25	; 0x10
    2844:	8f 87       	std	Y+15, r24	; 0x0f
    2846:	9b 89       	ldd	r25, Y+19	; 0x13
    2848:	91 50       	subi	r25, 0x01	; 1
    284a:	9b 8b       	std	Y+19, r25	; 0x13
    284c:	eb 89       	ldd	r30, Y+19	; 0x13
    284e:	ee 23       	and	r30, r30
    2850:	51 f7       	brne	.-44     	; 0x2826 <init+0x2c>
	UART_init(&config);
    2852:	ce 01       	movw	r24, r28
    2854:	01 96       	adiw	r24, 0x01	; 1
    2856:	0e 94 17 07 	call	0xe2e	; 0xe2e <UART_init>
	TIMER_ConfigType TIMERconfg = { TIMER_OVF,TIMER0,PRESCALAR_CLK64,0,0};
    285a:	ce 01       	movw	r24, r28
    285c:	08 96       	adiw	r24, 0x08	; 8
    285e:	9d 8b       	std	Y+21, r25	; 0x15
    2860:	8c 8b       	std	Y+20, r24	; 0x14
    2862:	e6 ec       	ldi	r30, 0xC6	; 198
    2864:	f1 e0       	ldi	r31, 0x01	; 1
    2866:	ff 8b       	std	Y+23, r31	; 0x17
    2868:	ee 8b       	std	Y+22, r30	; 0x16
    286a:	f7 e0       	ldi	r31, 0x07	; 7
    286c:	f8 8f       	std	Y+24, r31	; 0x18
    286e:	ee 89       	ldd	r30, Y+22	; 0x16
    2870:	ff 89       	ldd	r31, Y+23	; 0x17
    2872:	00 80       	ld	r0, Z
    2874:	8e 89       	ldd	r24, Y+22	; 0x16
    2876:	9f 89       	ldd	r25, Y+23	; 0x17
    2878:	01 96       	adiw	r24, 0x01	; 1
    287a:	9f 8b       	std	Y+23, r25	; 0x17
    287c:	8e 8b       	std	Y+22, r24	; 0x16
    287e:	ec 89       	ldd	r30, Y+20	; 0x14
    2880:	fd 89       	ldd	r31, Y+21	; 0x15
    2882:	00 82       	st	Z, r0
    2884:	8c 89       	ldd	r24, Y+20	; 0x14
    2886:	9d 89       	ldd	r25, Y+21	; 0x15
    2888:	01 96       	adiw	r24, 0x01	; 1
    288a:	9d 8b       	std	Y+21, r25	; 0x15
    288c:	8c 8b       	std	Y+20, r24	; 0x14
    288e:	98 8d       	ldd	r25, Y+24	; 0x18
    2890:	91 50       	subi	r25, 0x01	; 1
    2892:	98 8f       	std	Y+24, r25	; 0x18
    2894:	e8 8d       	ldd	r30, Y+24	; 0x18
    2896:	ee 23       	and	r30, r30
    2898:	51 f7       	brne	.-44     	; 0x286e <init+0x74>
	Timer_init(&TIMERconfg);
    289a:	ce 01       	movw	r24, r28
    289c:	08 96       	adiw	r24, 0x08	; 8
    289e:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <Timer_init>
}
    28a2:	68 96       	adiw	r28, 0x18	; 24
    28a4:	0f b6       	in	r0, 0x3f	; 63
    28a6:	f8 94       	cli
    28a8:	de bf       	out	0x3e, r29	; 62
    28aa:	0f be       	out	0x3f, r0	; 63
    28ac:	cd bf       	out	0x3d, r28	; 61
    28ae:	cf 91       	pop	r28
    28b0:	df 91       	pop	r29
    28b2:	08 95       	ret

000028b4 <Enter_Pass>:
void Enter_Pass(void) {
    28b4:	0f 93       	push	r16
    28b6:	1f 93       	push	r17
    28b8:	df 93       	push	r29
    28ba:	cf 93       	push	r28
    28bc:	cd b7       	in	r28, 0x3d	; 61
    28be:	de b7       	in	r29, 0x3e	; 62
    28c0:	e9 97       	sbiw	r28, 0x39	; 57
    28c2:	0f b6       	in	r0, 0x3f	; 63
    28c4:	f8 94       	cli
    28c6:	de bf       	out	0x3e, r29	; 62
    28c8:	0f be       	out	0x3f, r0	; 63
    28ca:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	while (1) {

		LCD_displayStringRowColumn(0, 0, "Enter Password");
    28cc:	20 e6       	ldi	r18, 0x60	; 96
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	80 e0       	ldi	r24, 0x00	; 0
    28d2:	60 e0       	ldi	r22, 0x00	; 0
    28d4:	a9 01       	movw	r20, r18
    28d6:	0e 94 bf 12 	call	0x257e	; 0x257e <LCD_displayStringRowColumn>
		LCD_moveCursor(1, 0);
    28da:	81 e0       	ldi	r24, 0x01	; 1
    28dc:	60 e0       	ldi	r22, 0x00	; 0
    28de:	0e 94 7d 12 	call	0x24fa	; 0x24fa <LCD_moveCursor>
		for (i = 0; i < SIZE; i++) {
    28e2:	19 ae       	std	Y+57, r1	; 0x39
    28e4:	81 c0       	rjmp	.+258    	; 0x29e8 <Enter_Pass+0x134>
			Pass[i] = KEYPAD_getPressedKey();
    28e6:	89 ad       	ldd	r24, Y+57	; 0x39
    28e8:	08 2f       	mov	r16, r24
    28ea:	10 e0       	ldi	r17, 0x00	; 0
    28ec:	0e 94 05 13 	call	0x260a	; 0x260a <KEYPAD_getPressedKey>
    28f0:	f8 01       	movw	r30, r16
    28f2:	e2 52       	subi	r30, 0x22	; 34
    28f4:	fe 4f       	sbci	r31, 0xFE	; 254
    28f6:	80 83       	st	Z, r24
			LCD_DisplayChar('*');
    28f8:	8a e2       	ldi	r24, 0x2A	; 42
    28fa:	0e 94 65 10 	call	0x20ca	; 0x20ca <LCD_DisplayChar>
    28fe:	80 e0       	ldi	r24, 0x00	; 0
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	a8 ec       	ldi	r26, 0xC8	; 200
    2904:	b3 e4       	ldi	r27, 0x43	; 67
    2906:	8d ab       	std	Y+53, r24	; 0x35
    2908:	9e ab       	std	Y+54, r25	; 0x36
    290a:	af ab       	std	Y+55, r26	; 0x37
    290c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    290e:	6d a9       	ldd	r22, Y+53	; 0x35
    2910:	7e a9       	ldd	r23, Y+54	; 0x36
    2912:	8f a9       	ldd	r24, Y+55	; 0x37
    2914:	98 ad       	ldd	r25, Y+56	; 0x38
    2916:	20 e0       	ldi	r18, 0x00	; 0
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	4a ef       	ldi	r20, 0xFA	; 250
    291c:	54 e4       	ldi	r21, 0x44	; 68
    291e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2922:	dc 01       	movw	r26, r24
    2924:	cb 01       	movw	r24, r22
    2926:	89 ab       	std	Y+49, r24	; 0x31
    2928:	9a ab       	std	Y+50, r25	; 0x32
    292a:	ab ab       	std	Y+51, r26	; 0x33
    292c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    292e:	69 a9       	ldd	r22, Y+49	; 0x31
    2930:	7a a9       	ldd	r23, Y+50	; 0x32
    2932:	8b a9       	ldd	r24, Y+51	; 0x33
    2934:	9c a9       	ldd	r25, Y+52	; 0x34
    2936:	20 e0       	ldi	r18, 0x00	; 0
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	40 e8       	ldi	r20, 0x80	; 128
    293c:	5f e3       	ldi	r21, 0x3F	; 63
    293e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2942:	88 23       	and	r24, r24
    2944:	2c f4       	brge	.+10     	; 0x2950 <Enter_Pass+0x9c>
		__ticks = 1;
    2946:	81 e0       	ldi	r24, 0x01	; 1
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	98 ab       	std	Y+48, r25	; 0x30
    294c:	8f a7       	std	Y+47, r24	; 0x2f
    294e:	3f c0       	rjmp	.+126    	; 0x29ce <Enter_Pass+0x11a>
	else if (__tmp > 65535)
    2950:	69 a9       	ldd	r22, Y+49	; 0x31
    2952:	7a a9       	ldd	r23, Y+50	; 0x32
    2954:	8b a9       	ldd	r24, Y+51	; 0x33
    2956:	9c a9       	ldd	r25, Y+52	; 0x34
    2958:	20 e0       	ldi	r18, 0x00	; 0
    295a:	3f ef       	ldi	r19, 0xFF	; 255
    295c:	4f e7       	ldi	r20, 0x7F	; 127
    295e:	57 e4       	ldi	r21, 0x47	; 71
    2960:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2964:	18 16       	cp	r1, r24
    2966:	4c f5       	brge	.+82     	; 0x29ba <Enter_Pass+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2968:	6d a9       	ldd	r22, Y+53	; 0x35
    296a:	7e a9       	ldd	r23, Y+54	; 0x36
    296c:	8f a9       	ldd	r24, Y+55	; 0x37
    296e:	98 ad       	ldd	r25, Y+56	; 0x38
    2970:	20 e0       	ldi	r18, 0x00	; 0
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	40 e2       	ldi	r20, 0x20	; 32
    2976:	51 e4       	ldi	r21, 0x41	; 65
    2978:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    297c:	dc 01       	movw	r26, r24
    297e:	cb 01       	movw	r24, r22
    2980:	bc 01       	movw	r22, r24
    2982:	cd 01       	movw	r24, r26
    2984:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	98 ab       	std	Y+48, r25	; 0x30
    298e:	8f a7       	std	Y+47, r24	; 0x2f
    2990:	0f c0       	rjmp	.+30     	; 0x29b0 <Enter_Pass+0xfc>
    2992:	88 ec       	ldi	r24, 0xC8	; 200
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	9e a7       	std	Y+46, r25	; 0x2e
    2998:	8d a7       	std	Y+45, r24	; 0x2d
    299a:	8d a5       	ldd	r24, Y+45	; 0x2d
    299c:	9e a5       	ldd	r25, Y+46	; 0x2e
    299e:	01 97       	sbiw	r24, 0x01	; 1
    29a0:	f1 f7       	brne	.-4      	; 0x299e <Enter_Pass+0xea>
    29a2:	9e a7       	std	Y+46, r25	; 0x2e
    29a4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    29a8:	98 a9       	ldd	r25, Y+48	; 0x30
    29aa:	01 97       	sbiw	r24, 0x01	; 1
    29ac:	98 ab       	std	Y+48, r25	; 0x30
    29ae:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    29b2:	98 a9       	ldd	r25, Y+48	; 0x30
    29b4:	00 97       	sbiw	r24, 0x00	; 0
    29b6:	69 f7       	brne	.-38     	; 0x2992 <Enter_Pass+0xde>
    29b8:	14 c0       	rjmp	.+40     	; 0x29e2 <Enter_Pass+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ba:	69 a9       	ldd	r22, Y+49	; 0x31
    29bc:	7a a9       	ldd	r23, Y+50	; 0x32
    29be:	8b a9       	ldd	r24, Y+51	; 0x33
    29c0:	9c a9       	ldd	r25, Y+52	; 0x34
    29c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c6:	dc 01       	movw	r26, r24
    29c8:	cb 01       	movw	r24, r22
    29ca:	98 ab       	std	Y+48, r25	; 0x30
    29cc:	8f a7       	std	Y+47, r24	; 0x2f
    29ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    29d0:	98 a9       	ldd	r25, Y+48	; 0x30
    29d2:	9c a7       	std	Y+44, r25	; 0x2c
    29d4:	8b a7       	std	Y+43, r24	; 0x2b
    29d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    29d8:	9c a5       	ldd	r25, Y+44	; 0x2c
    29da:	01 97       	sbiw	r24, 0x01	; 1
    29dc:	f1 f7       	brne	.-4      	; 0x29da <Enter_Pass+0x126>
    29de:	9c a7       	std	Y+44, r25	; 0x2c
    29e0:	8b a7       	std	Y+43, r24	; 0x2b
	uint8 i;
	while (1) {

		LCD_displayStringRowColumn(0, 0, "Enter Password");
		LCD_moveCursor(1, 0);
		for (i = 0; i < SIZE; i++) {
    29e2:	89 ad       	ldd	r24, Y+57	; 0x39
    29e4:	8f 5f       	subi	r24, 0xFF	; 255
    29e6:	89 af       	std	Y+57, r24	; 0x39
    29e8:	89 ad       	ldd	r24, Y+57	; 0x39
    29ea:	85 30       	cpi	r24, 0x05	; 5
    29ec:	08 f4       	brcc	.+2      	; 0x29f0 <Enter_Pass+0x13c>
    29ee:	7b cf       	rjmp	.-266    	; 0x28e6 <Enter_Pass+0x32>
			Pass[i] = KEYPAD_getPressedKey();
			LCD_DisplayChar('*');
			_delay_ms(400);
		}
		LCD_clearScreen();
    29f0:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "ReEnter Password");
    29f4:	2f e6       	ldi	r18, 0x6F	; 111
    29f6:	30 e0       	ldi	r19, 0x00	; 0
    29f8:	80 e0       	ldi	r24, 0x00	; 0
    29fa:	60 e0       	ldi	r22, 0x00	; 0
    29fc:	a9 01       	movw	r20, r18
    29fe:	0e 94 bf 12 	call	0x257e	; 0x257e <LCD_displayStringRowColumn>
		LCD_moveCursor(1, 0);
    2a02:	81 e0       	ldi	r24, 0x01	; 1
    2a04:	60 e0       	ldi	r22, 0x00	; 0
    2a06:	0e 94 7d 12 	call	0x24fa	; 0x24fa <LCD_moveCursor>
		for (i = 0; i < SIZE; i++) {
    2a0a:	19 ae       	std	Y+57, r1	; 0x39
    2a0c:	81 c0       	rjmp	.+258    	; 0x2b10 <Enter_Pass+0x25c>
			//confirm password
			PassConfirm[i] = KEYPAD_getPressedKey();
    2a0e:	89 ad       	ldd	r24, Y+57	; 0x39
    2a10:	08 2f       	mov	r16, r24
    2a12:	10 e0       	ldi	r17, 0x00	; 0
    2a14:	0e 94 05 13 	call	0x260a	; 0x260a <KEYPAD_getPressedKey>
    2a18:	f8 01       	movw	r30, r16
    2a1a:	e8 51       	subi	r30, 0x18	; 24
    2a1c:	fe 4f       	sbci	r31, 0xFE	; 254
    2a1e:	80 83       	st	Z, r24
			LCD_DisplayChar('*');
    2a20:	8a e2       	ldi	r24, 0x2A	; 42
    2a22:	0e 94 65 10 	call	0x20ca	; 0x20ca <LCD_DisplayChar>
    2a26:	80 e0       	ldi	r24, 0x00	; 0
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	a8 ec       	ldi	r26, 0xC8	; 200
    2a2c:	b3 e4       	ldi	r27, 0x43	; 67
    2a2e:	8f a3       	std	Y+39, r24	; 0x27
    2a30:	98 a7       	std	Y+40, r25	; 0x28
    2a32:	a9 a7       	std	Y+41, r26	; 0x29
    2a34:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a36:	6f a1       	ldd	r22, Y+39	; 0x27
    2a38:	78 a5       	ldd	r23, Y+40	; 0x28
    2a3a:	89 a5       	ldd	r24, Y+41	; 0x29
    2a3c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a3e:	20 e0       	ldi	r18, 0x00	; 0
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	4a ef       	ldi	r20, 0xFA	; 250
    2a44:	54 e4       	ldi	r21, 0x44	; 68
    2a46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a4a:	dc 01       	movw	r26, r24
    2a4c:	cb 01       	movw	r24, r22
    2a4e:	8b a3       	std	Y+35, r24	; 0x23
    2a50:	9c a3       	std	Y+36, r25	; 0x24
    2a52:	ad a3       	std	Y+37, r26	; 0x25
    2a54:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a56:	6b a1       	ldd	r22, Y+35	; 0x23
    2a58:	7c a1       	ldd	r23, Y+36	; 0x24
    2a5a:	8d a1       	ldd	r24, Y+37	; 0x25
    2a5c:	9e a1       	ldd	r25, Y+38	; 0x26
    2a5e:	20 e0       	ldi	r18, 0x00	; 0
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	40 e8       	ldi	r20, 0x80	; 128
    2a64:	5f e3       	ldi	r21, 0x3F	; 63
    2a66:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a6a:	88 23       	and	r24, r24
    2a6c:	2c f4       	brge	.+10     	; 0x2a78 <Enter_Pass+0x1c4>
		__ticks = 1;
    2a6e:	81 e0       	ldi	r24, 0x01	; 1
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	9a a3       	std	Y+34, r25	; 0x22
    2a74:	89 a3       	std	Y+33, r24	; 0x21
    2a76:	3f c0       	rjmp	.+126    	; 0x2af6 <Enter_Pass+0x242>
	else if (__tmp > 65535)
    2a78:	6b a1       	ldd	r22, Y+35	; 0x23
    2a7a:	7c a1       	ldd	r23, Y+36	; 0x24
    2a7c:	8d a1       	ldd	r24, Y+37	; 0x25
    2a7e:	9e a1       	ldd	r25, Y+38	; 0x26
    2a80:	20 e0       	ldi	r18, 0x00	; 0
    2a82:	3f ef       	ldi	r19, 0xFF	; 255
    2a84:	4f e7       	ldi	r20, 0x7F	; 127
    2a86:	57 e4       	ldi	r21, 0x47	; 71
    2a88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a8c:	18 16       	cp	r1, r24
    2a8e:	4c f5       	brge	.+82     	; 0x2ae2 <Enter_Pass+0x22e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a90:	6f a1       	ldd	r22, Y+39	; 0x27
    2a92:	78 a5       	ldd	r23, Y+40	; 0x28
    2a94:	89 a5       	ldd	r24, Y+41	; 0x29
    2a96:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a98:	20 e0       	ldi	r18, 0x00	; 0
    2a9a:	30 e0       	ldi	r19, 0x00	; 0
    2a9c:	40 e2       	ldi	r20, 0x20	; 32
    2a9e:	51 e4       	ldi	r21, 0x41	; 65
    2aa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aa4:	dc 01       	movw	r26, r24
    2aa6:	cb 01       	movw	r24, r22
    2aa8:	bc 01       	movw	r22, r24
    2aaa:	cd 01       	movw	r24, r26
    2aac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	9a a3       	std	Y+34, r25	; 0x22
    2ab6:	89 a3       	std	Y+33, r24	; 0x21
    2ab8:	0f c0       	rjmp	.+30     	; 0x2ad8 <Enter_Pass+0x224>
    2aba:	88 ec       	ldi	r24, 0xC8	; 200
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	98 a3       	std	Y+32, r25	; 0x20
    2ac0:	8f 8f       	std	Y+31, r24	; 0x1f
    2ac2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ac4:	98 a1       	ldd	r25, Y+32	; 0x20
    2ac6:	01 97       	sbiw	r24, 0x01	; 1
    2ac8:	f1 f7       	brne	.-4      	; 0x2ac6 <Enter_Pass+0x212>
    2aca:	98 a3       	std	Y+32, r25	; 0x20
    2acc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ace:	89 a1       	ldd	r24, Y+33	; 0x21
    2ad0:	9a a1       	ldd	r25, Y+34	; 0x22
    2ad2:	01 97       	sbiw	r24, 0x01	; 1
    2ad4:	9a a3       	std	Y+34, r25	; 0x22
    2ad6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ad8:	89 a1       	ldd	r24, Y+33	; 0x21
    2ada:	9a a1       	ldd	r25, Y+34	; 0x22
    2adc:	00 97       	sbiw	r24, 0x00	; 0
    2ade:	69 f7       	brne	.-38     	; 0x2aba <Enter_Pass+0x206>
    2ae0:	14 c0       	rjmp	.+40     	; 0x2b0a <Enter_Pass+0x256>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ae2:	6b a1       	ldd	r22, Y+35	; 0x23
    2ae4:	7c a1       	ldd	r23, Y+36	; 0x24
    2ae6:	8d a1       	ldd	r24, Y+37	; 0x25
    2ae8:	9e a1       	ldd	r25, Y+38	; 0x26
    2aea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aee:	dc 01       	movw	r26, r24
    2af0:	cb 01       	movw	r24, r22
    2af2:	9a a3       	std	Y+34, r25	; 0x22
    2af4:	89 a3       	std	Y+33, r24	; 0x21
    2af6:	89 a1       	ldd	r24, Y+33	; 0x21
    2af8:	9a a1       	ldd	r25, Y+34	; 0x22
    2afa:	9e 8f       	std	Y+30, r25	; 0x1e
    2afc:	8d 8f       	std	Y+29, r24	; 0x1d
    2afe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b00:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b02:	01 97       	sbiw	r24, 0x01	; 1
    2b04:	f1 f7       	brne	.-4      	; 0x2b02 <Enter_Pass+0x24e>
    2b06:	9e 8f       	std	Y+30, r25	; 0x1e
    2b08:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(400);
		}
		LCD_clearScreen();
		LCD_displayStringRowColumn(0, 0, "ReEnter Password");
		LCD_moveCursor(1, 0);
		for (i = 0; i < SIZE; i++) {
    2b0a:	89 ad       	ldd	r24, Y+57	; 0x39
    2b0c:	8f 5f       	subi	r24, 0xFF	; 255
    2b0e:	89 af       	std	Y+57, r24	; 0x39
    2b10:	89 ad       	ldd	r24, Y+57	; 0x39
    2b12:	85 30       	cpi	r24, 0x05	; 5
    2b14:	08 f4       	brcc	.+2      	; 0x2b18 <Enter_Pass+0x264>
    2b16:	7b cf       	rjmp	.-266    	; 0x2a0e <Enter_Pass+0x15a>
			//confirm password
			PassConfirm[i] = KEYPAD_getPressedKey();
			LCD_DisplayChar('*');
			_delay_ms(400);
		}
		for (i = 0; i < SIZE; i++) {
    2b18:	19 ae       	std	Y+57, r1	; 0x39
    2b1a:	18 c0       	rjmp	.+48     	; 0x2b4c <Enter_Pass+0x298>
			if (Pass[i] == PassConfirm[i]) {
    2b1c:	89 ad       	ldd	r24, Y+57	; 0x39
    2b1e:	88 2f       	mov	r24, r24
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	fc 01       	movw	r30, r24
    2b24:	e2 52       	subi	r30, 0x22	; 34
    2b26:	fe 4f       	sbci	r31, 0xFE	; 254
    2b28:	20 81       	ld	r18, Z
    2b2a:	89 ad       	ldd	r24, Y+57	; 0x39
    2b2c:	88 2f       	mov	r24, r24
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	fc 01       	movw	r30, r24
    2b32:	e8 51       	subi	r30, 0x18	; 24
    2b34:	fe 4f       	sbci	r31, 0xFE	; 254
    2b36:	80 81       	ld	r24, Z
    2b38:	28 17       	cp	r18, r24
    2b3a:	29 f4       	brne	.+10     	; 0x2b46 <Enter_Pass+0x292>
				check++;
    2b3c:	80 91 d8 01 	lds	r24, 0x01D8
    2b40:	8f 5f       	subi	r24, 0xFF	; 255
    2b42:	80 93 d8 01 	sts	0x01D8, r24
			//confirm password
			PassConfirm[i] = KEYPAD_getPressedKey();
			LCD_DisplayChar('*');
			_delay_ms(400);
		}
		for (i = 0; i < SIZE; i++) {
    2b46:	89 ad       	ldd	r24, Y+57	; 0x39
    2b48:	8f 5f       	subi	r24, 0xFF	; 255
    2b4a:	89 af       	std	Y+57, r24	; 0x39
    2b4c:	89 ad       	ldd	r24, Y+57	; 0x39
    2b4e:	85 30       	cpi	r24, 0x05	; 5
    2b50:	28 f3       	brcs	.-54     	; 0x2b1c <Enter_Pass+0x268>
			if (Pass[i] == PassConfirm[i]) {
				check++;
			}
		}
		LCD_clearScreen();
    2b52:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <LCD_clearScreen>
		if (check == 5) {
    2b56:	80 91 d8 01 	lds	r24, 0x01D8
    2b5a:	85 30       	cpi	r24, 0x05	; 5
    2b5c:	09 f0       	breq	.+2      	; 0x2b60 <Enter_Pass+0x2ac>
    2b5e:	8a c0       	rjmp	.+276    	; 0x2c74 <Enter_Pass+0x3c0>
			UART_sendByte(RECEIVEPASS);
    2b60:	81 e0       	ldi	r24, 0x01	; 1
    2b62:	0e 94 a7 07 	call	0xf4e	; 0xf4e <UART_sendByte>
			check = 0;
    2b66:	10 92 d8 01 	sts	0x01D8, r1
			for (i = 0; i < SIZE; i++) {
    2b6a:	19 ae       	std	Y+57, r1	; 0x39
    2b6c:	7e c0       	rjmp	.+252    	; 0x2c6a <Enter_Pass+0x3b6>
				UART_sendByte(Pass[i]);
    2b6e:	89 ad       	ldd	r24, Y+57	; 0x39
    2b70:	88 2f       	mov	r24, r24
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	fc 01       	movw	r30, r24
    2b76:	e2 52       	subi	r30, 0x22	; 34
    2b78:	fe 4f       	sbci	r31, 0xFE	; 254
    2b7a:	80 81       	ld	r24, Z
    2b7c:	0e 94 a7 07 	call	0xf4e	; 0xf4e <UART_sendByte>
    2b80:	80 e0       	ldi	r24, 0x00	; 0
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	a0 e2       	ldi	r26, 0x20	; 32
    2b86:	b1 e4       	ldi	r27, 0x41	; 65
    2b88:	89 8f       	std	Y+25, r24	; 0x19
    2b8a:	9a 8f       	std	Y+26, r25	; 0x1a
    2b8c:	ab 8f       	std	Y+27, r26	; 0x1b
    2b8e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b90:	69 8d       	ldd	r22, Y+25	; 0x19
    2b92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b98:	20 e0       	ldi	r18, 0x00	; 0
    2b9a:	30 e0       	ldi	r19, 0x00	; 0
    2b9c:	4a ef       	ldi	r20, 0xFA	; 250
    2b9e:	54 e4       	ldi	r21, 0x44	; 68
    2ba0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba4:	dc 01       	movw	r26, r24
    2ba6:	cb 01       	movw	r24, r22
    2ba8:	8d 8b       	std	Y+21, r24	; 0x15
    2baa:	9e 8b       	std	Y+22, r25	; 0x16
    2bac:	af 8b       	std	Y+23, r26	; 0x17
    2bae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2bb0:	6d 89       	ldd	r22, Y+21	; 0x15
    2bb2:	7e 89       	ldd	r23, Y+22	; 0x16
    2bb4:	8f 89       	ldd	r24, Y+23	; 0x17
    2bb6:	98 8d       	ldd	r25, Y+24	; 0x18
    2bb8:	20 e0       	ldi	r18, 0x00	; 0
    2bba:	30 e0       	ldi	r19, 0x00	; 0
    2bbc:	40 e8       	ldi	r20, 0x80	; 128
    2bbe:	5f e3       	ldi	r21, 0x3F	; 63
    2bc0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bc4:	88 23       	and	r24, r24
    2bc6:	2c f4       	brge	.+10     	; 0x2bd2 <Enter_Pass+0x31e>
		__ticks = 1;
    2bc8:	81 e0       	ldi	r24, 0x01	; 1
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	9c 8b       	std	Y+20, r25	; 0x14
    2bce:	8b 8b       	std	Y+19, r24	; 0x13
    2bd0:	3f c0       	rjmp	.+126    	; 0x2c50 <Enter_Pass+0x39c>
	else if (__tmp > 65535)
    2bd2:	6d 89       	ldd	r22, Y+21	; 0x15
    2bd4:	7e 89       	ldd	r23, Y+22	; 0x16
    2bd6:	8f 89       	ldd	r24, Y+23	; 0x17
    2bd8:	98 8d       	ldd	r25, Y+24	; 0x18
    2bda:	20 e0       	ldi	r18, 0x00	; 0
    2bdc:	3f ef       	ldi	r19, 0xFF	; 255
    2bde:	4f e7       	ldi	r20, 0x7F	; 127
    2be0:	57 e4       	ldi	r21, 0x47	; 71
    2be2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2be6:	18 16       	cp	r1, r24
    2be8:	4c f5       	brge	.+82     	; 0x2c3c <Enter_Pass+0x388>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bea:	69 8d       	ldd	r22, Y+25	; 0x19
    2bec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bf0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bf2:	20 e0       	ldi	r18, 0x00	; 0
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	40 e2       	ldi	r20, 0x20	; 32
    2bf8:	51 e4       	ldi	r21, 0x41	; 65
    2bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	bc 01       	movw	r22, r24
    2c04:	cd 01       	movw	r24, r26
    2c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c0a:	dc 01       	movw	r26, r24
    2c0c:	cb 01       	movw	r24, r22
    2c0e:	9c 8b       	std	Y+20, r25	; 0x14
    2c10:	8b 8b       	std	Y+19, r24	; 0x13
    2c12:	0f c0       	rjmp	.+30     	; 0x2c32 <Enter_Pass+0x37e>
    2c14:	88 ec       	ldi	r24, 0xC8	; 200
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	9a 8b       	std	Y+18, r25	; 0x12
    2c1a:	89 8b       	std	Y+17, r24	; 0x11
    2c1c:	89 89       	ldd	r24, Y+17	; 0x11
    2c1e:	9a 89       	ldd	r25, Y+18	; 0x12
    2c20:	01 97       	sbiw	r24, 0x01	; 1
    2c22:	f1 f7       	brne	.-4      	; 0x2c20 <Enter_Pass+0x36c>
    2c24:	9a 8b       	std	Y+18, r25	; 0x12
    2c26:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c28:	8b 89       	ldd	r24, Y+19	; 0x13
    2c2a:	9c 89       	ldd	r25, Y+20	; 0x14
    2c2c:	01 97       	sbiw	r24, 0x01	; 1
    2c2e:	9c 8b       	std	Y+20, r25	; 0x14
    2c30:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c32:	8b 89       	ldd	r24, Y+19	; 0x13
    2c34:	9c 89       	ldd	r25, Y+20	; 0x14
    2c36:	00 97       	sbiw	r24, 0x00	; 0
    2c38:	69 f7       	brne	.-38     	; 0x2c14 <Enter_Pass+0x360>
    2c3a:	14 c0       	rjmp	.+40     	; 0x2c64 <Enter_Pass+0x3b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c3c:	6d 89       	ldd	r22, Y+21	; 0x15
    2c3e:	7e 89       	ldd	r23, Y+22	; 0x16
    2c40:	8f 89       	ldd	r24, Y+23	; 0x17
    2c42:	98 8d       	ldd	r25, Y+24	; 0x18
    2c44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c48:	dc 01       	movw	r26, r24
    2c4a:	cb 01       	movw	r24, r22
    2c4c:	9c 8b       	std	Y+20, r25	; 0x14
    2c4e:	8b 8b       	std	Y+19, r24	; 0x13
    2c50:	8b 89       	ldd	r24, Y+19	; 0x13
    2c52:	9c 89       	ldd	r25, Y+20	; 0x14
    2c54:	98 8b       	std	Y+16, r25	; 0x10
    2c56:	8f 87       	std	Y+15, r24	; 0x0f
    2c58:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c5a:	98 89       	ldd	r25, Y+16	; 0x10
    2c5c:	01 97       	sbiw	r24, 0x01	; 1
    2c5e:	f1 f7       	brne	.-4      	; 0x2c5c <Enter_Pass+0x3a8>
    2c60:	98 8b       	std	Y+16, r25	; 0x10
    2c62:	8f 87       	std	Y+15, r24	; 0x0f
		}
		LCD_clearScreen();
		if (check == 5) {
			UART_sendByte(RECEIVEPASS);
			check = 0;
			for (i = 0; i < SIZE; i++) {
    2c64:	89 ad       	ldd	r24, Y+57	; 0x39
    2c66:	8f 5f       	subi	r24, 0xFF	; 255
    2c68:	89 af       	std	Y+57, r24	; 0x39
    2c6a:	89 ad       	ldd	r24, Y+57	; 0x39
    2c6c:	85 30       	cpi	r24, 0x05	; 5
    2c6e:	08 f4       	brcc	.+2      	; 0x2c72 <Enter_Pass+0x3be>
    2c70:	7e cf       	rjmp	.-260    	; 0x2b6e <Enter_Pass+0x2ba>
    2c72:	7d c0       	rjmp	.+250    	; 0x2d6e <Enter_Pass+0x4ba>
				UART_sendByte(Pass[i]);
				_delay_ms(10);
			}
			break; }

		check = 0;
    2c74:	10 92 d8 01 	sts	0x01D8, r1
		LCD_clearScreen();
    2c78:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <LCD_clearScreen>
		LCD_DisplayString("Invalid");
    2c7c:	80 e8       	ldi	r24, 0x80	; 128
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	0e 94 54 12 	call	0x24a8	; 0x24a8 <LCD_DisplayString>
    2c84:	80 e0       	ldi	r24, 0x00	; 0
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	aa e7       	ldi	r26, 0x7A	; 122
    2c8a:	b4 e4       	ldi	r27, 0x44	; 68
    2c8c:	8b 87       	std	Y+11, r24	; 0x0b
    2c8e:	9c 87       	std	Y+12, r25	; 0x0c
    2c90:	ad 87       	std	Y+13, r26	; 0x0d
    2c92:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c94:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c96:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c98:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c9c:	20 e0       	ldi	r18, 0x00	; 0
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	4a ef       	ldi	r20, 0xFA	; 250
    2ca2:	54 e4       	ldi	r21, 0x44	; 68
    2ca4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca8:	dc 01       	movw	r26, r24
    2caa:	cb 01       	movw	r24, r22
    2cac:	8f 83       	std	Y+7, r24	; 0x07
    2cae:	98 87       	std	Y+8, r25	; 0x08
    2cb0:	a9 87       	std	Y+9, r26	; 0x09
    2cb2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cb4:	6f 81       	ldd	r22, Y+7	; 0x07
    2cb6:	78 85       	ldd	r23, Y+8	; 0x08
    2cb8:	89 85       	ldd	r24, Y+9	; 0x09
    2cba:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cbc:	20 e0       	ldi	r18, 0x00	; 0
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	40 e8       	ldi	r20, 0x80	; 128
    2cc2:	5f e3       	ldi	r21, 0x3F	; 63
    2cc4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cc8:	88 23       	and	r24, r24
    2cca:	2c f4       	brge	.+10     	; 0x2cd6 <Enter_Pass+0x422>
		__ticks = 1;
    2ccc:	81 e0       	ldi	r24, 0x01	; 1
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	9e 83       	std	Y+6, r25	; 0x06
    2cd2:	8d 83       	std	Y+5, r24	; 0x05
    2cd4:	3f c0       	rjmp	.+126    	; 0x2d54 <Enter_Pass+0x4a0>
	else if (__tmp > 65535)
    2cd6:	6f 81       	ldd	r22, Y+7	; 0x07
    2cd8:	78 85       	ldd	r23, Y+8	; 0x08
    2cda:	89 85       	ldd	r24, Y+9	; 0x09
    2cdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cde:	20 e0       	ldi	r18, 0x00	; 0
    2ce0:	3f ef       	ldi	r19, 0xFF	; 255
    2ce2:	4f e7       	ldi	r20, 0x7F	; 127
    2ce4:	57 e4       	ldi	r21, 0x47	; 71
    2ce6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cea:	18 16       	cp	r1, r24
    2cec:	4c f5       	brge	.+82     	; 0x2d40 <Enter_Pass+0x48c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cee:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cf0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cf2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cf4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cf6:	20 e0       	ldi	r18, 0x00	; 0
    2cf8:	30 e0       	ldi	r19, 0x00	; 0
    2cfa:	40 e2       	ldi	r20, 0x20	; 32
    2cfc:	51 e4       	ldi	r21, 0x41	; 65
    2cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d02:	dc 01       	movw	r26, r24
    2d04:	cb 01       	movw	r24, r22
    2d06:	bc 01       	movw	r22, r24
    2d08:	cd 01       	movw	r24, r26
    2d0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d0e:	dc 01       	movw	r26, r24
    2d10:	cb 01       	movw	r24, r22
    2d12:	9e 83       	std	Y+6, r25	; 0x06
    2d14:	8d 83       	std	Y+5, r24	; 0x05
    2d16:	0f c0       	rjmp	.+30     	; 0x2d36 <Enter_Pass+0x482>
    2d18:	88 ec       	ldi	r24, 0xC8	; 200
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	9c 83       	std	Y+4, r25	; 0x04
    2d1e:	8b 83       	std	Y+3, r24	; 0x03
    2d20:	8b 81       	ldd	r24, Y+3	; 0x03
    2d22:	9c 81       	ldd	r25, Y+4	; 0x04
    2d24:	01 97       	sbiw	r24, 0x01	; 1
    2d26:	f1 f7       	brne	.-4      	; 0x2d24 <Enter_Pass+0x470>
    2d28:	9c 83       	std	Y+4, r25	; 0x04
    2d2a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d30:	01 97       	sbiw	r24, 0x01	; 1
    2d32:	9e 83       	std	Y+6, r25	; 0x06
    2d34:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d36:	8d 81       	ldd	r24, Y+5	; 0x05
    2d38:	9e 81       	ldd	r25, Y+6	; 0x06
    2d3a:	00 97       	sbiw	r24, 0x00	; 0
    2d3c:	69 f7       	brne	.-38     	; 0x2d18 <Enter_Pass+0x464>
    2d3e:	14 c0       	rjmp	.+40     	; 0x2d68 <Enter_Pass+0x4b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d40:	6f 81       	ldd	r22, Y+7	; 0x07
    2d42:	78 85       	ldd	r23, Y+8	; 0x08
    2d44:	89 85       	ldd	r24, Y+9	; 0x09
    2d46:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d4c:	dc 01       	movw	r26, r24
    2d4e:	cb 01       	movw	r24, r22
    2d50:	9e 83       	std	Y+6, r25	; 0x06
    2d52:	8d 83       	std	Y+5, r24	; 0x05
    2d54:	8d 81       	ldd	r24, Y+5	; 0x05
    2d56:	9e 81       	ldd	r25, Y+6	; 0x06
    2d58:	9a 83       	std	Y+2, r25	; 0x02
    2d5a:	89 83       	std	Y+1, r24	; 0x01
    2d5c:	89 81       	ldd	r24, Y+1	; 0x01
    2d5e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d60:	01 97       	sbiw	r24, 0x01	; 1
    2d62:	f1 f7       	brne	.-4      	; 0x2d60 <Enter_Pass+0x4ac>
    2d64:	9a 83       	std	Y+2, r25	; 0x02
    2d66:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		LCD_clearScreen();
    2d68:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <LCD_clearScreen>
    2d6c:	af cd       	rjmp	.-1186   	; 0x28cc <Enter_Pass+0x18>

	}
}
    2d6e:	e9 96       	adiw	r28, 0x39	; 57
    2d70:	0f b6       	in	r0, 0x3f	; 63
    2d72:	f8 94       	cli
    2d74:	de bf       	out	0x3e, r29	; 62
    2d76:	0f be       	out	0x3f, r0	; 63
    2d78:	cd bf       	out	0x3d, r28	; 61
    2d7a:	cf 91       	pop	r28
    2d7c:	df 91       	pop	r29
    2d7e:	1f 91       	pop	r17
    2d80:	0f 91       	pop	r16
    2d82:	08 95       	ret

00002d84 <buzzer_handling>:

void buzzer_handling(void) {
    2d84:	df 93       	push	r29
    2d86:	cf 93       	push	r28
    2d88:	cd b7       	in	r28, 0x3d	; 61
    2d8a:	de b7       	in	r29, 0x3e	; 62
	Buzzer_Flag++;
    2d8c:	80 91 d9 01 	lds	r24, 0x01D9
    2d90:	8f 5f       	subi	r24, 0xFF	; 255
    2d92:	80 93 d9 01 	sts	0x01D9, r24
	LCD_clearScreen();
    2d96:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <LCD_clearScreen>
	if (Buzzer_Flag == 3) {
    2d9a:	80 91 d9 01 	lds	r24, 0x01D9
    2d9e:	83 30       	cpi	r24, 0x03	; 3
    2da0:	29 f4       	brne	.+10     	; 0x2dac <buzzer_handling+0x28>
		UART_sendByte(BUZZERON);
    2da2:	87 e0       	ldi	r24, 0x07	; 7
    2da4:	0e 94 a7 07 	call	0xf4e	; 0xf4e <UART_sendByte>
		Buzzer_Flag = 0;
    2da8:	10 92 d9 01 	sts	0x01D9, r1
	}
}
    2dac:	cf 91       	pop	r28
    2dae:	df 91       	pop	r29
    2db0:	08 95       	ret

00002db2 <check_pass>:
uint8 check_pass(void) {
    2db2:	0f 93       	push	r16
    2db4:	1f 93       	push	r17
    2db6:	df 93       	push	r29
    2db8:	cf 93       	push	r28
    2dba:	cd b7       	in	r28, 0x3d	; 61
    2dbc:	de b7       	in	r29, 0x3e	; 62
    2dbe:	6e 97       	sbiw	r28, 0x1e	; 30
    2dc0:	0f b6       	in	r0, 0x3f	; 63
    2dc2:	f8 94       	cli
    2dc4:	de bf       	out	0x3e, r29	; 62
    2dc6:	0f be       	out	0x3f, r0	; 63
    2dc8:	cd bf       	out	0x3d, r28	; 61
	uint8 key;
	uint8 i;
	LCD_clearScreen();
    2dca:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <LCD_clearScreen>
	LCD_DisplayString("Enter Password");
    2dce:	80 e6       	ldi	r24, 0x60	; 96
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	0e 94 54 12 	call	0x24a8	; 0x24a8 <LCD_DisplayString>
	LCD_moveCursor(1, 0);
    2dd6:	81 e0       	ldi	r24, 0x01	; 1
    2dd8:	60 e0       	ldi	r22, 0x00	; 0
    2dda:	0e 94 7d 12 	call	0x24fa	; 0x24fa <LCD_moveCursor>
	for (i = 0; i < SIZE; i++) {
    2dde:	1d 8e       	std	Y+29, r1	; 0x1d
    2de0:	81 c0       	rjmp	.+258    	; 0x2ee4 <check_pass+0x132>
		PassPrev[i] = KEYPAD_getPressedKey();
    2de2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2de4:	08 2f       	mov	r16, r24
    2de6:	10 e0       	ldi	r17, 0x00	; 0
    2de8:	0e 94 05 13 	call	0x260a	; 0x260a <KEYPAD_getPressedKey>
    2dec:	f8 01       	movw	r30, r16
    2dee:	ed 51       	subi	r30, 0x1D	; 29
    2df0:	fe 4f       	sbci	r31, 0xFE	; 254
    2df2:	80 83       	st	Z, r24
		LCD_DisplayChar('*');
    2df4:	8a e2       	ldi	r24, 0x2A	; 42
    2df6:	0e 94 65 10 	call	0x20ca	; 0x20ca <LCD_DisplayChar>
    2dfa:	80 e0       	ldi	r24, 0x00	; 0
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	a8 ec       	ldi	r26, 0xC8	; 200
    2e00:	b3 e4       	ldi	r27, 0x43	; 67
    2e02:	89 8f       	std	Y+25, r24	; 0x19
    2e04:	9a 8f       	std	Y+26, r25	; 0x1a
    2e06:	ab 8f       	std	Y+27, r26	; 0x1b
    2e08:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e0a:	69 8d       	ldd	r22, Y+25	; 0x19
    2e0c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e12:	20 e0       	ldi	r18, 0x00	; 0
    2e14:	30 e0       	ldi	r19, 0x00	; 0
    2e16:	4a ef       	ldi	r20, 0xFA	; 250
    2e18:	54 e4       	ldi	r21, 0x44	; 68
    2e1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e1e:	dc 01       	movw	r26, r24
    2e20:	cb 01       	movw	r24, r22
    2e22:	8d 8b       	std	Y+21, r24	; 0x15
    2e24:	9e 8b       	std	Y+22, r25	; 0x16
    2e26:	af 8b       	std	Y+23, r26	; 0x17
    2e28:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e2a:	6d 89       	ldd	r22, Y+21	; 0x15
    2e2c:	7e 89       	ldd	r23, Y+22	; 0x16
    2e2e:	8f 89       	ldd	r24, Y+23	; 0x17
    2e30:	98 8d       	ldd	r25, Y+24	; 0x18
    2e32:	20 e0       	ldi	r18, 0x00	; 0
    2e34:	30 e0       	ldi	r19, 0x00	; 0
    2e36:	40 e8       	ldi	r20, 0x80	; 128
    2e38:	5f e3       	ldi	r21, 0x3F	; 63
    2e3a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e3e:	88 23       	and	r24, r24
    2e40:	2c f4       	brge	.+10     	; 0x2e4c <check_pass+0x9a>
		__ticks = 1;
    2e42:	81 e0       	ldi	r24, 0x01	; 1
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	9c 8b       	std	Y+20, r25	; 0x14
    2e48:	8b 8b       	std	Y+19, r24	; 0x13
    2e4a:	3f c0       	rjmp	.+126    	; 0x2eca <check_pass+0x118>
	else if (__tmp > 65535)
    2e4c:	6d 89       	ldd	r22, Y+21	; 0x15
    2e4e:	7e 89       	ldd	r23, Y+22	; 0x16
    2e50:	8f 89       	ldd	r24, Y+23	; 0x17
    2e52:	98 8d       	ldd	r25, Y+24	; 0x18
    2e54:	20 e0       	ldi	r18, 0x00	; 0
    2e56:	3f ef       	ldi	r19, 0xFF	; 255
    2e58:	4f e7       	ldi	r20, 0x7F	; 127
    2e5a:	57 e4       	ldi	r21, 0x47	; 71
    2e5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e60:	18 16       	cp	r1, r24
    2e62:	4c f5       	brge	.+82     	; 0x2eb6 <check_pass+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e64:	69 8d       	ldd	r22, Y+25	; 0x19
    2e66:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e6c:	20 e0       	ldi	r18, 0x00	; 0
    2e6e:	30 e0       	ldi	r19, 0x00	; 0
    2e70:	40 e2       	ldi	r20, 0x20	; 32
    2e72:	51 e4       	ldi	r21, 0x41	; 65
    2e74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e78:	dc 01       	movw	r26, r24
    2e7a:	cb 01       	movw	r24, r22
    2e7c:	bc 01       	movw	r22, r24
    2e7e:	cd 01       	movw	r24, r26
    2e80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e84:	dc 01       	movw	r26, r24
    2e86:	cb 01       	movw	r24, r22
    2e88:	9c 8b       	std	Y+20, r25	; 0x14
    2e8a:	8b 8b       	std	Y+19, r24	; 0x13
    2e8c:	0f c0       	rjmp	.+30     	; 0x2eac <check_pass+0xfa>
    2e8e:	88 ec       	ldi	r24, 0xC8	; 200
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	9a 8b       	std	Y+18, r25	; 0x12
    2e94:	89 8b       	std	Y+17, r24	; 0x11
    2e96:	89 89       	ldd	r24, Y+17	; 0x11
    2e98:	9a 89       	ldd	r25, Y+18	; 0x12
    2e9a:	01 97       	sbiw	r24, 0x01	; 1
    2e9c:	f1 f7       	brne	.-4      	; 0x2e9a <check_pass+0xe8>
    2e9e:	9a 8b       	std	Y+18, r25	; 0x12
    2ea0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ea2:	8b 89       	ldd	r24, Y+19	; 0x13
    2ea4:	9c 89       	ldd	r25, Y+20	; 0x14
    2ea6:	01 97       	sbiw	r24, 0x01	; 1
    2ea8:	9c 8b       	std	Y+20, r25	; 0x14
    2eaa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eac:	8b 89       	ldd	r24, Y+19	; 0x13
    2eae:	9c 89       	ldd	r25, Y+20	; 0x14
    2eb0:	00 97       	sbiw	r24, 0x00	; 0
    2eb2:	69 f7       	brne	.-38     	; 0x2e8e <check_pass+0xdc>
    2eb4:	14 c0       	rjmp	.+40     	; 0x2ede <check_pass+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eb6:	6d 89       	ldd	r22, Y+21	; 0x15
    2eb8:	7e 89       	ldd	r23, Y+22	; 0x16
    2eba:	8f 89       	ldd	r24, Y+23	; 0x17
    2ebc:	98 8d       	ldd	r25, Y+24	; 0x18
    2ebe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec2:	dc 01       	movw	r26, r24
    2ec4:	cb 01       	movw	r24, r22
    2ec6:	9c 8b       	std	Y+20, r25	; 0x14
    2ec8:	8b 8b       	std	Y+19, r24	; 0x13
    2eca:	8b 89       	ldd	r24, Y+19	; 0x13
    2ecc:	9c 89       	ldd	r25, Y+20	; 0x14
    2ece:	98 8b       	std	Y+16, r25	; 0x10
    2ed0:	8f 87       	std	Y+15, r24	; 0x0f
    2ed2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ed4:	98 89       	ldd	r25, Y+16	; 0x10
    2ed6:	01 97       	sbiw	r24, 0x01	; 1
    2ed8:	f1 f7       	brne	.-4      	; 0x2ed6 <check_pass+0x124>
    2eda:	98 8b       	std	Y+16, r25	; 0x10
    2edc:	8f 87       	std	Y+15, r24	; 0x0f
	uint8 key;
	uint8 i;
	LCD_clearScreen();
	LCD_DisplayString("Enter Password");
	LCD_moveCursor(1, 0);
	for (i = 0; i < SIZE; i++) {
    2ede:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ee0:	8f 5f       	subi	r24, 0xFF	; 255
    2ee2:	8d 8f       	std	Y+29, r24	; 0x1d
    2ee4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ee6:	85 30       	cpi	r24, 0x05	; 5
    2ee8:	08 f4       	brcc	.+2      	; 0x2eec <check_pass+0x13a>
    2eea:	7b cf       	rjmp	.-266    	; 0x2de2 <check_pass+0x30>
		PassPrev[i] = KEYPAD_getPressedKey();
		LCD_DisplayChar('*');
		_delay_ms(400);
	}
	UART_sendByte(CHECK_PASS);
    2eec:	82 e0       	ldi	r24, 0x02	; 2
    2eee:	0e 94 a7 07 	call	0xf4e	; 0xf4e <UART_sendByte>
	for (i = 0; i < SIZE; i++) {
    2ef2:	1d 8e       	std	Y+29, r1	; 0x1d
    2ef4:	7e c0       	rjmp	.+252    	; 0x2ff2 <check_pass+0x240>
		UART_sendByte(PassPrev[i]);
    2ef6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ef8:	88 2f       	mov	r24, r24
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	fc 01       	movw	r30, r24
    2efe:	ed 51       	subi	r30, 0x1D	; 29
    2f00:	fe 4f       	sbci	r31, 0xFE	; 254
    2f02:	80 81       	ld	r24, Z
    2f04:	0e 94 a7 07 	call	0xf4e	; 0xf4e <UART_sendByte>
    2f08:	80 e0       	ldi	r24, 0x00	; 0
    2f0a:	90 e0       	ldi	r25, 0x00	; 0
    2f0c:	a0 e2       	ldi	r26, 0x20	; 32
    2f0e:	b1 e4       	ldi	r27, 0x41	; 65
    2f10:	8b 87       	std	Y+11, r24	; 0x0b
    2f12:	9c 87       	std	Y+12, r25	; 0x0c
    2f14:	ad 87       	std	Y+13, r26	; 0x0d
    2f16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f18:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f20:	20 e0       	ldi	r18, 0x00	; 0
    2f22:	30 e0       	ldi	r19, 0x00	; 0
    2f24:	4a ef       	ldi	r20, 0xFA	; 250
    2f26:	54 e4       	ldi	r21, 0x44	; 68
    2f28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f2c:	dc 01       	movw	r26, r24
    2f2e:	cb 01       	movw	r24, r22
    2f30:	8f 83       	std	Y+7, r24	; 0x07
    2f32:	98 87       	std	Y+8, r25	; 0x08
    2f34:	a9 87       	std	Y+9, r26	; 0x09
    2f36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f38:	6f 81       	ldd	r22, Y+7	; 0x07
    2f3a:	78 85       	ldd	r23, Y+8	; 0x08
    2f3c:	89 85       	ldd	r24, Y+9	; 0x09
    2f3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f40:	20 e0       	ldi	r18, 0x00	; 0
    2f42:	30 e0       	ldi	r19, 0x00	; 0
    2f44:	40 e8       	ldi	r20, 0x80	; 128
    2f46:	5f e3       	ldi	r21, 0x3F	; 63
    2f48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f4c:	88 23       	and	r24, r24
    2f4e:	2c f4       	brge	.+10     	; 0x2f5a <check_pass+0x1a8>
		__ticks = 1;
    2f50:	81 e0       	ldi	r24, 0x01	; 1
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	9e 83       	std	Y+6, r25	; 0x06
    2f56:	8d 83       	std	Y+5, r24	; 0x05
    2f58:	3f c0       	rjmp	.+126    	; 0x2fd8 <check_pass+0x226>
	else if (__tmp > 65535)
    2f5a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f5c:	78 85       	ldd	r23, Y+8	; 0x08
    2f5e:	89 85       	ldd	r24, Y+9	; 0x09
    2f60:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f62:	20 e0       	ldi	r18, 0x00	; 0
    2f64:	3f ef       	ldi	r19, 0xFF	; 255
    2f66:	4f e7       	ldi	r20, 0x7F	; 127
    2f68:	57 e4       	ldi	r21, 0x47	; 71
    2f6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f6e:	18 16       	cp	r1, r24
    2f70:	4c f5       	brge	.+82     	; 0x2fc4 <check_pass+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f72:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f74:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f76:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f78:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f7a:	20 e0       	ldi	r18, 0x00	; 0
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	40 e2       	ldi	r20, 0x20	; 32
    2f80:	51 e4       	ldi	r21, 0x41	; 65
    2f82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f86:	dc 01       	movw	r26, r24
    2f88:	cb 01       	movw	r24, r22
    2f8a:	bc 01       	movw	r22, r24
    2f8c:	cd 01       	movw	r24, r26
    2f8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f92:	dc 01       	movw	r26, r24
    2f94:	cb 01       	movw	r24, r22
    2f96:	9e 83       	std	Y+6, r25	; 0x06
    2f98:	8d 83       	std	Y+5, r24	; 0x05
    2f9a:	0f c0       	rjmp	.+30     	; 0x2fba <check_pass+0x208>
    2f9c:	88 ec       	ldi	r24, 0xC8	; 200
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	9c 83       	std	Y+4, r25	; 0x04
    2fa2:	8b 83       	std	Y+3, r24	; 0x03
    2fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa6:	9c 81       	ldd	r25, Y+4	; 0x04
    2fa8:	01 97       	sbiw	r24, 0x01	; 1
    2faa:	f1 f7       	brne	.-4      	; 0x2fa8 <check_pass+0x1f6>
    2fac:	9c 83       	std	Y+4, r25	; 0x04
    2fae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fb0:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb2:	9e 81       	ldd	r25, Y+6	; 0x06
    2fb4:	01 97       	sbiw	r24, 0x01	; 1
    2fb6:	9e 83       	std	Y+6, r25	; 0x06
    2fb8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fba:	8d 81       	ldd	r24, Y+5	; 0x05
    2fbc:	9e 81       	ldd	r25, Y+6	; 0x06
    2fbe:	00 97       	sbiw	r24, 0x00	; 0
    2fc0:	69 f7       	brne	.-38     	; 0x2f9c <check_pass+0x1ea>
    2fc2:	14 c0       	rjmp	.+40     	; 0x2fec <check_pass+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fc4:	6f 81       	ldd	r22, Y+7	; 0x07
    2fc6:	78 85       	ldd	r23, Y+8	; 0x08
    2fc8:	89 85       	ldd	r24, Y+9	; 0x09
    2fca:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd0:	dc 01       	movw	r26, r24
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	9e 83       	std	Y+6, r25	; 0x06
    2fd6:	8d 83       	std	Y+5, r24	; 0x05
    2fd8:	8d 81       	ldd	r24, Y+5	; 0x05
    2fda:	9e 81       	ldd	r25, Y+6	; 0x06
    2fdc:	9a 83       	std	Y+2, r25	; 0x02
    2fde:	89 83       	std	Y+1, r24	; 0x01
    2fe0:	89 81       	ldd	r24, Y+1	; 0x01
    2fe2:	9a 81       	ldd	r25, Y+2	; 0x02
    2fe4:	01 97       	sbiw	r24, 0x01	; 1
    2fe6:	f1 f7       	brne	.-4      	; 0x2fe4 <check_pass+0x232>
    2fe8:	9a 83       	std	Y+2, r25	; 0x02
    2fea:	89 83       	std	Y+1, r24	; 0x01
		PassPrev[i] = KEYPAD_getPressedKey();
		LCD_DisplayChar('*');
		_delay_ms(400);
	}
	UART_sendByte(CHECK_PASS);
	for (i = 0; i < SIZE; i++) {
    2fec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fee:	8f 5f       	subi	r24, 0xFF	; 255
    2ff0:	8d 8f       	std	Y+29, r24	; 0x1d
    2ff2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ff4:	85 30       	cpi	r24, 0x05	; 5
    2ff6:	08 f4       	brcc	.+2      	; 0x2ffa <check_pass+0x248>
    2ff8:	7e cf       	rjmp	.-260    	; 0x2ef6 <check_pass+0x144>
		UART_sendByte(PassPrev[i]);
		_delay_ms(10);
	}
	key = UART_recieveByte();
    2ffa:	0e 94 be 07 	call	0xf7c	; 0xf7c <UART_recieveByte>
    2ffe:	8e 8f       	std	Y+30, r24	; 0x1e
	return (key);
    3000:	8e 8d       	ldd	r24, Y+30	; 0x1e
}
    3002:	6e 96       	adiw	r28, 0x1e	; 30
    3004:	0f b6       	in	r0, 0x3f	; 63
    3006:	f8 94       	cli
    3008:	de bf       	out	0x3e, r29	; 62
    300a:	0f be       	out	0x3f, r0	; 63
    300c:	cd bf       	out	0x3d, r28	; 61
    300e:	cf 91       	pop	r28
    3010:	df 91       	pop	r29
    3012:	1f 91       	pop	r17
    3014:	0f 91       	pop	r16
    3016:	08 95       	ret

00003018 <change_pass>:
void change_pass(void) {
    3018:	df 93       	push	r29
    301a:	cf 93       	push	r28
    301c:	cd b7       	in	r28, 0x3d	; 61
    301e:	de b7       	in	r29, 0x3e	; 62
    3020:	a1 97       	sbiw	r28, 0x21	; 33
    3022:	0f b6       	in	r0, 0x3f	; 63
    3024:	f8 94       	cli
    3026:	de bf       	out	0x3e, r29	; 62
    3028:	0f be       	out	0x3f, r0	; 63
    302a:	cd bf       	out	0x3d, r28	; 61
	uint8 flag=0;
    302c:	1f 8e       	std	Y+31, r1	; 0x1f
	uint8 key;
	for (uint8 i=0;i<3;i++){
    302e:	1d 8e       	std	Y+29, r1	; 0x1d
    3030:	12 c1       	rjmp	.+548    	; 0x3256 <change_pass+0x23e>
		key=check_pass();
    3032:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <check_pass>
    3036:	8e 8f       	std	Y+30, r24	; 0x1e
    3038:	80 e0       	ldi	r24, 0x00	; 0
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	a8 ec       	ldi	r26, 0xC8	; 200
    303e:	b2 e4       	ldi	r27, 0x42	; 66
    3040:	89 8f       	std	Y+25, r24	; 0x19
    3042:	9a 8f       	std	Y+26, r25	; 0x1a
    3044:	ab 8f       	std	Y+27, r26	; 0x1b
    3046:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3048:	69 8d       	ldd	r22, Y+25	; 0x19
    304a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    304c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    304e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3050:	20 e0       	ldi	r18, 0x00	; 0
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	4a ef       	ldi	r20, 0xFA	; 250
    3056:	54 e4       	ldi	r21, 0x44	; 68
    3058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    305c:	dc 01       	movw	r26, r24
    305e:	cb 01       	movw	r24, r22
    3060:	8d 8b       	std	Y+21, r24	; 0x15
    3062:	9e 8b       	std	Y+22, r25	; 0x16
    3064:	af 8b       	std	Y+23, r26	; 0x17
    3066:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3068:	6d 89       	ldd	r22, Y+21	; 0x15
    306a:	7e 89       	ldd	r23, Y+22	; 0x16
    306c:	8f 89       	ldd	r24, Y+23	; 0x17
    306e:	98 8d       	ldd	r25, Y+24	; 0x18
    3070:	20 e0       	ldi	r18, 0x00	; 0
    3072:	30 e0       	ldi	r19, 0x00	; 0
    3074:	40 e8       	ldi	r20, 0x80	; 128
    3076:	5f e3       	ldi	r21, 0x3F	; 63
    3078:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    307c:	88 23       	and	r24, r24
    307e:	2c f4       	brge	.+10     	; 0x308a <change_pass+0x72>
		__ticks = 1;
    3080:	81 e0       	ldi	r24, 0x01	; 1
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	9c 8b       	std	Y+20, r25	; 0x14
    3086:	8b 8b       	std	Y+19, r24	; 0x13
    3088:	3f c0       	rjmp	.+126    	; 0x3108 <change_pass+0xf0>
	else if (__tmp > 65535)
    308a:	6d 89       	ldd	r22, Y+21	; 0x15
    308c:	7e 89       	ldd	r23, Y+22	; 0x16
    308e:	8f 89       	ldd	r24, Y+23	; 0x17
    3090:	98 8d       	ldd	r25, Y+24	; 0x18
    3092:	20 e0       	ldi	r18, 0x00	; 0
    3094:	3f ef       	ldi	r19, 0xFF	; 255
    3096:	4f e7       	ldi	r20, 0x7F	; 127
    3098:	57 e4       	ldi	r21, 0x47	; 71
    309a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    309e:	18 16       	cp	r1, r24
    30a0:	4c f5       	brge	.+82     	; 0x30f4 <change_pass+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30a2:	69 8d       	ldd	r22, Y+25	; 0x19
    30a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30aa:	20 e0       	ldi	r18, 0x00	; 0
    30ac:	30 e0       	ldi	r19, 0x00	; 0
    30ae:	40 e2       	ldi	r20, 0x20	; 32
    30b0:	51 e4       	ldi	r21, 0x41	; 65
    30b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b6:	dc 01       	movw	r26, r24
    30b8:	cb 01       	movw	r24, r22
    30ba:	bc 01       	movw	r22, r24
    30bc:	cd 01       	movw	r24, r26
    30be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c2:	dc 01       	movw	r26, r24
    30c4:	cb 01       	movw	r24, r22
    30c6:	9c 8b       	std	Y+20, r25	; 0x14
    30c8:	8b 8b       	std	Y+19, r24	; 0x13
    30ca:	0f c0       	rjmp	.+30     	; 0x30ea <change_pass+0xd2>
    30cc:	88 ec       	ldi	r24, 0xC8	; 200
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	9a 8b       	std	Y+18, r25	; 0x12
    30d2:	89 8b       	std	Y+17, r24	; 0x11
    30d4:	89 89       	ldd	r24, Y+17	; 0x11
    30d6:	9a 89       	ldd	r25, Y+18	; 0x12
    30d8:	01 97       	sbiw	r24, 0x01	; 1
    30da:	f1 f7       	brne	.-4      	; 0x30d8 <change_pass+0xc0>
    30dc:	9a 8b       	std	Y+18, r25	; 0x12
    30de:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30e0:	8b 89       	ldd	r24, Y+19	; 0x13
    30e2:	9c 89       	ldd	r25, Y+20	; 0x14
    30e4:	01 97       	sbiw	r24, 0x01	; 1
    30e6:	9c 8b       	std	Y+20, r25	; 0x14
    30e8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ea:	8b 89       	ldd	r24, Y+19	; 0x13
    30ec:	9c 89       	ldd	r25, Y+20	; 0x14
    30ee:	00 97       	sbiw	r24, 0x00	; 0
    30f0:	69 f7       	brne	.-38     	; 0x30cc <change_pass+0xb4>
    30f2:	14 c0       	rjmp	.+40     	; 0x311c <change_pass+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30f4:	6d 89       	ldd	r22, Y+21	; 0x15
    30f6:	7e 89       	ldd	r23, Y+22	; 0x16
    30f8:	8f 89       	ldd	r24, Y+23	; 0x17
    30fa:	98 8d       	ldd	r25, Y+24	; 0x18
    30fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3100:	dc 01       	movw	r26, r24
    3102:	cb 01       	movw	r24, r22
    3104:	9c 8b       	std	Y+20, r25	; 0x14
    3106:	8b 8b       	std	Y+19, r24	; 0x13
    3108:	8b 89       	ldd	r24, Y+19	; 0x13
    310a:	9c 89       	ldd	r25, Y+20	; 0x14
    310c:	98 8b       	std	Y+16, r25	; 0x10
    310e:	8f 87       	std	Y+15, r24	; 0x0f
    3110:	8f 85       	ldd	r24, Y+15	; 0x0f
    3112:	98 89       	ldd	r25, Y+16	; 0x10
    3114:	01 97       	sbiw	r24, 0x01	; 1
    3116:	f1 f7       	brne	.-4      	; 0x3114 <change_pass+0xfc>
    3118:	98 8b       	std	Y+16, r25	; 0x10
    311a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
		switch (key) {
    311c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    311e:	28 2f       	mov	r18, r24
    3120:	30 e0       	ldi	r19, 0x00	; 0
    3122:	39 a3       	std	Y+33, r19	; 0x21
    3124:	28 a3       	std	Y+32, r18	; 0x20
    3126:	88 a1       	ldd	r24, Y+32	; 0x20
    3128:	99 a1       	ldd	r25, Y+33	; 0x21
    312a:	84 30       	cpi	r24, 0x04	; 4
    312c:	91 05       	cpc	r25, r1
    312e:	31 f0       	breq	.+12     	; 0x313c <change_pass+0x124>
    3130:	28 a1       	ldd	r18, Y+32	; 0x20
    3132:	39 a1       	ldd	r19, Y+33	; 0x21
    3134:	26 30       	cpi	r18, 0x06	; 6
    3136:	31 05       	cpc	r19, r1
    3138:	61 f0       	breq	.+24     	; 0x3152 <change_pass+0x13a>
    313a:	85 c0       	rjmp	.+266    	; 0x3246 <change_pass+0x22e>
		case CORRECT:
			Buzzer_Flag=0;
    313c:	10 92 d9 01 	sts	0x01D9, r1
			flag=1;
    3140:	81 e0       	ldi	r24, 0x01	; 1
    3142:	8f 8f       	std	Y+31, r24	; 0x1f
			LCD_clearScreen();
    3144:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <LCD_clearScreen>
			Enter_Pass();
    3148:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <Enter_Pass>
			options();
    314c:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <options>
    3150:	7a c0       	rjmp	.+244    	; 0x3246 <change_pass+0x22e>
			break;
		case WRONG:
			LCD_clearScreen();
    3152:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <LCD_clearScreen>
			LCD_DisplayString("Try again");
    3156:	88 e8       	ldi	r24, 0x88	; 136
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	0e 94 54 12 	call	0x24a8	; 0x24a8 <LCD_DisplayString>
    315e:	80 e0       	ldi	r24, 0x00	; 0
    3160:	90 e0       	ldi	r25, 0x00	; 0
    3162:	aa e7       	ldi	r26, 0x7A	; 122
    3164:	b4 e4       	ldi	r27, 0x44	; 68
    3166:	8b 87       	std	Y+11, r24	; 0x0b
    3168:	9c 87       	std	Y+12, r25	; 0x0c
    316a:	ad 87       	std	Y+13, r26	; 0x0d
    316c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    316e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3170:	7c 85       	ldd	r23, Y+12	; 0x0c
    3172:	8d 85       	ldd	r24, Y+13	; 0x0d
    3174:	9e 85       	ldd	r25, Y+14	; 0x0e
    3176:	20 e0       	ldi	r18, 0x00	; 0
    3178:	30 e0       	ldi	r19, 0x00	; 0
    317a:	4a ef       	ldi	r20, 0xFA	; 250
    317c:	54 e4       	ldi	r21, 0x44	; 68
    317e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3182:	dc 01       	movw	r26, r24
    3184:	cb 01       	movw	r24, r22
    3186:	8f 83       	std	Y+7, r24	; 0x07
    3188:	98 87       	std	Y+8, r25	; 0x08
    318a:	a9 87       	std	Y+9, r26	; 0x09
    318c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    318e:	6f 81       	ldd	r22, Y+7	; 0x07
    3190:	78 85       	ldd	r23, Y+8	; 0x08
    3192:	89 85       	ldd	r24, Y+9	; 0x09
    3194:	9a 85       	ldd	r25, Y+10	; 0x0a
    3196:	20 e0       	ldi	r18, 0x00	; 0
    3198:	30 e0       	ldi	r19, 0x00	; 0
    319a:	40 e8       	ldi	r20, 0x80	; 128
    319c:	5f e3       	ldi	r21, 0x3F	; 63
    319e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31a2:	88 23       	and	r24, r24
    31a4:	2c f4       	brge	.+10     	; 0x31b0 <change_pass+0x198>
		__ticks = 1;
    31a6:	81 e0       	ldi	r24, 0x01	; 1
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	9e 83       	std	Y+6, r25	; 0x06
    31ac:	8d 83       	std	Y+5, r24	; 0x05
    31ae:	3f c0       	rjmp	.+126    	; 0x322e <change_pass+0x216>
	else if (__tmp > 65535)
    31b0:	6f 81       	ldd	r22, Y+7	; 0x07
    31b2:	78 85       	ldd	r23, Y+8	; 0x08
    31b4:	89 85       	ldd	r24, Y+9	; 0x09
    31b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    31b8:	20 e0       	ldi	r18, 0x00	; 0
    31ba:	3f ef       	ldi	r19, 0xFF	; 255
    31bc:	4f e7       	ldi	r20, 0x7F	; 127
    31be:	57 e4       	ldi	r21, 0x47	; 71
    31c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31c4:	18 16       	cp	r1, r24
    31c6:	4c f5       	brge	.+82     	; 0x321a <change_pass+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    31ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    31cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    31ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    31d0:	20 e0       	ldi	r18, 0x00	; 0
    31d2:	30 e0       	ldi	r19, 0x00	; 0
    31d4:	40 e2       	ldi	r20, 0x20	; 32
    31d6:	51 e4       	ldi	r21, 0x41	; 65
    31d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31dc:	dc 01       	movw	r26, r24
    31de:	cb 01       	movw	r24, r22
    31e0:	bc 01       	movw	r22, r24
    31e2:	cd 01       	movw	r24, r26
    31e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e8:	dc 01       	movw	r26, r24
    31ea:	cb 01       	movw	r24, r22
    31ec:	9e 83       	std	Y+6, r25	; 0x06
    31ee:	8d 83       	std	Y+5, r24	; 0x05
    31f0:	0f c0       	rjmp	.+30     	; 0x3210 <change_pass+0x1f8>
    31f2:	88 ec       	ldi	r24, 0xC8	; 200
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	9c 83       	std	Y+4, r25	; 0x04
    31f8:	8b 83       	std	Y+3, r24	; 0x03
    31fa:	8b 81       	ldd	r24, Y+3	; 0x03
    31fc:	9c 81       	ldd	r25, Y+4	; 0x04
    31fe:	01 97       	sbiw	r24, 0x01	; 1
    3200:	f1 f7       	brne	.-4      	; 0x31fe <change_pass+0x1e6>
    3202:	9c 83       	std	Y+4, r25	; 0x04
    3204:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3206:	8d 81       	ldd	r24, Y+5	; 0x05
    3208:	9e 81       	ldd	r25, Y+6	; 0x06
    320a:	01 97       	sbiw	r24, 0x01	; 1
    320c:	9e 83       	std	Y+6, r25	; 0x06
    320e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3210:	8d 81       	ldd	r24, Y+5	; 0x05
    3212:	9e 81       	ldd	r25, Y+6	; 0x06
    3214:	00 97       	sbiw	r24, 0x00	; 0
    3216:	69 f7       	brne	.-38     	; 0x31f2 <change_pass+0x1da>
    3218:	14 c0       	rjmp	.+40     	; 0x3242 <change_pass+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    321a:	6f 81       	ldd	r22, Y+7	; 0x07
    321c:	78 85       	ldd	r23, Y+8	; 0x08
    321e:	89 85       	ldd	r24, Y+9	; 0x09
    3220:	9a 85       	ldd	r25, Y+10	; 0x0a
    3222:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3226:	dc 01       	movw	r26, r24
    3228:	cb 01       	movw	r24, r22
    322a:	9e 83       	std	Y+6, r25	; 0x06
    322c:	8d 83       	std	Y+5, r24	; 0x05
    322e:	8d 81       	ldd	r24, Y+5	; 0x05
    3230:	9e 81       	ldd	r25, Y+6	; 0x06
    3232:	9a 83       	std	Y+2, r25	; 0x02
    3234:	89 83       	std	Y+1, r24	; 0x01
    3236:	89 81       	ldd	r24, Y+1	; 0x01
    3238:	9a 81       	ldd	r25, Y+2	; 0x02
    323a:	01 97       	sbiw	r24, 0x01	; 1
    323c:	f1 f7       	brne	.-4      	; 0x323a <change_pass+0x222>
    323e:	9a 83       	std	Y+2, r25	; 0x02
    3240:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			buzzer_handling();
    3242:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <buzzer_handling>
			break;
		}
		if (flag==1){
    3246:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3248:	81 30       	cpi	r24, 0x01	; 1
    324a:	11 f4       	brne	.+4      	; 0x3250 <change_pass+0x238>
			flag=0;
    324c:	1f 8e       	std	Y+31, r1	; 0x1f
    324e:	07 c0       	rjmp	.+14     	; 0x325e <change_pass+0x246>
	return (key);
}
void change_pass(void) {
	uint8 flag=0;
	uint8 key;
	for (uint8 i=0;i<3;i++){
    3250:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3252:	8f 5f       	subi	r24, 0xFF	; 255
    3254:	8d 8f       	std	Y+29, r24	; 0x1d
    3256:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3258:	83 30       	cpi	r24, 0x03	; 3
    325a:	08 f4       	brcc	.+2      	; 0x325e <change_pass+0x246>
    325c:	ea ce       	rjmp	.-556    	; 0x3032 <change_pass+0x1a>
			flag=0;
			break;
		}

	}
}
    325e:	a1 96       	adiw	r28, 0x21	; 33
    3260:	0f b6       	in	r0, 0x3f	; 63
    3262:	f8 94       	cli
    3264:	de bf       	out	0x3e, r29	; 62
    3266:	0f be       	out	0x3f, r0	; 63
    3268:	cd bf       	out	0x3d, r28	; 61
    326a:	cf 91       	pop	r28
    326c:	df 91       	pop	r29
    326e:	08 95       	ret

00003270 <handle_enigne>:

void handle_enigne(void) {
    3270:	df 93       	push	r29
    3272:	cf 93       	push	r28
    3274:	cd b7       	in	r28, 0x3d	; 61
    3276:	de b7       	in	r29, 0x3e	; 62
    3278:	a1 97       	sbiw	r28, 0x21	; 33
    327a:	0f b6       	in	r0, 0x3f	; 63
    327c:	f8 94       	cli
    327e:	de bf       	out	0x3e, r29	; 62
    3280:	0f be       	out	0x3f, r0	; 63
    3282:	cd bf       	out	0x3d, r28	; 61
	uint8 flag = 0;
    3284:	1f 8e       	std	Y+31, r1	; 0x1f
	uint8 checker=0;
    3286:	1e 8e       	std	Y+30, r1	; 0x1e
	for (uint8 i = 0; i < 3; i++) {
    3288:	1d 8e       	std	Y+29, r1	; 0x1d
    328a:	15 c1       	rjmp	.+554    	; 0x34b6 <handle_enigne+0x246>

		checker= check_pass();
    328c:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <check_pass>
    3290:	8e 8f       	std	Y+30, r24	; 0x1e

		switch (checker) {
    3292:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3294:	28 2f       	mov	r18, r24
    3296:	30 e0       	ldi	r19, 0x00	; 0
    3298:	39 a3       	std	Y+33, r19	; 0x21
    329a:	28 a3       	std	Y+32, r18	; 0x20
    329c:	88 a1       	ldd	r24, Y+32	; 0x20
    329e:	99 a1       	ldd	r25, Y+33	; 0x21
    32a0:	84 30       	cpi	r24, 0x04	; 4
    32a2:	91 05       	cpc	r25, r1
    32a4:	31 f0       	breq	.+12     	; 0x32b2 <handle_enigne+0x42>
    32a6:	28 a1       	ldd	r18, Y+32	; 0x20
    32a8:	39 a1       	ldd	r19, Y+33	; 0x21
    32aa:	26 30       	cpi	r18, 0x06	; 6
    32ac:	31 05       	cpc	r19, r1
    32ae:	79 f0       	breq	.+30     	; 0x32ce <handle_enigne+0x5e>
    32b0:	fa c0       	rjmp	.+500    	; 0x34a6 <handle_enigne+0x236>
		case CORRECT:
			Buzzer_Flag = 0;
    32b2:	10 92 d9 01 	sts	0x01D9, r1
			flag = 1;
    32b6:	81 e0       	ldi	r24, 0x01	; 1
    32b8:	8f 8f       	std	Y+31, r24	; 0x1f
			UART_sendByte(OPENENGINE);
    32ba:	83 e0       	ldi	r24, 0x03	; 3
    32bc:	0e 94 a7 07 	call	0xf4e	; 0xf4e <UART_sendByte>
			LCD_clearScreen();
    32c0:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <LCD_clearScreen>
			LCD_DisplayString("Engine is ON");
    32c4:	82 e9       	ldi	r24, 0x92	; 146
    32c6:	90 e0       	ldi	r25, 0x00	; 0
    32c8:	0e 94 54 12 	call	0x24a8	; 0x24a8 <LCD_DisplayString>
    32cc:	ec c0       	rjmp	.+472    	; 0x34a6 <handle_enigne+0x236>

			break;
		case WRONG:
			LCD_clearScreen();
    32ce:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <LCD_clearScreen>
			LCD_DisplayString("Try again");
    32d2:	88 e8       	ldi	r24, 0x88	; 136
    32d4:	90 e0       	ldi	r25, 0x00	; 0
    32d6:	0e 94 54 12 	call	0x24a8	; 0x24a8 <LCD_DisplayString>
    32da:	80 e0       	ldi	r24, 0x00	; 0
    32dc:	90 e0       	ldi	r25, 0x00	; 0
    32de:	aa e7       	ldi	r26, 0x7A	; 122
    32e0:	b4 e4       	ldi	r27, 0x44	; 68
    32e2:	89 8f       	std	Y+25, r24	; 0x19
    32e4:	9a 8f       	std	Y+26, r25	; 0x1a
    32e6:	ab 8f       	std	Y+27, r26	; 0x1b
    32e8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32ea:	69 8d       	ldd	r22, Y+25	; 0x19
    32ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32f2:	20 e0       	ldi	r18, 0x00	; 0
    32f4:	30 e0       	ldi	r19, 0x00	; 0
    32f6:	4a ef       	ldi	r20, 0xFA	; 250
    32f8:	54 e4       	ldi	r21, 0x44	; 68
    32fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32fe:	dc 01       	movw	r26, r24
    3300:	cb 01       	movw	r24, r22
    3302:	8d 8b       	std	Y+21, r24	; 0x15
    3304:	9e 8b       	std	Y+22, r25	; 0x16
    3306:	af 8b       	std	Y+23, r26	; 0x17
    3308:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    330a:	6d 89       	ldd	r22, Y+21	; 0x15
    330c:	7e 89       	ldd	r23, Y+22	; 0x16
    330e:	8f 89       	ldd	r24, Y+23	; 0x17
    3310:	98 8d       	ldd	r25, Y+24	; 0x18
    3312:	20 e0       	ldi	r18, 0x00	; 0
    3314:	30 e0       	ldi	r19, 0x00	; 0
    3316:	40 e8       	ldi	r20, 0x80	; 128
    3318:	5f e3       	ldi	r21, 0x3F	; 63
    331a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    331e:	88 23       	and	r24, r24
    3320:	2c f4       	brge	.+10     	; 0x332c <handle_enigne+0xbc>
		__ticks = 1;
    3322:	81 e0       	ldi	r24, 0x01	; 1
    3324:	90 e0       	ldi	r25, 0x00	; 0
    3326:	9c 8b       	std	Y+20, r25	; 0x14
    3328:	8b 8b       	std	Y+19, r24	; 0x13
    332a:	3f c0       	rjmp	.+126    	; 0x33aa <handle_enigne+0x13a>
	else if (__tmp > 65535)
    332c:	6d 89       	ldd	r22, Y+21	; 0x15
    332e:	7e 89       	ldd	r23, Y+22	; 0x16
    3330:	8f 89       	ldd	r24, Y+23	; 0x17
    3332:	98 8d       	ldd	r25, Y+24	; 0x18
    3334:	20 e0       	ldi	r18, 0x00	; 0
    3336:	3f ef       	ldi	r19, 0xFF	; 255
    3338:	4f e7       	ldi	r20, 0x7F	; 127
    333a:	57 e4       	ldi	r21, 0x47	; 71
    333c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3340:	18 16       	cp	r1, r24
    3342:	4c f5       	brge	.+82     	; 0x3396 <handle_enigne+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3344:	69 8d       	ldd	r22, Y+25	; 0x19
    3346:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3348:	8b 8d       	ldd	r24, Y+27	; 0x1b
    334a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    334c:	20 e0       	ldi	r18, 0x00	; 0
    334e:	30 e0       	ldi	r19, 0x00	; 0
    3350:	40 e2       	ldi	r20, 0x20	; 32
    3352:	51 e4       	ldi	r21, 0x41	; 65
    3354:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3358:	dc 01       	movw	r26, r24
    335a:	cb 01       	movw	r24, r22
    335c:	bc 01       	movw	r22, r24
    335e:	cd 01       	movw	r24, r26
    3360:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3364:	dc 01       	movw	r26, r24
    3366:	cb 01       	movw	r24, r22
    3368:	9c 8b       	std	Y+20, r25	; 0x14
    336a:	8b 8b       	std	Y+19, r24	; 0x13
    336c:	0f c0       	rjmp	.+30     	; 0x338c <handle_enigne+0x11c>
    336e:	88 ec       	ldi	r24, 0xC8	; 200
    3370:	90 e0       	ldi	r25, 0x00	; 0
    3372:	9a 8b       	std	Y+18, r25	; 0x12
    3374:	89 8b       	std	Y+17, r24	; 0x11
    3376:	89 89       	ldd	r24, Y+17	; 0x11
    3378:	9a 89       	ldd	r25, Y+18	; 0x12
    337a:	01 97       	sbiw	r24, 0x01	; 1
    337c:	f1 f7       	brne	.-4      	; 0x337a <handle_enigne+0x10a>
    337e:	9a 8b       	std	Y+18, r25	; 0x12
    3380:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3382:	8b 89       	ldd	r24, Y+19	; 0x13
    3384:	9c 89       	ldd	r25, Y+20	; 0x14
    3386:	01 97       	sbiw	r24, 0x01	; 1
    3388:	9c 8b       	std	Y+20, r25	; 0x14
    338a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    338c:	8b 89       	ldd	r24, Y+19	; 0x13
    338e:	9c 89       	ldd	r25, Y+20	; 0x14
    3390:	00 97       	sbiw	r24, 0x00	; 0
    3392:	69 f7       	brne	.-38     	; 0x336e <handle_enigne+0xfe>
    3394:	14 c0       	rjmp	.+40     	; 0x33be <handle_enigne+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3396:	6d 89       	ldd	r22, Y+21	; 0x15
    3398:	7e 89       	ldd	r23, Y+22	; 0x16
    339a:	8f 89       	ldd	r24, Y+23	; 0x17
    339c:	98 8d       	ldd	r25, Y+24	; 0x18
    339e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33a2:	dc 01       	movw	r26, r24
    33a4:	cb 01       	movw	r24, r22
    33a6:	9c 8b       	std	Y+20, r25	; 0x14
    33a8:	8b 8b       	std	Y+19, r24	; 0x13
    33aa:	8b 89       	ldd	r24, Y+19	; 0x13
    33ac:	9c 89       	ldd	r25, Y+20	; 0x14
    33ae:	98 8b       	std	Y+16, r25	; 0x10
    33b0:	8f 87       	std	Y+15, r24	; 0x0f
    33b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    33b4:	98 89       	ldd	r25, Y+16	; 0x10
    33b6:	01 97       	sbiw	r24, 0x01	; 1
    33b8:	f1 f7       	brne	.-4      	; 0x33b6 <handle_enigne+0x146>
    33ba:	98 8b       	std	Y+16, r25	; 0x10
    33bc:	8f 87       	std	Y+15, r24	; 0x0f
    33be:	80 e0       	ldi	r24, 0x00	; 0
    33c0:	90 e0       	ldi	r25, 0x00	; 0
    33c2:	aa ef       	ldi	r26, 0xFA	; 250
    33c4:	b3 e4       	ldi	r27, 0x43	; 67
    33c6:	8b 87       	std	Y+11, r24	; 0x0b
    33c8:	9c 87       	std	Y+12, r25	; 0x0c
    33ca:	ad 87       	std	Y+13, r26	; 0x0d
    33cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    33d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    33d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    33d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    33d6:	20 e0       	ldi	r18, 0x00	; 0
    33d8:	30 e0       	ldi	r19, 0x00	; 0
    33da:	4a ef       	ldi	r20, 0xFA	; 250
    33dc:	54 e4       	ldi	r21, 0x44	; 68
    33de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e2:	dc 01       	movw	r26, r24
    33e4:	cb 01       	movw	r24, r22
    33e6:	8f 83       	std	Y+7, r24	; 0x07
    33e8:	98 87       	std	Y+8, r25	; 0x08
    33ea:	a9 87       	std	Y+9, r26	; 0x09
    33ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33ee:	6f 81       	ldd	r22, Y+7	; 0x07
    33f0:	78 85       	ldd	r23, Y+8	; 0x08
    33f2:	89 85       	ldd	r24, Y+9	; 0x09
    33f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    33f6:	20 e0       	ldi	r18, 0x00	; 0
    33f8:	30 e0       	ldi	r19, 0x00	; 0
    33fa:	40 e8       	ldi	r20, 0x80	; 128
    33fc:	5f e3       	ldi	r21, 0x3F	; 63
    33fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3402:	88 23       	and	r24, r24
    3404:	2c f4       	brge	.+10     	; 0x3410 <handle_enigne+0x1a0>
		__ticks = 1;
    3406:	81 e0       	ldi	r24, 0x01	; 1
    3408:	90 e0       	ldi	r25, 0x00	; 0
    340a:	9e 83       	std	Y+6, r25	; 0x06
    340c:	8d 83       	std	Y+5, r24	; 0x05
    340e:	3f c0       	rjmp	.+126    	; 0x348e <handle_enigne+0x21e>
	else if (__tmp > 65535)
    3410:	6f 81       	ldd	r22, Y+7	; 0x07
    3412:	78 85       	ldd	r23, Y+8	; 0x08
    3414:	89 85       	ldd	r24, Y+9	; 0x09
    3416:	9a 85       	ldd	r25, Y+10	; 0x0a
    3418:	20 e0       	ldi	r18, 0x00	; 0
    341a:	3f ef       	ldi	r19, 0xFF	; 255
    341c:	4f e7       	ldi	r20, 0x7F	; 127
    341e:	57 e4       	ldi	r21, 0x47	; 71
    3420:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3424:	18 16       	cp	r1, r24
    3426:	4c f5       	brge	.+82     	; 0x347a <handle_enigne+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3428:	6b 85       	ldd	r22, Y+11	; 0x0b
    342a:	7c 85       	ldd	r23, Y+12	; 0x0c
    342c:	8d 85       	ldd	r24, Y+13	; 0x0d
    342e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3430:	20 e0       	ldi	r18, 0x00	; 0
    3432:	30 e0       	ldi	r19, 0x00	; 0
    3434:	40 e2       	ldi	r20, 0x20	; 32
    3436:	51 e4       	ldi	r21, 0x41	; 65
    3438:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    343c:	dc 01       	movw	r26, r24
    343e:	cb 01       	movw	r24, r22
    3440:	bc 01       	movw	r22, r24
    3442:	cd 01       	movw	r24, r26
    3444:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3448:	dc 01       	movw	r26, r24
    344a:	cb 01       	movw	r24, r22
    344c:	9e 83       	std	Y+6, r25	; 0x06
    344e:	8d 83       	std	Y+5, r24	; 0x05
    3450:	0f c0       	rjmp	.+30     	; 0x3470 <handle_enigne+0x200>
    3452:	88 ec       	ldi	r24, 0xC8	; 200
    3454:	90 e0       	ldi	r25, 0x00	; 0
    3456:	9c 83       	std	Y+4, r25	; 0x04
    3458:	8b 83       	std	Y+3, r24	; 0x03
    345a:	8b 81       	ldd	r24, Y+3	; 0x03
    345c:	9c 81       	ldd	r25, Y+4	; 0x04
    345e:	01 97       	sbiw	r24, 0x01	; 1
    3460:	f1 f7       	brne	.-4      	; 0x345e <handle_enigne+0x1ee>
    3462:	9c 83       	std	Y+4, r25	; 0x04
    3464:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3466:	8d 81       	ldd	r24, Y+5	; 0x05
    3468:	9e 81       	ldd	r25, Y+6	; 0x06
    346a:	01 97       	sbiw	r24, 0x01	; 1
    346c:	9e 83       	std	Y+6, r25	; 0x06
    346e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3470:	8d 81       	ldd	r24, Y+5	; 0x05
    3472:	9e 81       	ldd	r25, Y+6	; 0x06
    3474:	00 97       	sbiw	r24, 0x00	; 0
    3476:	69 f7       	brne	.-38     	; 0x3452 <handle_enigne+0x1e2>
    3478:	14 c0       	rjmp	.+40     	; 0x34a2 <handle_enigne+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    347a:	6f 81       	ldd	r22, Y+7	; 0x07
    347c:	78 85       	ldd	r23, Y+8	; 0x08
    347e:	89 85       	ldd	r24, Y+9	; 0x09
    3480:	9a 85       	ldd	r25, Y+10	; 0x0a
    3482:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3486:	dc 01       	movw	r26, r24
    3488:	cb 01       	movw	r24, r22
    348a:	9e 83       	std	Y+6, r25	; 0x06
    348c:	8d 83       	std	Y+5, r24	; 0x05
    348e:	8d 81       	ldd	r24, Y+5	; 0x05
    3490:	9e 81       	ldd	r25, Y+6	; 0x06
    3492:	9a 83       	std	Y+2, r25	; 0x02
    3494:	89 83       	std	Y+1, r24	; 0x01
    3496:	89 81       	ldd	r24, Y+1	; 0x01
    3498:	9a 81       	ldd	r25, Y+2	; 0x02
    349a:	01 97       	sbiw	r24, 0x01	; 1
    349c:	f1 f7       	brne	.-4      	; 0x349a <handle_enigne+0x22a>
    349e:	9a 83       	std	Y+2, r25	; 0x02
    34a0:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			_delay_ms(500);
			buzzer_handling();
    34a2:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <buzzer_handling>

			break;
		}

		if (flag == 1) {
    34a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34a8:	81 30       	cpi	r24, 0x01	; 1
    34aa:	11 f4       	brne	.+4      	; 0x34b0 <handle_enigne+0x240>
			flag = 0;
    34ac:	1f 8e       	std	Y+31, r1	; 0x1f
    34ae:	07 c0       	rjmp	.+14     	; 0x34be <handle_enigne+0x24e>
}

void handle_enigne(void) {
	uint8 flag = 0;
	uint8 checker=0;
	for (uint8 i = 0; i < 3; i++) {
    34b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34b2:	8f 5f       	subi	r24, 0xFF	; 255
    34b4:	8d 8f       	std	Y+29, r24	; 0x1d
    34b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34b8:	83 30       	cpi	r24, 0x03	; 3
    34ba:	08 f4       	brcc	.+2      	; 0x34be <handle_enigne+0x24e>
    34bc:	e7 ce       	rjmp	.-562    	; 0x328c <handle_enigne+0x1c>
		if (flag == 1) {
			flag = 0;
			break;
		}
	}
}
    34be:	a1 96       	adiw	r28, 0x21	; 33
    34c0:	0f b6       	in	r0, 0x3f	; 63
    34c2:	f8 94       	cli
    34c4:	de bf       	out	0x3e, r29	; 62
    34c6:	0f be       	out	0x3f, r0	; 63
    34c8:	cd bf       	out	0x3d, r28	; 61
    34ca:	cf 91       	pop	r28
    34cc:	df 91       	pop	r29
    34ce:	08 95       	ret

000034d0 <options>:
void options(void) {
    34d0:	df 93       	push	r29
    34d2:	cf 93       	push	r28
    34d4:	cd b7       	in	r28, 0x3d	; 61
    34d6:	de b7       	in	r29, 0x3e	; 62
    34d8:	6e 97       	sbiw	r28, 0x1e	; 30
    34da:	0f b6       	in	r0, 0x3f	; 63
    34dc:	f8 94       	cli
    34de:	de bf       	out	0x3e, r29	; 62
    34e0:	0f be       	out	0x3f, r0	; 63
    34e2:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    34e4:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "+:Turn on Engine");
    34e8:	2f e9       	ldi	r18, 0x9F	; 159
    34ea:	30 e0       	ldi	r19, 0x00	; 0
    34ec:	80 e0       	ldi	r24, 0x00	; 0
    34ee:	60 e0       	ldi	r22, 0x00	; 0
    34f0:	a9 01       	movw	r20, r18
    34f2:	0e 94 bf 12 	call	0x257e	; 0x257e <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "-:Change Pass");
    34f6:	20 eb       	ldi	r18, 0xB0	; 176
    34f8:	30 e0       	ldi	r19, 0x00	; 0
    34fa:	81 e0       	ldi	r24, 0x01	; 1
    34fc:	60 e0       	ldi	r22, 0x00	; 0
    34fe:	a9 01       	movw	r20, r18
    3500:	0e 94 bf 12 	call	0x257e	; 0x257e <LCD_displayStringRowColumn>

	switch (KEYPAD_getPressedKey()) {
    3504:	0e 94 05 13 	call	0x260a	; 0x260a <KEYPAD_getPressedKey>
    3508:	28 2f       	mov	r18, r24
    350a:	30 e0       	ldi	r19, 0x00	; 0
    350c:	3e 8f       	std	Y+30, r19	; 0x1e
    350e:	2d 8f       	std	Y+29, r18	; 0x1d
    3510:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3512:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3514:	8b 32       	cpi	r24, 0x2B	; 43
    3516:	91 05       	cpc	r25, r1
    3518:	09 f4       	brne	.+2      	; 0x351c <options+0x4c>
    351a:	7b c0       	rjmp	.+246    	; 0x3612 <options+0x142>
    351c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    351e:	3e 8d       	ldd	r19, Y+30	; 0x1e
    3520:	2d 32       	cpi	r18, 0x2D	; 45
    3522:	31 05       	cpc	r19, r1
    3524:	09 f0       	breq	.+2      	; 0x3528 <options+0x58>
    3526:	ea c0       	rjmp	.+468    	; 0x36fc <options+0x22c>
    3528:	80 e0       	ldi	r24, 0x00	; 0
    352a:	90 e0       	ldi	r25, 0x00	; 0
    352c:	aa ef       	ldi	r26, 0xFA	; 250
    352e:	b3 e4       	ldi	r27, 0x43	; 67
    3530:	89 8f       	std	Y+25, r24	; 0x19
    3532:	9a 8f       	std	Y+26, r25	; 0x1a
    3534:	ab 8f       	std	Y+27, r26	; 0x1b
    3536:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3538:	69 8d       	ldd	r22, Y+25	; 0x19
    353a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    353c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    353e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3540:	20 e0       	ldi	r18, 0x00	; 0
    3542:	30 e0       	ldi	r19, 0x00	; 0
    3544:	4a ef       	ldi	r20, 0xFA	; 250
    3546:	54 e4       	ldi	r21, 0x44	; 68
    3548:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    354c:	dc 01       	movw	r26, r24
    354e:	cb 01       	movw	r24, r22
    3550:	8d 8b       	std	Y+21, r24	; 0x15
    3552:	9e 8b       	std	Y+22, r25	; 0x16
    3554:	af 8b       	std	Y+23, r26	; 0x17
    3556:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3558:	6d 89       	ldd	r22, Y+21	; 0x15
    355a:	7e 89       	ldd	r23, Y+22	; 0x16
    355c:	8f 89       	ldd	r24, Y+23	; 0x17
    355e:	98 8d       	ldd	r25, Y+24	; 0x18
    3560:	20 e0       	ldi	r18, 0x00	; 0
    3562:	30 e0       	ldi	r19, 0x00	; 0
    3564:	40 e8       	ldi	r20, 0x80	; 128
    3566:	5f e3       	ldi	r21, 0x3F	; 63
    3568:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    356c:	88 23       	and	r24, r24
    356e:	2c f4       	brge	.+10     	; 0x357a <options+0xaa>
		__ticks = 1;
    3570:	81 e0       	ldi	r24, 0x01	; 1
    3572:	90 e0       	ldi	r25, 0x00	; 0
    3574:	9c 8b       	std	Y+20, r25	; 0x14
    3576:	8b 8b       	std	Y+19, r24	; 0x13
    3578:	3f c0       	rjmp	.+126    	; 0x35f8 <options+0x128>
	else if (__tmp > 65535)
    357a:	6d 89       	ldd	r22, Y+21	; 0x15
    357c:	7e 89       	ldd	r23, Y+22	; 0x16
    357e:	8f 89       	ldd	r24, Y+23	; 0x17
    3580:	98 8d       	ldd	r25, Y+24	; 0x18
    3582:	20 e0       	ldi	r18, 0x00	; 0
    3584:	3f ef       	ldi	r19, 0xFF	; 255
    3586:	4f e7       	ldi	r20, 0x7F	; 127
    3588:	57 e4       	ldi	r21, 0x47	; 71
    358a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    358e:	18 16       	cp	r1, r24
    3590:	4c f5       	brge	.+82     	; 0x35e4 <options+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3592:	69 8d       	ldd	r22, Y+25	; 0x19
    3594:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3596:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3598:	9c 8d       	ldd	r25, Y+28	; 0x1c
    359a:	20 e0       	ldi	r18, 0x00	; 0
    359c:	30 e0       	ldi	r19, 0x00	; 0
    359e:	40 e2       	ldi	r20, 0x20	; 32
    35a0:	51 e4       	ldi	r21, 0x41	; 65
    35a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35a6:	dc 01       	movw	r26, r24
    35a8:	cb 01       	movw	r24, r22
    35aa:	bc 01       	movw	r22, r24
    35ac:	cd 01       	movw	r24, r26
    35ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35b2:	dc 01       	movw	r26, r24
    35b4:	cb 01       	movw	r24, r22
    35b6:	9c 8b       	std	Y+20, r25	; 0x14
    35b8:	8b 8b       	std	Y+19, r24	; 0x13
    35ba:	0f c0       	rjmp	.+30     	; 0x35da <options+0x10a>
    35bc:	88 ec       	ldi	r24, 0xC8	; 200
    35be:	90 e0       	ldi	r25, 0x00	; 0
    35c0:	9a 8b       	std	Y+18, r25	; 0x12
    35c2:	89 8b       	std	Y+17, r24	; 0x11
    35c4:	89 89       	ldd	r24, Y+17	; 0x11
    35c6:	9a 89       	ldd	r25, Y+18	; 0x12
    35c8:	01 97       	sbiw	r24, 0x01	; 1
    35ca:	f1 f7       	brne	.-4      	; 0x35c8 <options+0xf8>
    35cc:	9a 8b       	std	Y+18, r25	; 0x12
    35ce:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35d0:	8b 89       	ldd	r24, Y+19	; 0x13
    35d2:	9c 89       	ldd	r25, Y+20	; 0x14
    35d4:	01 97       	sbiw	r24, 0x01	; 1
    35d6:	9c 8b       	std	Y+20, r25	; 0x14
    35d8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35da:	8b 89       	ldd	r24, Y+19	; 0x13
    35dc:	9c 89       	ldd	r25, Y+20	; 0x14
    35de:	00 97       	sbiw	r24, 0x00	; 0
    35e0:	69 f7       	brne	.-38     	; 0x35bc <options+0xec>
    35e2:	14 c0       	rjmp	.+40     	; 0x360c <options+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35e4:	6d 89       	ldd	r22, Y+21	; 0x15
    35e6:	7e 89       	ldd	r23, Y+22	; 0x16
    35e8:	8f 89       	ldd	r24, Y+23	; 0x17
    35ea:	98 8d       	ldd	r25, Y+24	; 0x18
    35ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f0:	dc 01       	movw	r26, r24
    35f2:	cb 01       	movw	r24, r22
    35f4:	9c 8b       	std	Y+20, r25	; 0x14
    35f6:	8b 8b       	std	Y+19, r24	; 0x13
    35f8:	8b 89       	ldd	r24, Y+19	; 0x13
    35fa:	9c 89       	ldd	r25, Y+20	; 0x14
    35fc:	98 8b       	std	Y+16, r25	; 0x10
    35fe:	8f 87       	std	Y+15, r24	; 0x0f
    3600:	8f 85       	ldd	r24, Y+15	; 0x0f
    3602:	98 89       	ldd	r25, Y+16	; 0x10
    3604:	01 97       	sbiw	r24, 0x01	; 1
    3606:	f1 f7       	brne	.-4      	; 0x3604 <options+0x134>
    3608:	98 8b       	std	Y+16, r25	; 0x10
    360a:	8f 87       	std	Y+15, r24	; 0x0f

	case '-': //change password
		_delay_ms(500);
		change_pass();
    360c:	0e 94 0c 18 	call	0x3018	; 0x3018 <change_pass>
    3610:	77 c0       	rjmp	.+238    	; 0x3700 <options+0x230>
		break;
    3612:	80 e0       	ldi	r24, 0x00	; 0
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	aa ef       	ldi	r26, 0xFA	; 250
    3618:	b3 e4       	ldi	r27, 0x43	; 67
    361a:	8b 87       	std	Y+11, r24	; 0x0b
    361c:	9c 87       	std	Y+12, r25	; 0x0c
    361e:	ad 87       	std	Y+13, r26	; 0x0d
    3620:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3622:	6b 85       	ldd	r22, Y+11	; 0x0b
    3624:	7c 85       	ldd	r23, Y+12	; 0x0c
    3626:	8d 85       	ldd	r24, Y+13	; 0x0d
    3628:	9e 85       	ldd	r25, Y+14	; 0x0e
    362a:	20 e0       	ldi	r18, 0x00	; 0
    362c:	30 e0       	ldi	r19, 0x00	; 0
    362e:	4a ef       	ldi	r20, 0xFA	; 250
    3630:	54 e4       	ldi	r21, 0x44	; 68
    3632:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3636:	dc 01       	movw	r26, r24
    3638:	cb 01       	movw	r24, r22
    363a:	8f 83       	std	Y+7, r24	; 0x07
    363c:	98 87       	std	Y+8, r25	; 0x08
    363e:	a9 87       	std	Y+9, r26	; 0x09
    3640:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3642:	6f 81       	ldd	r22, Y+7	; 0x07
    3644:	78 85       	ldd	r23, Y+8	; 0x08
    3646:	89 85       	ldd	r24, Y+9	; 0x09
    3648:	9a 85       	ldd	r25, Y+10	; 0x0a
    364a:	20 e0       	ldi	r18, 0x00	; 0
    364c:	30 e0       	ldi	r19, 0x00	; 0
    364e:	40 e8       	ldi	r20, 0x80	; 128
    3650:	5f e3       	ldi	r21, 0x3F	; 63
    3652:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3656:	88 23       	and	r24, r24
    3658:	2c f4       	brge	.+10     	; 0x3664 <options+0x194>
		__ticks = 1;
    365a:	81 e0       	ldi	r24, 0x01	; 1
    365c:	90 e0       	ldi	r25, 0x00	; 0
    365e:	9e 83       	std	Y+6, r25	; 0x06
    3660:	8d 83       	std	Y+5, r24	; 0x05
    3662:	3f c0       	rjmp	.+126    	; 0x36e2 <options+0x212>
	else if (__tmp > 65535)
    3664:	6f 81       	ldd	r22, Y+7	; 0x07
    3666:	78 85       	ldd	r23, Y+8	; 0x08
    3668:	89 85       	ldd	r24, Y+9	; 0x09
    366a:	9a 85       	ldd	r25, Y+10	; 0x0a
    366c:	20 e0       	ldi	r18, 0x00	; 0
    366e:	3f ef       	ldi	r19, 0xFF	; 255
    3670:	4f e7       	ldi	r20, 0x7F	; 127
    3672:	57 e4       	ldi	r21, 0x47	; 71
    3674:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3678:	18 16       	cp	r1, r24
    367a:	4c f5       	brge	.+82     	; 0x36ce <options+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    367c:	6b 85       	ldd	r22, Y+11	; 0x0b
    367e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3680:	8d 85       	ldd	r24, Y+13	; 0x0d
    3682:	9e 85       	ldd	r25, Y+14	; 0x0e
    3684:	20 e0       	ldi	r18, 0x00	; 0
    3686:	30 e0       	ldi	r19, 0x00	; 0
    3688:	40 e2       	ldi	r20, 0x20	; 32
    368a:	51 e4       	ldi	r21, 0x41	; 65
    368c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3690:	dc 01       	movw	r26, r24
    3692:	cb 01       	movw	r24, r22
    3694:	bc 01       	movw	r22, r24
    3696:	cd 01       	movw	r24, r26
    3698:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    369c:	dc 01       	movw	r26, r24
    369e:	cb 01       	movw	r24, r22
    36a0:	9e 83       	std	Y+6, r25	; 0x06
    36a2:	8d 83       	std	Y+5, r24	; 0x05
    36a4:	0f c0       	rjmp	.+30     	; 0x36c4 <options+0x1f4>
    36a6:	88 ec       	ldi	r24, 0xC8	; 200
    36a8:	90 e0       	ldi	r25, 0x00	; 0
    36aa:	9c 83       	std	Y+4, r25	; 0x04
    36ac:	8b 83       	std	Y+3, r24	; 0x03
    36ae:	8b 81       	ldd	r24, Y+3	; 0x03
    36b0:	9c 81       	ldd	r25, Y+4	; 0x04
    36b2:	01 97       	sbiw	r24, 0x01	; 1
    36b4:	f1 f7       	brne	.-4      	; 0x36b2 <options+0x1e2>
    36b6:	9c 83       	std	Y+4, r25	; 0x04
    36b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36ba:	8d 81       	ldd	r24, Y+5	; 0x05
    36bc:	9e 81       	ldd	r25, Y+6	; 0x06
    36be:	01 97       	sbiw	r24, 0x01	; 1
    36c0:	9e 83       	std	Y+6, r25	; 0x06
    36c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36c4:	8d 81       	ldd	r24, Y+5	; 0x05
    36c6:	9e 81       	ldd	r25, Y+6	; 0x06
    36c8:	00 97       	sbiw	r24, 0x00	; 0
    36ca:	69 f7       	brne	.-38     	; 0x36a6 <options+0x1d6>
    36cc:	14 c0       	rjmp	.+40     	; 0x36f6 <options+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36ce:	6f 81       	ldd	r22, Y+7	; 0x07
    36d0:	78 85       	ldd	r23, Y+8	; 0x08
    36d2:	89 85       	ldd	r24, Y+9	; 0x09
    36d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    36d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36da:	dc 01       	movw	r26, r24
    36dc:	cb 01       	movw	r24, r22
    36de:	9e 83       	std	Y+6, r25	; 0x06
    36e0:	8d 83       	std	Y+5, r24	; 0x05
    36e2:	8d 81       	ldd	r24, Y+5	; 0x05
    36e4:	9e 81       	ldd	r25, Y+6	; 0x06
    36e6:	9a 83       	std	Y+2, r25	; 0x02
    36e8:	89 83       	std	Y+1, r24	; 0x01
    36ea:	89 81       	ldd	r24, Y+1	; 0x01
    36ec:	9a 81       	ldd	r25, Y+2	; 0x02
    36ee:	01 97       	sbiw	r24, 0x01	; 1
    36f0:	f1 f7       	brne	.-4      	; 0x36ee <options+0x21e>
    36f2:	9a 83       	std	Y+2, r25	; 0x02
    36f4:	89 83       	std	Y+1, r24	; 0x01
	case '+':
		_delay_ms(500);
		handle_enigne();
    36f6:	0e 94 38 19 	call	0x3270	; 0x3270 <handle_enigne>
    36fa:	02 c0       	rjmp	.+4      	; 0x3700 <options+0x230>
		break;
	default:
		options();
    36fc:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <options>
		break;
	}

}
    3700:	6e 96       	adiw	r28, 0x1e	; 30
    3702:	0f b6       	in	r0, 0x3f	; 63
    3704:	f8 94       	cli
    3706:	de bf       	out	0x3e, r29	; 62
    3708:	0f be       	out	0x3f, r0	; 63
    370a:	cd bf       	out	0x3d, r28	; 61
    370c:	cf 91       	pop	r28
    370e:	df 91       	pop	r29
    3710:	08 95       	ret

00003712 <main>:
 *      Author: merna
 */

#include "APP/himi.h"

int main(void) {
    3712:	df 93       	push	r29
    3714:	cf 93       	push	r28
    3716:	cd b7       	in	r28, 0x3d	; 61
    3718:	de b7       	in	r29, 0x3e	; 62
    371a:	2e 97       	sbiw	r28, 0x0e	; 14
    371c:	0f b6       	in	r0, 0x3f	; 63
    371e:	f8 94       	cli
    3720:	de bf       	out	0x3e, r29	; 62
    3722:	0f be       	out	0x3f, r0	; 63
    3724:	cd bf       	out	0x3d, r28	; 61
	init();
    3726:	0e 94 fd 13 	call	0x27fa	; 0x27fa <init>
    372a:	80 e0       	ldi	r24, 0x00	; 0
    372c:	90 e0       	ldi	r25, 0x00	; 0
    372e:	a8 e4       	ldi	r26, 0x48	; 72
    3730:	b2 e4       	ldi	r27, 0x42	; 66
    3732:	8b 87       	std	Y+11, r24	; 0x0b
    3734:	9c 87       	std	Y+12, r25	; 0x0c
    3736:	ad 87       	std	Y+13, r26	; 0x0d
    3738:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    373a:	6b 85       	ldd	r22, Y+11	; 0x0b
    373c:	7c 85       	ldd	r23, Y+12	; 0x0c
    373e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3740:	9e 85       	ldd	r25, Y+14	; 0x0e
    3742:	20 e0       	ldi	r18, 0x00	; 0
    3744:	30 e0       	ldi	r19, 0x00	; 0
    3746:	4a ef       	ldi	r20, 0xFA	; 250
    3748:	54 e4       	ldi	r21, 0x44	; 68
    374a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    374e:	dc 01       	movw	r26, r24
    3750:	cb 01       	movw	r24, r22
    3752:	8f 83       	std	Y+7, r24	; 0x07
    3754:	98 87       	std	Y+8, r25	; 0x08
    3756:	a9 87       	std	Y+9, r26	; 0x09
    3758:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    375a:	6f 81       	ldd	r22, Y+7	; 0x07
    375c:	78 85       	ldd	r23, Y+8	; 0x08
    375e:	89 85       	ldd	r24, Y+9	; 0x09
    3760:	9a 85       	ldd	r25, Y+10	; 0x0a
    3762:	20 e0       	ldi	r18, 0x00	; 0
    3764:	30 e0       	ldi	r19, 0x00	; 0
    3766:	40 e8       	ldi	r20, 0x80	; 128
    3768:	5f e3       	ldi	r21, 0x3F	; 63
    376a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    376e:	88 23       	and	r24, r24
    3770:	2c f4       	brge	.+10     	; 0x377c <main+0x6a>
		__ticks = 1;
    3772:	81 e0       	ldi	r24, 0x01	; 1
    3774:	90 e0       	ldi	r25, 0x00	; 0
    3776:	9e 83       	std	Y+6, r25	; 0x06
    3778:	8d 83       	std	Y+5, r24	; 0x05
    377a:	3f c0       	rjmp	.+126    	; 0x37fa <main+0xe8>
	else if (__tmp > 65535)
    377c:	6f 81       	ldd	r22, Y+7	; 0x07
    377e:	78 85       	ldd	r23, Y+8	; 0x08
    3780:	89 85       	ldd	r24, Y+9	; 0x09
    3782:	9a 85       	ldd	r25, Y+10	; 0x0a
    3784:	20 e0       	ldi	r18, 0x00	; 0
    3786:	3f ef       	ldi	r19, 0xFF	; 255
    3788:	4f e7       	ldi	r20, 0x7F	; 127
    378a:	57 e4       	ldi	r21, 0x47	; 71
    378c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3790:	18 16       	cp	r1, r24
    3792:	4c f5       	brge	.+82     	; 0x37e6 <main+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3794:	6b 85       	ldd	r22, Y+11	; 0x0b
    3796:	7c 85       	ldd	r23, Y+12	; 0x0c
    3798:	8d 85       	ldd	r24, Y+13	; 0x0d
    379a:	9e 85       	ldd	r25, Y+14	; 0x0e
    379c:	20 e0       	ldi	r18, 0x00	; 0
    379e:	30 e0       	ldi	r19, 0x00	; 0
    37a0:	40 e2       	ldi	r20, 0x20	; 32
    37a2:	51 e4       	ldi	r21, 0x41	; 65
    37a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37a8:	dc 01       	movw	r26, r24
    37aa:	cb 01       	movw	r24, r22
    37ac:	bc 01       	movw	r22, r24
    37ae:	cd 01       	movw	r24, r26
    37b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b4:	dc 01       	movw	r26, r24
    37b6:	cb 01       	movw	r24, r22
    37b8:	9e 83       	std	Y+6, r25	; 0x06
    37ba:	8d 83       	std	Y+5, r24	; 0x05
    37bc:	0f c0       	rjmp	.+30     	; 0x37dc <main+0xca>
    37be:	88 ec       	ldi	r24, 0xC8	; 200
    37c0:	90 e0       	ldi	r25, 0x00	; 0
    37c2:	9c 83       	std	Y+4, r25	; 0x04
    37c4:	8b 83       	std	Y+3, r24	; 0x03
    37c6:	8b 81       	ldd	r24, Y+3	; 0x03
    37c8:	9c 81       	ldd	r25, Y+4	; 0x04
    37ca:	01 97       	sbiw	r24, 0x01	; 1
    37cc:	f1 f7       	brne	.-4      	; 0x37ca <main+0xb8>
    37ce:	9c 83       	std	Y+4, r25	; 0x04
    37d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37d2:	8d 81       	ldd	r24, Y+5	; 0x05
    37d4:	9e 81       	ldd	r25, Y+6	; 0x06
    37d6:	01 97       	sbiw	r24, 0x01	; 1
    37d8:	9e 83       	std	Y+6, r25	; 0x06
    37da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37dc:	8d 81       	ldd	r24, Y+5	; 0x05
    37de:	9e 81       	ldd	r25, Y+6	; 0x06
    37e0:	00 97       	sbiw	r24, 0x00	; 0
    37e2:	69 f7       	brne	.-38     	; 0x37be <main+0xac>
    37e4:	14 c0       	rjmp	.+40     	; 0x380e <main+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37e6:	6f 81       	ldd	r22, Y+7	; 0x07
    37e8:	78 85       	ldd	r23, Y+8	; 0x08
    37ea:	89 85       	ldd	r24, Y+9	; 0x09
    37ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    37ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37f2:	dc 01       	movw	r26, r24
    37f4:	cb 01       	movw	r24, r22
    37f6:	9e 83       	std	Y+6, r25	; 0x06
    37f8:	8d 83       	std	Y+5, r24	; 0x05
    37fa:	8d 81       	ldd	r24, Y+5	; 0x05
    37fc:	9e 81       	ldd	r25, Y+6	; 0x06
    37fe:	9a 83       	std	Y+2, r25	; 0x02
    3800:	89 83       	std	Y+1, r24	; 0x01
    3802:	89 81       	ldd	r24, Y+1	; 0x01
    3804:	9a 81       	ldd	r25, Y+2	; 0x02
    3806:	01 97       	sbiw	r24, 0x01	; 1
    3808:	f1 f7       	brne	.-4      	; 0x3806 <main+0xf4>
    380a:	9a 83       	std	Y+2, r25	; 0x02
    380c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	Enter_Pass();
    380e:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <Enter_Pass>
	options();
    3812:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <options>
    3816:	ff cf       	rjmp	.-2      	; 0x3816 <main+0x104>

00003818 <__udivmodsi4>:
    3818:	a1 e2       	ldi	r26, 0x21	; 33
    381a:	1a 2e       	mov	r1, r26
    381c:	aa 1b       	sub	r26, r26
    381e:	bb 1b       	sub	r27, r27
    3820:	fd 01       	movw	r30, r26
    3822:	0d c0       	rjmp	.+26     	; 0x383e <__udivmodsi4_ep>

00003824 <__udivmodsi4_loop>:
    3824:	aa 1f       	adc	r26, r26
    3826:	bb 1f       	adc	r27, r27
    3828:	ee 1f       	adc	r30, r30
    382a:	ff 1f       	adc	r31, r31
    382c:	a2 17       	cp	r26, r18
    382e:	b3 07       	cpc	r27, r19
    3830:	e4 07       	cpc	r30, r20
    3832:	f5 07       	cpc	r31, r21
    3834:	20 f0       	brcs	.+8      	; 0x383e <__udivmodsi4_ep>
    3836:	a2 1b       	sub	r26, r18
    3838:	b3 0b       	sbc	r27, r19
    383a:	e4 0b       	sbc	r30, r20
    383c:	f5 0b       	sbc	r31, r21

0000383e <__udivmodsi4_ep>:
    383e:	66 1f       	adc	r22, r22
    3840:	77 1f       	adc	r23, r23
    3842:	88 1f       	adc	r24, r24
    3844:	99 1f       	adc	r25, r25
    3846:	1a 94       	dec	r1
    3848:	69 f7       	brne	.-38     	; 0x3824 <__udivmodsi4_loop>
    384a:	60 95       	com	r22
    384c:	70 95       	com	r23
    384e:	80 95       	com	r24
    3850:	90 95       	com	r25
    3852:	9b 01       	movw	r18, r22
    3854:	ac 01       	movw	r20, r24
    3856:	bd 01       	movw	r22, r26
    3858:	cf 01       	movw	r24, r30
    385a:	08 95       	ret

0000385c <__prologue_saves__>:
    385c:	2f 92       	push	r2
    385e:	3f 92       	push	r3
    3860:	4f 92       	push	r4
    3862:	5f 92       	push	r5
    3864:	6f 92       	push	r6
    3866:	7f 92       	push	r7
    3868:	8f 92       	push	r8
    386a:	9f 92       	push	r9
    386c:	af 92       	push	r10
    386e:	bf 92       	push	r11
    3870:	cf 92       	push	r12
    3872:	df 92       	push	r13
    3874:	ef 92       	push	r14
    3876:	ff 92       	push	r15
    3878:	0f 93       	push	r16
    387a:	1f 93       	push	r17
    387c:	cf 93       	push	r28
    387e:	df 93       	push	r29
    3880:	cd b7       	in	r28, 0x3d	; 61
    3882:	de b7       	in	r29, 0x3e	; 62
    3884:	ca 1b       	sub	r28, r26
    3886:	db 0b       	sbc	r29, r27
    3888:	0f b6       	in	r0, 0x3f	; 63
    388a:	f8 94       	cli
    388c:	de bf       	out	0x3e, r29	; 62
    388e:	0f be       	out	0x3f, r0	; 63
    3890:	cd bf       	out	0x3d, r28	; 61
    3892:	09 94       	ijmp

00003894 <__epilogue_restores__>:
    3894:	2a 88       	ldd	r2, Y+18	; 0x12
    3896:	39 88       	ldd	r3, Y+17	; 0x11
    3898:	48 88       	ldd	r4, Y+16	; 0x10
    389a:	5f 84       	ldd	r5, Y+15	; 0x0f
    389c:	6e 84       	ldd	r6, Y+14	; 0x0e
    389e:	7d 84       	ldd	r7, Y+13	; 0x0d
    38a0:	8c 84       	ldd	r8, Y+12	; 0x0c
    38a2:	9b 84       	ldd	r9, Y+11	; 0x0b
    38a4:	aa 84       	ldd	r10, Y+10	; 0x0a
    38a6:	b9 84       	ldd	r11, Y+9	; 0x09
    38a8:	c8 84       	ldd	r12, Y+8	; 0x08
    38aa:	df 80       	ldd	r13, Y+7	; 0x07
    38ac:	ee 80       	ldd	r14, Y+6	; 0x06
    38ae:	fd 80       	ldd	r15, Y+5	; 0x05
    38b0:	0c 81       	ldd	r16, Y+4	; 0x04
    38b2:	1b 81       	ldd	r17, Y+3	; 0x03
    38b4:	aa 81       	ldd	r26, Y+2	; 0x02
    38b6:	b9 81       	ldd	r27, Y+1	; 0x01
    38b8:	ce 0f       	add	r28, r30
    38ba:	d1 1d       	adc	r29, r1
    38bc:	0f b6       	in	r0, 0x3f	; 63
    38be:	f8 94       	cli
    38c0:	de bf       	out	0x3e, r29	; 62
    38c2:	0f be       	out	0x3f, r0	; 63
    38c4:	cd bf       	out	0x3d, r28	; 61
    38c6:	ed 01       	movw	r28, r26
    38c8:	08 95       	ret

000038ca <itoa>:
    38ca:	fb 01       	movw	r30, r22
    38cc:	9f 01       	movw	r18, r30
    38ce:	e8 94       	clt
    38d0:	42 30       	cpi	r20, 0x02	; 2
    38d2:	c4 f0       	brlt	.+48     	; 0x3904 <itoa+0x3a>
    38d4:	45 32       	cpi	r20, 0x25	; 37
    38d6:	b4 f4       	brge	.+44     	; 0x3904 <itoa+0x3a>
    38d8:	4a 30       	cpi	r20, 0x0A	; 10
    38da:	29 f4       	brne	.+10     	; 0x38e6 <itoa+0x1c>
    38dc:	97 fb       	bst	r25, 7
    38de:	1e f4       	brtc	.+6      	; 0x38e6 <itoa+0x1c>
    38e0:	90 95       	com	r25
    38e2:	81 95       	neg	r24
    38e4:	9f 4f       	sbci	r25, 0xFF	; 255
    38e6:	64 2f       	mov	r22, r20
    38e8:	77 27       	eor	r23, r23
    38ea:	0e 94 96 1c 	call	0x392c	; 0x392c <__udivmodhi4>
    38ee:	80 5d       	subi	r24, 0xD0	; 208
    38f0:	8a 33       	cpi	r24, 0x3A	; 58
    38f2:	0c f0       	brlt	.+2      	; 0x38f6 <itoa+0x2c>
    38f4:	89 5d       	subi	r24, 0xD9	; 217
    38f6:	81 93       	st	Z+, r24
    38f8:	cb 01       	movw	r24, r22
    38fa:	00 97       	sbiw	r24, 0x00	; 0
    38fc:	a1 f7       	brne	.-24     	; 0x38e6 <itoa+0x1c>
    38fe:	16 f4       	brtc	.+4      	; 0x3904 <itoa+0x3a>
    3900:	5d e2       	ldi	r21, 0x2D	; 45
    3902:	51 93       	st	Z+, r21
    3904:	10 82       	st	Z, r1
    3906:	c9 01       	movw	r24, r18
    3908:	0c 94 86 1c 	jmp	0x390c	; 0x390c <strrev>

0000390c <strrev>:
    390c:	dc 01       	movw	r26, r24
    390e:	fc 01       	movw	r30, r24
    3910:	67 2f       	mov	r22, r23
    3912:	71 91       	ld	r23, Z+
    3914:	77 23       	and	r23, r23
    3916:	e1 f7       	brne	.-8      	; 0x3910 <strrev+0x4>
    3918:	32 97       	sbiw	r30, 0x02	; 2
    391a:	04 c0       	rjmp	.+8      	; 0x3924 <strrev+0x18>
    391c:	7c 91       	ld	r23, X
    391e:	6d 93       	st	X+, r22
    3920:	70 83       	st	Z, r23
    3922:	62 91       	ld	r22, -Z
    3924:	ae 17       	cp	r26, r30
    3926:	bf 07       	cpc	r27, r31
    3928:	c8 f3       	brcs	.-14     	; 0x391c <strrev+0x10>
    392a:	08 95       	ret

0000392c <__udivmodhi4>:
    392c:	aa 1b       	sub	r26, r26
    392e:	bb 1b       	sub	r27, r27
    3930:	51 e1       	ldi	r21, 0x11	; 17
    3932:	07 c0       	rjmp	.+14     	; 0x3942 <__udivmodhi4_ep>

00003934 <__udivmodhi4_loop>:
    3934:	aa 1f       	adc	r26, r26
    3936:	bb 1f       	adc	r27, r27
    3938:	a6 17       	cp	r26, r22
    393a:	b7 07       	cpc	r27, r23
    393c:	10 f0       	brcs	.+4      	; 0x3942 <__udivmodhi4_ep>
    393e:	a6 1b       	sub	r26, r22
    3940:	b7 0b       	sbc	r27, r23

00003942 <__udivmodhi4_ep>:
    3942:	88 1f       	adc	r24, r24
    3944:	99 1f       	adc	r25, r25
    3946:	5a 95       	dec	r21
    3948:	a9 f7       	brne	.-22     	; 0x3934 <__udivmodhi4_loop>
    394a:	80 95       	com	r24
    394c:	90 95       	com	r25
    394e:	bc 01       	movw	r22, r24
    3950:	cd 01       	movw	r24, r26
    3952:	08 95       	ret

00003954 <_exit>:
    3954:	f8 94       	cli

00003956 <__stop_program>:
    3956:	ff cf       	rjmp	.-2      	; 0x3956 <__stop_program>
