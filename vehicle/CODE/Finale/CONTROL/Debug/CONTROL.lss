
CONTROL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004c6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011a  00800060  00004c6e  00004d02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  0080017a  0080017a  00004e1c  2**0
                  ALLOC
  3 .stab         00005748  00000000  00000000  00004e1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002ded  00000000  00000000  0000a564  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000d351  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000d4f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000d6e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000faee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00010e74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0001204c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0001220c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00012502  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00012e70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <__vector_10>
      2c:	0c 94 39 08 	jmp	0x1072	; 0x1072 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e6       	ldi	r30, 0x6E	; 110
      68:	fc e4       	ldi	r31, 0x4C	; 76
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 39       	cpi	r26, 0x96	; 150
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 48 24 	call	0x4890	; 0x4890 <main>
      8a:	0c 94 35 26 	jmp	0x4c6a	; 0x4c6a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b9 25 	jmp	0x4b72	; 0x4b72 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e6       	ldi	r26, 0x6A	; 106
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d5 25 	jmp	0x4baa	; 0x4baa <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c5 25 	jmp	0x4b8a	; 0x4b8a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e1 25 	jmp	0x4bc2	; 0x4bc2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c5 25 	jmp	0x4b8a	; 0x4b8a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e1 25 	jmp	0x4bc2	; 0x4bc2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b9 25 	jmp	0x4b72	; 0x4b72 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e6       	ldi	r24, 0x6A	; 106
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d5 25 	jmp	0x4baa	; 0x4baa <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c1 25 	jmp	0x4b82	; 0x4b82 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6a e6       	ldi	r22, 0x6A	; 106
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 dd 25 	jmp	0x4bba	; 0x4bba <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 c5 25 	jmp	0x4b8a	; 0x4b8a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 e1 25 	jmp	0x4bc2	; 0x4bc2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 c5 25 	jmp	0x4b8a	; 0x4b8a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 e1 25 	jmp	0x4bc2	; 0x4bc2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 c5 25 	jmp	0x4b8a	; 0x4b8a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 e1 25 	jmp	0x4bc2	; 0x4bc2 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 c9 25 	jmp	0x4b92	; 0x4b92 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 e5 25 	jmp	0x4bca	; 0x4bca <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 c1 25 	jmp	0x4b82	; 0x4b82 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 dd 25 	jmp	0x4bba	; 0x4bba <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ee 58       	subi	r30, 0x8E	; 142
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(UART_Config *Config_Ptr)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <UART_init+0x6>
     e34:	00 d0       	rcall	.+0      	; 0xe36 <UART_init+0x8>
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	9c 83       	std	Y+4, r25	; 0x04
     e3c:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
     e3e:	1a 82       	std	Y+2, r1	; 0x02
     e40:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
     e42:	eb e2       	ldi	r30, 0x2B	; 43
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	82 e0       	ldi	r24, 0x02	; 2
     e48:	80 83       	st	Z, r24
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 according to the configuration structure
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
     e4a:	ea e2       	ldi	r30, 0x2A	; 42
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	88 e1       	ldi	r24, 0x18	; 24
     e50:	80 83       	st	Z, r24
	UCSRB= (UCSRB&0xFB)| ((Config_Ptr->frame)&0b100);
     e52:	aa e2       	ldi	r26, 0x2A	; 42
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	ea e2       	ldi	r30, 0x2A	; 42
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	98 2f       	mov	r25, r24
     e5e:	9b 7f       	andi	r25, 0xFB	; 251
     e60:	eb 81       	ldd	r30, Y+3	; 0x03
     e62:	fc 81       	ldd	r31, Y+4	; 0x04
     e64:	82 81       	ldd	r24, Z+2	; 0x02
     e66:	84 70       	andi	r24, 0x04	; 4
     e68:	89 2b       	or	r24, r25
     e6a:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
     e6c:	e0 e4       	ldi	r30, 0x40	; 64
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 e8       	ldi	r24, 0x80	; 128
     e72:	80 83       	st	Z, r24
	UCSRC= (UCSRC&0xCF) | ((Config_Ptr->parity)<<4);
     e74:	a0 e4       	ldi	r26, 0x40	; 64
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e0 e4       	ldi	r30, 0x40	; 64
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	28 2f       	mov	r18, r24
     e80:	2f 7c       	andi	r18, 0xCF	; 207
     e82:	eb 81       	ldd	r30, Y+3	; 0x03
     e84:	fc 81       	ldd	r31, Y+4	; 0x04
     e86:	80 81       	ld	r24, Z
     e88:	88 2f       	mov	r24, r24
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	82 95       	swap	r24
     e8e:	92 95       	swap	r25
     e90:	90 7f       	andi	r25, 0xF0	; 240
     e92:	98 27       	eor	r25, r24
     e94:	80 7f       	andi	r24, 0xF0	; 240
     e96:	98 27       	eor	r25, r24
     e98:	82 2b       	or	r24, r18
     e9a:	8c 93       	st	X, r24
	UCSRC=(UCSRC&0xF7) | ((Config_Ptr->stop_bit)<<3);
     e9c:	a0 e4       	ldi	r26, 0x40	; 64
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e0 e4       	ldi	r30, 0x40	; 64
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	28 2f       	mov	r18, r24
     ea8:	27 7f       	andi	r18, 0xF7	; 247
     eaa:	eb 81       	ldd	r30, Y+3	; 0x03
     eac:	fc 81       	ldd	r31, Y+4	; 0x04
     eae:	81 81       	ldd	r24, Z+1	; 0x01
     eb0:	88 2f       	mov	r24, r24
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	88 0f       	add	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	88 0f       	add	r24, r24
     eba:	99 1f       	adc	r25, r25
     ebc:	88 0f       	add	r24, r24
     ebe:	99 1f       	adc	r25, r25
     ec0:	82 2b       	or	r24, r18
     ec2:	8c 93       	st	X, r24
	UCSRC=(UCSRC&0xF9) | (((Config_Ptr->frame)&0x011)<<1);
     ec4:	a0 e4       	ldi	r26, 0x40	; 64
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e0 e4       	ldi	r30, 0x40	; 64
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	28 2f       	mov	r18, r24
     ed0:	29 7f       	andi	r18, 0xF9	; 249
     ed2:	eb 81       	ldd	r30, Y+3	; 0x03
     ed4:	fc 81       	ldd	r31, Y+4	; 0x04
     ed6:	82 81       	ldd	r24, Z+2	; 0x02
     ed8:	88 2f       	mov	r24, r24
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	81 71       	andi	r24, 0x11	; 17
     ede:	90 70       	andi	r25, 0x00	; 0
     ee0:	88 0f       	add	r24, r24
     ee2:	99 1f       	adc	r25, r25
     ee4:	82 2b       	or	r24, r18
     ee6:	8c 93       	st	X, r24
//	UCSRC = (1<<URSEL) |((Config_Ptr->parity & 0x03)<<UPM0)|((Config_Ptr->stop_bit & 0x01)<<USBS)|
	//		(Config_Ptr->frame);
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
     ee8:	eb 81       	ldd	r30, Y+3	; 0x03
     eea:	fc 81       	ldd	r31, Y+4	; 0x04
     eec:	83 81       	ldd	r24, Z+3	; 0x03
     eee:	94 81       	ldd	r25, Z+4	; 0x04
     ef0:	a5 81       	ldd	r26, Z+5	; 0x05
     ef2:	b6 81       	ldd	r27, Z+6	; 0x06
     ef4:	88 0f       	add	r24, r24
     ef6:	99 1f       	adc	r25, r25
     ef8:	aa 1f       	adc	r26, r26
     efa:	bb 1f       	adc	r27, r27
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	aa 1f       	adc	r26, r26
     f02:	bb 1f       	adc	r27, r27
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	aa 1f       	adc	r26, r26
     f0a:	bb 1f       	adc	r27, r27
     f0c:	9c 01       	movw	r18, r24
     f0e:	ad 01       	movw	r20, r26
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	92 e1       	ldi	r25, 0x12	; 18
     f14:	aa e7       	ldi	r26, 0x7A	; 122
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	bc 01       	movw	r22, r24
     f1a:	cd 01       	movw	r24, r26
     f1c:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__udivmodsi4>
     f20:	da 01       	movw	r26, r20
     f22:	c9 01       	movw	r24, r18
     f24:	01 97       	sbiw	r24, 0x01	; 1
     f26:	9a 83       	std	Y+2, r25	; 0x02
     f28:	89 83       	std	Y+1, r24	; 0x01
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
     f2a:	e0 e4       	ldi	r30, 0x40	; 64
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	89 81       	ldd	r24, Y+1	; 0x01
     f30:	9a 81       	ldd	r25, Y+2	; 0x02
     f32:	89 2f       	mov	r24, r25
     f34:	99 27       	eor	r25, r25
     f36:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     f38:	e9 e2       	ldi	r30, 0x29	; 41
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	80 83       	st	Z, r24
}
     f40:	0f 90       	pop	r0
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	08 95       	ret

00000f4e <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
     f4e:	df 93       	push	r29
     f50:	cf 93       	push	r28
     f52:	0f 92       	push	r0
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62
     f58:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     f5a:	eb e2       	ldi	r30, 0x2B	; 43
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	88 2f       	mov	r24, r24
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	80 72       	andi	r24, 0x20	; 32
     f66:	90 70       	andi	r25, 0x00	; 0
     f68:	00 97       	sbiw	r24, 0x00	; 0
     f6a:	b9 f3       	breq	.-18     	; 0xf5a <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
     f6c:	ec e2       	ldi	r30, 0x2C	; 44
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	89 81       	ldd	r24, Y+1	; 0x01
     f72:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
     f74:	0f 90       	pop	r0
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	08 95       	ret

00000f7c <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     f84:	eb e2       	ldi	r30, 0x2B	; 43
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	88 23       	and	r24, r24
     f8c:	dc f7       	brge	.-10     	; 0xf84 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
     f8e:	ec e2       	ldi	r30, 0x2C	; 44
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
}
     f94:	cf 91       	pop	r28
     f96:	df 91       	pop	r29
     f98:	08 95       	ret

00000f9a <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
     f9a:	df 93       	push	r29
     f9c:	cf 93       	push	r28
     f9e:	00 d0       	rcall	.+0      	; 0xfa0 <UART_sendString+0x6>
     fa0:	0f 92       	push	r0
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
     fa6:	9b 83       	std	Y+3, r25	; 0x03
     fa8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     faa:	19 82       	std	Y+1, r1	; 0x01
     fac:	0e c0       	rjmp	.+28     	; 0xfca <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	9b 81       	ldd	r25, Y+3	; 0x03
     fb8:	fc 01       	movw	r30, r24
     fba:	e2 0f       	add	r30, r18
     fbc:	f3 1f       	adc	r31, r19
     fbe:	80 81       	ld	r24, Z
     fc0:	0e 94 a7 07 	call	0xf4e	; 0xf4e <UART_sendByte>
		i++;
     fc4:	89 81       	ldd	r24, Y+1	; 0x01
     fc6:	8f 5f       	subi	r24, 0xFF	; 255
     fc8:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
     fca:	89 81       	ldd	r24, Y+1	; 0x01
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	8a 81       	ldd	r24, Y+2	; 0x02
     fd2:	9b 81       	ldd	r25, Y+3	; 0x03
     fd4:	fc 01       	movw	r30, r24
     fd6:	e2 0f       	add	r30, r18
     fd8:	f3 1f       	adc	r31, r19
     fda:	80 81       	ld	r24, Z
     fdc:	88 23       	and	r24, r24
     fde:	39 f7       	brne	.-50     	; 0xfae <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
     fe0:	0f 90       	pop	r0
     fe2:	0f 90       	pop	r0
     fe4:	0f 90       	pop	r0
     fe6:	cf 91       	pop	r28
     fe8:	df 91       	pop	r29
     fea:	08 95       	ret

00000fec <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
     fec:	0f 93       	push	r16
     fee:	1f 93       	push	r17
     ff0:	df 93       	push	r29
     ff2:	cf 93       	push	r28
     ff4:	00 d0       	rcall	.+0      	; 0xff6 <UART_receiveString+0xa>
     ff6:	0f 92       	push	r0
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
     ffc:	9b 83       	std	Y+3, r25	; 0x03
     ffe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1000:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	8a 81       	ldd	r24, Y+2	; 0x02
    100a:	9b 81       	ldd	r25, Y+3	; 0x03
    100c:	8c 01       	movw	r16, r24
    100e:	02 0f       	add	r16, r18
    1010:	13 1f       	adc	r17, r19
    1012:	0e 94 be 07 	call	0xf7c	; 0xf7c <UART_recieveByte>
    1016:	f8 01       	movw	r30, r16
    1018:	80 83       	st	Z, r24
    101a:	0f c0       	rjmp	.+30     	; 0x103a <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    101c:	89 81       	ldd	r24, Y+1	; 0x01
    101e:	8f 5f       	subi	r24, 0xFF	; 255
    1020:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	8a 81       	ldd	r24, Y+2	; 0x02
    102a:	9b 81       	ldd	r25, Y+3	; 0x03
    102c:	8c 01       	movw	r16, r24
    102e:	02 0f       	add	r16, r18
    1030:	13 1f       	adc	r17, r19
    1032:	0e 94 be 07 	call	0xf7c	; 0xf7c <UART_recieveByte>
    1036:	f8 01       	movw	r30, r16
    1038:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	8a 81       	ldd	r24, Y+2	; 0x02
    1042:	9b 81       	ldd	r25, Y+3	; 0x03
    1044:	fc 01       	movw	r30, r24
    1046:	e2 0f       	add	r30, r18
    1048:	f3 1f       	adc	r31, r19
    104a:	80 81       	ld	r24, Z
    104c:	83 32       	cpi	r24, 0x23	; 35
    104e:	31 f7       	brne	.-52     	; 0x101c <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	9b 81       	ldd	r25, Y+3	; 0x03
    105a:	fc 01       	movw	r30, r24
    105c:	e2 0f       	add	r30, r18
    105e:	f3 1f       	adc	r31, r19
    1060:	10 82       	st	Z, r1
}
    1062:	0f 90       	pop	r0
    1064:	0f 90       	pop	r0
    1066:	0f 90       	pop	r0
    1068:	cf 91       	pop	r28
    106a:	df 91       	pop	r29
    106c:	1f 91       	pop	r17
    106e:	0f 91       	pop	r16
    1070:	08 95       	ret

00001072 <__vector_11>:
#define NULL_PTR ((void*)0)

uint32 g_tick;

ISR(TIMER0_OVF_vect)
{
    1072:	1f 92       	push	r1
    1074:	0f 92       	push	r0
    1076:	0f b6       	in	r0, 0x3f	; 63
    1078:	0f 92       	push	r0
    107a:	11 24       	eor	r1, r1
    107c:	2f 93       	push	r18
    107e:	3f 93       	push	r19
    1080:	4f 93       	push	r20
    1082:	5f 93       	push	r21
    1084:	6f 93       	push	r22
    1086:	7f 93       	push	r23
    1088:	8f 93       	push	r24
    108a:	9f 93       	push	r25
    108c:	af 93       	push	r26
    108e:	bf 93       	push	r27
    1090:	ef 93       	push	r30
    1092:	ff 93       	push	r31
    1094:	df 93       	push	r29
    1096:	cf 93       	push	r28
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_CALLBACK_Fptr != NULL_PTR)
    109c:	80 91 7a 01 	lds	r24, 0x017A
    10a0:	90 91 7b 01 	lds	r25, 0x017B
    10a4:	00 97       	sbiw	r24, 0x00	; 0
    10a6:	29 f0       	breq	.+10     	; 0x10b2 <__vector_11+0x40>
	{
		(*Timer0_CALLBACK_Fptr)();
    10a8:	e0 91 7a 01 	lds	r30, 0x017A
    10ac:	f0 91 7b 01 	lds	r31, 0x017B
    10b0:	09 95       	icall
	}
}
    10b2:	cf 91       	pop	r28
    10b4:	df 91       	pop	r29
    10b6:	ff 91       	pop	r31
    10b8:	ef 91       	pop	r30
    10ba:	bf 91       	pop	r27
    10bc:	af 91       	pop	r26
    10be:	9f 91       	pop	r25
    10c0:	8f 91       	pop	r24
    10c2:	7f 91       	pop	r23
    10c4:	6f 91       	pop	r22
    10c6:	5f 91       	pop	r21
    10c8:	4f 91       	pop	r20
    10ca:	3f 91       	pop	r19
    10cc:	2f 91       	pop	r18
    10ce:	0f 90       	pop	r0
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	0f 90       	pop	r0
    10d4:	1f 90       	pop	r1
    10d6:	18 95       	reti

000010d8 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    10d8:	1f 92       	push	r1
    10da:	0f 92       	push	r0
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	0f 92       	push	r0
    10e0:	11 24       	eor	r1, r1
    10e2:	2f 93       	push	r18
    10e4:	3f 93       	push	r19
    10e6:	4f 93       	push	r20
    10e8:	5f 93       	push	r21
    10ea:	6f 93       	push	r22
    10ec:	7f 93       	push	r23
    10ee:	8f 93       	push	r24
    10f0:	9f 93       	push	r25
    10f2:	af 93       	push	r26
    10f4:	bf 93       	push	r27
    10f6:	ef 93       	push	r30
    10f8:	ff 93       	push	r31
    10fa:	df 93       	push	r29
    10fc:	cf 93       	push	r28
    10fe:	cd b7       	in	r28, 0x3d	; 61
    1100:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_CALLBACK_Fptr != NULL_PTR)
    1102:	80 91 7a 01 	lds	r24, 0x017A
    1106:	90 91 7b 01 	lds	r25, 0x017B
    110a:	00 97       	sbiw	r24, 0x00	; 0
    110c:	29 f0       	breq	.+10     	; 0x1118 <__vector_10+0x40>
	{
		(*Timer0_CALLBACK_Fptr)();
    110e:	e0 91 7a 01 	lds	r30, 0x017A
    1112:	f0 91 7b 01 	lds	r31, 0x017B
    1116:	09 95       	icall
	}
}
    1118:	cf 91       	pop	r28
    111a:	df 91       	pop	r29
    111c:	ff 91       	pop	r31
    111e:	ef 91       	pop	r30
    1120:	bf 91       	pop	r27
    1122:	af 91       	pop	r26
    1124:	9f 91       	pop	r25
    1126:	8f 91       	pop	r24
    1128:	7f 91       	pop	r23
    112a:	6f 91       	pop	r22
    112c:	5f 91       	pop	r21
    112e:	4f 91       	pop	r20
    1130:	3f 91       	pop	r19
    1132:	2f 91       	pop	r18
    1134:	0f 90       	pop	r0
    1136:	0f be       	out	0x3f, r0	; 63
    1138:	0f 90       	pop	r0
    113a:	1f 90       	pop	r1
    113c:	18 95       	reti

0000113e <Timer0_init>:


void Timer0_init(const Timer0_ConfigType * Config_Ptr)
{
    113e:	df 93       	push	r29
    1140:	cf 93       	push	r28
    1142:	00 d0       	rcall	.+0      	; 0x1144 <Timer0_init+0x6>
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62
    1148:	9a 83       	std	Y+2, r25	; 0x02
    114a:	89 83       	std	Y+1, r24	; 0x01

	TCCR0 = Config_Ptr->prescaler;
    114c:	a3 e5       	ldi	r26, 0x53	; 83
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	e9 81       	ldd	r30, Y+1	; 0x01
    1152:	fa 81       	ldd	r31, Y+2	; 0x02
    1154:	85 81       	ldd	r24, Z+5	; 0x05
    1156:	8c 93       	st	X, r24
	TCNT0 = Config_Ptr->initial_value;
    1158:	a2 e5       	ldi	r26, 0x52	; 82
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e9 81       	ldd	r30, Y+1	; 0x01
    115e:	fa 81       	ldd	r31, Y+2	; 0x02
    1160:	80 81       	ld	r24, Z
    1162:	91 81       	ldd	r25, Z+1	; 0x01
    1164:	8c 93       	st	X, r24
	SET_BIT(TCCR0,FOC0);
    1166:	a3 e5       	ldi	r26, 0x53	; 83
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	e3 e5       	ldi	r30, 0x53	; 83
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	80 68       	ori	r24, 0x80	; 128
    1172:	8c 93       	st	X, r24
	TIMSK |= (1<<TOIE0)|(1<<Config_Ptr->mode);//enable interrupt
    1174:	a9 e5       	ldi	r26, 0x59	; 89
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	e9 e5       	ldi	r30, 0x59	; 89
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	48 2f       	mov	r20, r24
    1180:	e9 81       	ldd	r30, Y+1	; 0x01
    1182:	fa 81       	ldd	r31, Y+2	; 0x02
    1184:	84 81       	ldd	r24, Z+4	; 0x04
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	02 2e       	mov	r0, r18
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <Timer0_init+0x58>
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	0a 94       	dec	r0
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <Timer0_init+0x54>
    119a:	81 60       	ori	r24, 0x01	; 1
    119c:	84 2b       	or	r24, r20
    119e:	8c 93       	st	X, r24
	SET_BIT(TIMSK,TOIE0);
    11a0:	a9 e5       	ldi	r26, 0x59	; 89
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	e9 e5       	ldi	r30, 0x59	; 89
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	81 60       	ori	r24, 0x01	; 1
    11ac:	8c 93       	st	X, r24



}
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	08 95       	ret

000011b8 <Timer0_deInit>:

void Timer0_deInit(void)
{
    11b8:	df 93       	push	r29
    11ba:	cf 93       	push	r28
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;
    11c0:	e3 e5       	ldi	r30, 0x53	; 83
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	10 82       	st	Z, r1
	TCNT0 = 0;
    11c6:	e2 e5       	ldi	r30, 0x52	; 82
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,TOIE0);
    11cc:	a9 e5       	ldi	r26, 0x59	; 89
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	e9 e5       	ldi	r30, 0x59	; 89
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	8e 7f       	andi	r24, 0xFE	; 254
    11d8:	8c 93       	st	X, r24
	CLEAR_BIT(TIFR,TOV0);
    11da:	a8 e5       	ldi	r26, 0x58	; 88
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e8 e5       	ldi	r30, 0x58	; 88
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	8e 7f       	andi	r24, 0xFE	; 254
    11e6:	8c 93       	st	X, r24
	OCR0 = 0;
    11e8:	ec e5       	ldi	r30, 0x5C	; 92
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,OCIE0);
    11ee:	a9 e5       	ldi	r26, 0x59	; 89
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	e9 e5       	ldi	r30, 0x59	; 89
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	8d 7f       	andi	r24, 0xFD	; 253
    11fa:	8c 93       	st	X, r24
	CLEAR_BIT(TIFR,OCF0);
    11fc:	a8 e5       	ldi	r26, 0x58	; 88
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	e8 e5       	ldi	r30, 0x58	; 88
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	8d 7f       	andi	r24, 0xFD	; 253
    1208:	8c 93       	st	X, r24
	Timer0_CALLBACK_Fptr = NULL_PTR;
    120a:	10 92 7b 01 	sts	0x017B, r1
    120e:	10 92 7a 01 	sts	0x017A, r1
}
    1212:	cf 91       	pop	r28
    1214:	df 91       	pop	r29
    1216:	08 95       	ret

00001218 <Delay_Timer>:




void Delay_Timer(uint32 seconds)
{
    1218:	df 93       	push	r29
    121a:	cf 93       	push	r28
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
    1220:	28 97       	sbiw	r28, 0x08	; 8
    1222:	0f b6       	in	r0, 0x3f	; 63
    1224:	f8 94       	cli
    1226:	de bf       	out	0x3e, r29	; 62
    1228:	0f be       	out	0x3f, r0	; 63
    122a:	cd bf       	out	0x3d, r28	; 61
    122c:	6d 83       	std	Y+5, r22	; 0x05
    122e:	7e 83       	std	Y+6, r23	; 0x06
    1230:	8f 83       	std	Y+7, r24	; 0x07
    1232:	98 87       	std	Y+8, r25	; 0x08
	g_tick = 0;
    1234:	10 92 81 01 	sts	0x0181, r1
    1238:	10 92 82 01 	sts	0x0182, r1
    123c:	10 92 83 01 	sts	0x0183, r1
    1240:	10 92 84 01 	sts	0x0184, r1
	uint32 tick = seconds;
    1244:	8d 81       	ldd	r24, Y+5	; 0x05
    1246:	9e 81       	ldd	r25, Y+6	; 0x06
    1248:	af 81       	ldd	r26, Y+7	; 0x07
    124a:	b8 85       	ldd	r27, Y+8	; 0x08
    124c:	89 83       	std	Y+1, r24	; 0x01
    124e:	9a 83       	std	Y+2, r25	; 0x02
    1250:	ab 83       	std	Y+3, r26	; 0x03
    1252:	bc 83       	std	Y+4, r27	; 0x04
	Timer0_setCallBack(&timer0_tick);
    1254:	8a e4       	ldi	r24, 0x4A	; 74
    1256:	99 e0       	ldi	r25, 0x09	; 9
    1258:	0e 94 64 09 	call	0x12c8	; 0x12c8 <Timer0_setCallBack>
	while(g_tick  < tick);
    125c:	20 91 81 01 	lds	r18, 0x0181
    1260:	30 91 82 01 	lds	r19, 0x0182
    1264:	40 91 83 01 	lds	r20, 0x0183
    1268:	50 91 84 01 	lds	r21, 0x0184
    126c:	89 81       	ldd	r24, Y+1	; 0x01
    126e:	9a 81       	ldd	r25, Y+2	; 0x02
    1270:	ab 81       	ldd	r26, Y+3	; 0x03
    1272:	bc 81       	ldd	r27, Y+4	; 0x04
    1274:	28 17       	cp	r18, r24
    1276:	39 07       	cpc	r19, r25
    1278:	4a 07       	cpc	r20, r26
    127a:	5b 07       	cpc	r21, r27
    127c:	78 f3       	brcs	.-34     	; 0x125c <Delay_Timer+0x44>
	Timer0_deInit();
    127e:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <Timer0_deInit>
}
    1282:	28 96       	adiw	r28, 0x08	; 8
    1284:	0f b6       	in	r0, 0x3f	; 63
    1286:	f8 94       	cli
    1288:	de bf       	out	0x3e, r29	; 62
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	cd bf       	out	0x3d, r28	; 61
    128e:	cf 91       	pop	r28
    1290:	df 91       	pop	r29
    1292:	08 95       	ret

00001294 <timer0_tick>:

void timer0_tick(void)
{
    1294:	df 93       	push	r29
    1296:	cf 93       	push	r28
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    129c:	80 91 81 01 	lds	r24, 0x0181
    12a0:	90 91 82 01 	lds	r25, 0x0182
    12a4:	a0 91 83 01 	lds	r26, 0x0183
    12a8:	b0 91 84 01 	lds	r27, 0x0184
    12ac:	01 96       	adiw	r24, 0x01	; 1
    12ae:	a1 1d       	adc	r26, r1
    12b0:	b1 1d       	adc	r27, r1
    12b2:	80 93 81 01 	sts	0x0181, r24
    12b6:	90 93 82 01 	sts	0x0182, r25
    12ba:	a0 93 83 01 	sts	0x0183, r26
    12be:	b0 93 84 01 	sts	0x0184, r27
}
    12c2:	cf 91       	pop	r28
    12c4:	df 91       	pop	r29
    12c6:	08 95       	ret

000012c8 <Timer0_setCallBack>:

void Timer0_setCallBack(void(*Copy_pvCallBackFunc)(void))
{
    12c8:	df 93       	push	r29
    12ca:	cf 93       	push	r28
    12cc:	00 d0       	rcall	.+0      	; 0x12ce <Timer0_setCallBack+0x6>
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
    12d2:	9a 83       	std	Y+2, r25	; 0x02
    12d4:	89 83       	std	Y+1, r24	; 0x01
	Timer0_CALLBACK_Fptr=Copy_pvCallBackFunc;
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	9a 81       	ldd	r25, Y+2	; 0x02
    12da:	90 93 7b 01 	sts	0x017B, r25
    12de:	80 93 7a 01 	sts	0x017A, r24
}
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	cf 91       	pop	r28
    12e8:	df 91       	pop	r29
    12ea:	08 95       	ret

000012ec <PWM_Timer0_Start>:

void PWM_Timer0_Start(uint8 duty_cycle)
{
    12ec:	0f 93       	push	r16
    12ee:	1f 93       	push	r17
    12f0:	df 93       	push	r29
    12f2:	cf 93       	push	r28
    12f4:	0f 92       	push	r0
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
    12fa:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 =0;
    12fc:	e2 e5       	ldi	r30, 0x52	; 82
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	10 82       	st	Z, r1
	/*Compare Value*/
	OCR0= ((float)duty_cycle / 100) * 255;
    1302:	0c e5       	ldi	r16, 0x5C	; 92
    1304:	10 e0       	ldi	r17, 0x00	; 0
    1306:	89 81       	ldd	r24, Y+1	; 0x01
    1308:	88 2f       	mov	r24, r24
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	a0 e0       	ldi	r26, 0x00	; 0
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	bc 01       	movw	r22, r24
    1312:	cd 01       	movw	r24, r26
    1314:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1318:	dc 01       	movw	r26, r24
    131a:	cb 01       	movw	r24, r22
    131c:	bc 01       	movw	r22, r24
    131e:	cd 01       	movw	r24, r26
    1320:	20 e0       	ldi	r18, 0x00	; 0
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	48 ec       	ldi	r20, 0xC8	; 200
    1326:	52 e4       	ldi	r21, 0x42	; 66
    1328:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    132c:	dc 01       	movw	r26, r24
    132e:	cb 01       	movw	r24, r22
    1330:	bc 01       	movw	r22, r24
    1332:	cd 01       	movw	r24, r26
    1334:	20 e0       	ldi	r18, 0x00	; 0
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	4f e7       	ldi	r20, 0x7F	; 127
    133a:	53 e4       	ldi	r21, 0x43	; 67
    133c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1340:	dc 01       	movw	r26, r24
    1342:	cb 01       	movw	r24, r22
    1344:	bc 01       	movw	r22, r24
    1346:	cd 01       	movw	r24, r26
    1348:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    134c:	dc 01       	movw	r26, r24
    134e:	cb 01       	movw	r24, r22
    1350:	f8 01       	movw	r30, r16
    1352:	80 83       	st	Z, r24
	/*TIMER0_PIN_ID as output*/
	GPIO_setupPinDirection (TIMER0_PORT_ID,TIMER0_PIN_ID,PIN_OUTPUT);
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	63 e0       	ldi	r22, 0x03	; 3
    1358:	41 e0       	ldi	r20, 0x01	; 1
    135a:	0e 94 b2 0b 	call	0x1764	; 0x1764 <GPIO_setupPinDirection>
	TCCR0 |= (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    135e:	a3 e5       	ldi	r26, 0x53	; 83
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	e3 e5       	ldi	r30, 0x53	; 83
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	8a 66       	ori	r24, 0x6A	; 106
    136a:	8c 93       	st	X, r24
}
    136c:	0f 90       	pop	r0
    136e:	cf 91       	pop	r28
    1370:	df 91       	pop	r29
    1372:	1f 91       	pop	r17
    1374:	0f 91       	pop	r16
    1376:	08 95       	ret

00001378 <__vector_6>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
    1378:	1f 92       	push	r1
    137a:	0f 92       	push	r0
    137c:	0f b6       	in	r0, 0x3f	; 63
    137e:	0f 92       	push	r0
    1380:	11 24       	eor	r1, r1
    1382:	2f 93       	push	r18
    1384:	3f 93       	push	r19
    1386:	4f 93       	push	r20
    1388:	5f 93       	push	r21
    138a:	6f 93       	push	r22
    138c:	7f 93       	push	r23
    138e:	8f 93       	push	r24
    1390:	9f 93       	push	r25
    1392:	af 93       	push	r26
    1394:	bf 93       	push	r27
    1396:	ef 93       	push	r30
    1398:	ff 93       	push	r31
    139a:	df 93       	push	r29
    139c:	cf 93       	push	r28
    139e:	cd b7       	in	r28, 0x3d	; 61
    13a0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    13a2:	80 91 7e 01 	lds	r24, 0x017E
    13a6:	90 91 7f 01 	lds	r25, 0x017F
    13aa:	00 97       	sbiw	r24, 0x00	; 0
    13ac:	29 f0       	breq	.+10     	; 0x13b8 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    13ae:	e0 91 7e 01 	lds	r30, 0x017E
    13b2:	f0 91 7f 01 	lds	r31, 0x017F
    13b6:	09 95       	icall
	}
}
    13b8:	cf 91       	pop	r28
    13ba:	df 91       	pop	r29
    13bc:	ff 91       	pop	r31
    13be:	ef 91       	pop	r30
    13c0:	bf 91       	pop	r27
    13c2:	af 91       	pop	r26
    13c4:	9f 91       	pop	r25
    13c6:	8f 91       	pop	r24
    13c8:	7f 91       	pop	r23
    13ca:	6f 91       	pop	r22
    13cc:	5f 91       	pop	r21
    13ce:	4f 91       	pop	r20
    13d0:	3f 91       	pop	r19
    13d2:	2f 91       	pop	r18
    13d4:	0f 90       	pop	r0
    13d6:	0f be       	out	0x3f, r0	; 63
    13d8:	0f 90       	pop	r0
    13da:	1f 90       	pop	r1
    13dc:	18 95       	reti

000013de <Icu_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void Icu_init( Icu_ConfigType * Config_Ptr)
{
    13de:	df 93       	push	r29
    13e0:	cf 93       	push	r28
    13e2:	00 d0       	rcall	.+0      	; 0x13e4 <Icu_init+0x6>
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
    13e8:	9a 83       	std	Y+2, r25	; 0x02
    13ea:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as i/p pin */
	DDRD &= ~(1<<PD6);
    13ec:	a1 e3       	ldi	r26, 0x31	; 49
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	e1 e3       	ldi	r30, 0x31	; 49
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	8f 7b       	andi	r24, 0xBF	; 191
    13f8:	8c 93       	st	X, r24

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    13fa:	ef e4       	ldi	r30, 0x4F	; 79
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	8c e0       	ldi	r24, 0x0C	; 12
    1400:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
    1402:	ae e4       	ldi	r26, 0x4E	; 78
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	ee e4       	ldi	r30, 0x4E	; 78
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	98 2f       	mov	r25, r24
    140e:	98 7f       	andi	r25, 0xF8	; 248
    1410:	e9 81       	ldd	r30, Y+1	; 0x01
    1412:	fa 81       	ldd	r31, Y+2	; 0x02
    1414:	80 81       	ld	r24, Z
    1416:	89 2b       	or	r24, r25
    1418:	8c 93       	st	X, r24
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
    141a:	ae e4       	ldi	r26, 0x4E	; 78
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	ee e4       	ldi	r30, 0x4E	; 78
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	28 2f       	mov	r18, r24
    1426:	2f 7b       	andi	r18, 0xBF	; 191
    1428:	e9 81       	ldd	r30, Y+1	; 0x01
    142a:	fa 81       	ldd	r31, Y+2	; 0x02
    142c:	81 81       	ldd	r24, Z+1	; 0x01
    142e:	88 2f       	mov	r24, r24
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	00 24       	eor	r0, r0
    1434:	96 95       	lsr	r25
    1436:	87 95       	ror	r24
    1438:	07 94       	ror	r0
    143a:	96 95       	lsr	r25
    143c:	87 95       	ror	r24
    143e:	07 94       	ror	r0
    1440:	98 2f       	mov	r25, r24
    1442:	80 2d       	mov	r24, r0
    1444:	82 2b       	or	r24, r18
    1446:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
    1448:	ec e4       	ldi	r30, 0x4C	; 76
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	11 82       	std	Z+1, r1	; 0x01
    144e:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
    1450:	e6 e4       	ldi	r30, 0x46	; 70
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	11 82       	std	Z+1, r1	; 0x01
    1456:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
    1458:	a9 e5       	ldi	r26, 0x59	; 89
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	e9 e5       	ldi	r30, 0x59	; 89
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	80 62       	ori	r24, 0x20	; 32
    1464:	8c 93       	st	X, r24
}
    1466:	0f 90       	pop	r0
    1468:	0f 90       	pop	r0
    146a:	cf 91       	pop	r28
    146c:	df 91       	pop	r29
    146e:	08 95       	ret

00001470 <Icu_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Icu_setCallBack(void(*a_ptr)(void))
{
    1470:	df 93       	push	r29
    1472:	cf 93       	push	r28
    1474:	00 d0       	rcall	.+0      	; 0x1476 <Icu_setCallBack+0x6>
    1476:	cd b7       	in	r28, 0x3d	; 61
    1478:	de b7       	in	r29, 0x3e	; 62
    147a:	9a 83       	std	Y+2, r25	; 0x02
    147c:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	9a 81       	ldd	r25, Y+2	; 0x02
    1482:	90 93 7f 01 	sts	0x017F, r25
    1486:	80 93 7e 01 	sts	0x017E, r24
}
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	cf 91       	pop	r28
    1490:	df 91       	pop	r29
    1492:	08 95       	ret

00001494 <Icu_setEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void Icu_setEdgeDetectionType(const Icu_EdgeType a_edgeType)
{
    1494:	df 93       	push	r29
    1496:	cf 93       	push	r28
    1498:	0f 92       	push	r0
    149a:	cd b7       	in	r28, 0x3d	; 61
    149c:	de b7       	in	r29, 0x3e	; 62
    149e:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
    14a0:	ae e4       	ldi	r26, 0x4E	; 78
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	ee e4       	ldi	r30, 0x4E	; 78
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	28 2f       	mov	r18, r24
    14ac:	2f 7b       	andi	r18, 0xBF	; 191
    14ae:	89 81       	ldd	r24, Y+1	; 0x01
    14b0:	88 2f       	mov	r24, r24
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	00 24       	eor	r0, r0
    14b6:	96 95       	lsr	r25
    14b8:	87 95       	ror	r24
    14ba:	07 94       	ror	r0
    14bc:	96 95       	lsr	r25
    14be:	87 95       	ror	r24
    14c0:	07 94       	ror	r0
    14c2:	98 2f       	mov	r25, r24
    14c4:	80 2d       	mov	r24, r0
    14c6:	82 2b       	or	r24, r18
    14c8:	8c 93       	st	X, r24
}
    14ca:	0f 90       	pop	r0
    14cc:	cf 91       	pop	r28
    14ce:	df 91       	pop	r29
    14d0:	08 95       	ret

000014d2 <Icu_getInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 Icu_getInputCaptureValue(void)
{
    14d2:	df 93       	push	r29
    14d4:	cf 93       	push	r28
    14d6:	cd b7       	in	r28, 0x3d	; 61
    14d8:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    14da:	e6 e4       	ldi	r30, 0x46	; 70
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	91 81       	ldd	r25, Z+1	; 0x01
}
    14e2:	cf 91       	pop	r28
    14e4:	df 91       	pop	r29
    14e6:	08 95       	ret

000014e8 <Icu_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void Icu_clearTimerValue(void)
{
    14e8:	df 93       	push	r29
    14ea:	cf 93       	push	r28
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    14f0:	ec e4       	ldi	r30, 0x4C	; 76
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	11 82       	std	Z+1, r1	; 0x01
    14f6:	10 82       	st	Z, r1
}
    14f8:	cf 91       	pop	r28
    14fa:	df 91       	pop	r29
    14fc:	08 95       	ret

000014fe <Icu_DeInit>:

/*
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void Icu_DeInit(void)
{
    14fe:	df 93       	push	r29
    1500:	cf 93       	push	r28
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    1506:	ef e4       	ldi	r30, 0x4F	; 79
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	10 82       	st	Z, r1
	TCCR1B = 0;
    150c:	ee e4       	ldi	r30, 0x4E	; 78
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	10 82       	st	Z, r1
	TCNT1 = 0;
    1512:	ec e4       	ldi	r30, 0x4C	; 76
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	11 82       	std	Z+1, r1	; 0x01
    1518:	10 82       	st	Z, r1
	ICR1 = 0;
    151a:	e6 e4       	ldi	r30, 0x46	; 70
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	11 82       	std	Z+1, r1	; 0x01
    1520:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
    1522:	a9 e5       	ldi	r26, 0x59	; 89
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	e9 e5       	ldi	r30, 0x59	; 89
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	8f 7d       	andi	r24, 0xDF	; 223
    152e:	8c 93       	st	X, r24
}
    1530:	cf 91       	pop	r28
    1532:	df 91       	pop	r29
    1534:	08 95       	ret

00001536 <TWI_init>:

#include "../../LIB/common_macros.h"
#include <avr/io.h>

void TWI_init(uint8 Copy_uint8MasterAddress)
{
    1536:	df 93       	push	r29
    1538:	cf 93       	push	r28
    153a:	0f 92       	push	r0
    153c:	cd b7       	in	r28, 0x3d	; 61
    153e:	de b7       	in	r29, 0x3e	; 62
    1540:	89 83       	std	Y+1, r24	; 0x01
	/* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz
	 * ((8000000/400.000)-16)/2
	 * 2
	 * */
	TWBR = 0x02;
    1542:	e0 e2       	ldi	r30, 0x20	; 32
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	82 e0       	ldi	r24, 0x02	; 2
    1548:	80 83       	st	Z, r24
	TWSR = 0x00;
    154a:	e1 e2       	ldi	r30, 0x21	; 33
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	10 82       	st	Z, r1

	/* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
	if(Copy_uint8MasterAddress!=0)
    1550:	89 81       	ldd	r24, Y+1	; 0x01
    1552:	88 23       	and	r24, r24
    1554:	29 f0       	breq	.+10     	; 0x1560 <TWI_init+0x2a>
	{
		TWAR=Copy_uint8MasterAddress<<1;
    1556:	e2 e2       	ldi	r30, 0x22	; 34
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	89 81       	ldd	r24, Y+1	; 0x01
    155c:	88 0f       	add	r24, r24
    155e:	80 83       	st	Z, r24
	} // my address = 0x01 :)

	TWCR = (1<<TWEN); /* enable TWI */
    1560:	e6 e5       	ldi	r30, 0x56	; 86
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	84 e0       	ldi	r24, 0x04	; 4
    1566:	80 83       	st	Z, r24
	//Enable Ack
	SET_BIT(TWCR,6);
    1568:	a6 e5       	ldi	r26, 0x56	; 86
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	e6 e5       	ldi	r30, 0x56	; 86
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	80 64       	ori	r24, 0x40	; 64
    1574:	8c 93       	st	X, r24
}
    1576:	0f 90       	pop	r0
    1578:	cf 91       	pop	r28
    157a:	df 91       	pop	r29
    157c:	08 95       	ret

0000157e <TWI_voidSlaveInit>:

void TWI_voidSlaveInit(uint8 Copy_uint8SlaveAddress)
{
    157e:	df 93       	push	r29
    1580:	cf 93       	push	r28
    1582:	0f 92       	push	r0
    1584:	cd b7       	in	r28, 0x3d	; 61
    1586:	de b7       	in	r29, 0x3e	; 62
    1588:	89 83       	std	Y+1, r24	; 0x01
	/*Initialization the node address*/
	TWAR=Copy_uint8SlaveAddress<<1;
    158a:	e2 e2       	ldi	r30, 0x22	; 34
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	88 0f       	add	r24, r24
    1592:	80 83       	st	Z, r24
	/*Enable TWI*/
	SET_BIT(TWCR,TWEN);
    1594:	a6 e5       	ldi	r26, 0x56	; 86
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	e6 e5       	ldi	r30, 0x56	; 86
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	84 60       	ori	r24, 0x04	; 4
    15a0:	8c 93       	st	X, r24
}
    15a2:	0f 90       	pop	r0
    15a4:	cf 91       	pop	r28
    15a6:	df 91       	pop	r29
    15a8:	08 95       	ret

000015aa <TWI_start>:
void TWI_start(void)
{
    15aa:	df 93       	push	r29
    15ac:	cf 93       	push	r28
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    15b2:	e6 e5       	ldi	r30, 0x56	; 86
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	84 ea       	ldi	r24, 0xA4	; 164
    15b8:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    15ba:	e6 e5       	ldi	r30, 0x56	; 86
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	88 23       	and	r24, r24
    15c2:	dc f7       	brge	.-10     	; 0x15ba <TWI_start+0x10>
}
    15c4:	cf 91       	pop	r28
    15c6:	df 91       	pop	r29
    15c8:	08 95       	ret

000015ca <TWI_stop>:

void TWI_stop(void)
{
    15ca:	df 93       	push	r29
    15cc:	cf 93       	push	r28
    15ce:	cd b7       	in	r28, 0x3d	; 61
    15d0:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    15d2:	e6 e5       	ldi	r30, 0x56	; 86
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	84 e9       	ldi	r24, 0x94	; 148
    15d8:	80 83       	st	Z, r24
}
    15da:	cf 91       	pop	r28
    15dc:	df 91       	pop	r29
    15de:	08 95       	ret

000015e0 <I2C_SendSlaveAddressWithWrite>:

I2C_ErrorState I2C_SendSlaveAddressWithWrite(uint8 Copy_u8SlaveAddress)
{
    15e0:	df 93       	push	r29
    15e2:	cf 93       	push	r28
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <I2C_SendSlaveAddressWithWrite+0x6>
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
    15ea:	8a 83       	std	Y+2, r24	; 0x02

	I2C_ErrorState Local_ErrStatus=NoError;
    15ec:	19 82       	std	Y+1, r1	; 0x01
	/*clear the start condition bit */
	CLEAR_BIT(TWCR,TWSTA);
    15ee:	a6 e5       	ldi	r26, 0x56	; 86
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	e6 e5       	ldi	r30, 0x56	; 86
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	8f 7d       	andi	r24, 0xDF	; 223
    15fa:	8c 93       	st	X, r24
	/*set slave address in the 7 MSB in the data register */
	TWDR=Copy_u8SlaveAddress<<1;
    15fc:	e3 e2       	ldi	r30, 0x23	; 35
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	8a 81       	ldd	r24, Y+2	; 0x02
    1602:	88 0f       	add	r24, r24
    1604:	80 83       	st	Z, r24
	/*write request*/
	CLEAR_BIT(TWDR,0);
    1606:	a3 e2       	ldi	r26, 0x23	; 35
    1608:	b0 e0       	ldi	r27, 0x00	; 0
    160a:	e3 e2       	ldi	r30, 0x23	; 35
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	8e 7f       	andi	r24, 0xFE	; 254
    1612:	8c 93       	st	X, r24
	/*clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWINT);
    1614:	a6 e5       	ldi	r26, 0x56	; 86
    1616:	b0 e0       	ldi	r27, 0x00	; 0
    1618:	e6 e5       	ldi	r30, 0x56	; 86
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	80 68       	ori	r24, 0x80	; 128
    1620:	8c 93       	st	X, r24
	/*wait until the interrupt flag is raised at the previous operation completed*/
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1622:	e6 e5       	ldi	r30, 0x56	; 86
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	88 23       	and	r24, r24
    162a:	dc f7       	brge	.-10     	; 0x1622 <I2C_SendSlaveAddressWithWrite+0x42>
	if((TWSR & 0xF8)!= SLAVE_ADD_AND_WR_ACK)
    162c:	e1 e2       	ldi	r30, 0x21	; 33
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	88 2f       	mov	r24, r24
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	88 7f       	andi	r24, 0xF8	; 248
    1638:	90 70       	andi	r25, 0x00	; 0
    163a:	88 31       	cpi	r24, 0x18	; 24
    163c:	91 05       	cpc	r25, r1
    163e:	11 f0       	breq	.+4      	; 0x1644 <I2C_SendSlaveAddressWithWrite+0x64>
	{
		Local_ErrStatus=SlaveAddressWithWriteErr;
    1640:	83 e0       	ldi	r24, 0x03	; 3
    1642:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrStatus;
    1644:	89 81       	ldd	r24, Y+1	; 0x01
}
    1646:	0f 90       	pop	r0
    1648:	0f 90       	pop	r0
    164a:	cf 91       	pop	r28
    164c:	df 91       	pop	r29
    164e:	08 95       	ret

00001650 <I2C_SendSlaveAddressWithRead>:
I2C_ErrorState I2C_SendSlaveAddressWithRead(uint8 Copy_u8SlaveAddress)
{
    1650:	df 93       	push	r29
    1652:	cf 93       	push	r28
    1654:	00 d0       	rcall	.+0      	; 0x1656 <I2C_SendSlaveAddressWithRead+0x6>
    1656:	cd b7       	in	r28, 0x3d	; 61
    1658:	de b7       	in	r29, 0x3e	; 62
    165a:	8a 83       	std	Y+2, r24	; 0x02

	I2C_ErrorState Local_ErrStatus=NoError;
    165c:	19 82       	std	Y+1, r1	; 0x01
	/*clear the start condition bit */
	CLEAR_BIT(TWCR,TWSTA);
    165e:	a6 e5       	ldi	r26, 0x56	; 86
    1660:	b0 e0       	ldi	r27, 0x00	; 0
    1662:	e6 e5       	ldi	r30, 0x56	; 86
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	8f 7d       	andi	r24, 0xDF	; 223
    166a:	8c 93       	st	X, r24
	/*set slave address in the 7 MSB in the data register */
	TWDR=Copy_u8SlaveAddress<<1;
    166c:	e3 e2       	ldi	r30, 0x23	; 35
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	8a 81       	ldd	r24, Y+2	; 0x02
    1672:	88 0f       	add	r24, r24
    1674:	80 83       	st	Z, r24
	/*read request*/
	SET_BIT(TWDR,0);
    1676:	a3 e2       	ldi	r26, 0x23	; 35
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	e3 e2       	ldi	r30, 0x23	; 35
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	81 60       	ori	r24, 0x01	; 1
    1682:	8c 93       	st	X, r24
	/*clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWINT);
    1684:	a6 e5       	ldi	r26, 0x56	; 86
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	e6 e5       	ldi	r30, 0x56	; 86
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	80 68       	ori	r24, 0x80	; 128
    1690:	8c 93       	st	X, r24
	/*wait until the interrupt flag is raised at the previous operation completed*/
	while((GET_BIT(TWCR,TWINT))==0);
    1692:	e6 e5       	ldi	r30, 0x56	; 86
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	88 1f       	adc	r24, r24
    169a:	88 27       	eor	r24, r24
    169c:	88 1f       	adc	r24, r24
    169e:	88 2f       	mov	r24, r24
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	90 70       	andi	r25, 0x00	; 0
    16a4:	00 97       	sbiw	r24, 0x00	; 0
    16a6:	a9 f3       	breq	.-22     	; 0x1692 <I2C_SendSlaveAddressWithRead+0x42>
	if((TWSR & 0xF8)!= SLAVE_ADD_AND_RD_ACK )
    16a8:	e1 e2       	ldi	r30, 0x21	; 33
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	88 2f       	mov	r24, r24
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	88 7f       	andi	r24, 0xF8	; 248
    16b4:	90 70       	andi	r25, 0x00	; 0
    16b6:	80 34       	cpi	r24, 0x40	; 64
    16b8:	91 05       	cpc	r25, r1
    16ba:	11 f0       	breq	.+4      	; 0x16c0 <I2C_SendSlaveAddressWithRead+0x70>
	{
		Local_ErrStatus=SlaveAddressWithReadErr;
    16bc:	84 e0       	ldi	r24, 0x04	; 4
    16be:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrStatus;
    16c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    16c2:	0f 90       	pop	r0
    16c4:	0f 90       	pop	r0
    16c6:	cf 91       	pop	r28
    16c8:	df 91       	pop	r29
    16ca:	08 95       	ret

000016cc <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    16cc:	df 93       	push	r29
    16ce:	cf 93       	push	r28
    16d0:	0f 92       	push	r0
    16d2:	cd b7       	in	r28, 0x3d	; 61
    16d4:	de b7       	in	r29, 0x3e	; 62
    16d6:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR = data;
    16d8:	e3 e2       	ldi	r30, 0x23	; 35
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	89 81       	ldd	r24, Y+1	; 0x01
    16de:	80 83       	st	Z, r24
	/*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    16e0:	e6 e5       	ldi	r30, 0x56	; 86
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	84 e8       	ldi	r24, 0x84	; 132
    16e6:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    16e8:	e6 e5       	ldi	r30, 0x56	; 86
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	88 23       	and	r24, r24
    16f0:	dc f7       	brge	.-10     	; 0x16e8 <TWI_writeByte+0x1c>
}
    16f2:	0f 90       	pop	r0
    16f4:	cf 91       	pop	r28
    16f6:	df 91       	pop	r29
    16f8:	08 95       	ret

000016fa <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    16fa:	df 93       	push	r29
    16fc:	cf 93       	push	r28
    16fe:	cd b7       	in	r28, 0x3d	; 61
    1700:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1702:	e6 e5       	ldi	r30, 0x56	; 86
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	84 ec       	ldi	r24, 0xC4	; 196
    1708:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    170a:	e6 e5       	ldi	r30, 0x56	; 86
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	88 23       	and	r24, r24
    1712:	dc f7       	brge	.-10     	; 0x170a <TWI_readByteWithACK+0x10>
	/* Read Data */
	return TWDR;
    1714:	e3 e2       	ldi	r30, 0x23	; 35
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
}
    171a:	cf 91       	pop	r28
    171c:	df 91       	pop	r29
    171e:	08 95       	ret

00001720 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    1720:	df 93       	push	r29
    1722:	cf 93       	push	r28
    1724:	cd b7       	in	r28, 0x3d	; 61
    1726:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    1728:	e6 e5       	ldi	r30, 0x56	; 86
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	84 e8       	ldi	r24, 0x84	; 132
    172e:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1730:	e6 e5       	ldi	r30, 0x56	; 86
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	88 23       	and	r24, r24
    1738:	dc f7       	brge	.-10     	; 0x1730 <TWI_readByteWithNACK+0x10>
	/* Read Data */
	return TWDR;
    173a:	e3 e2       	ldi	r30, 0x23	; 35
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
}
    1740:	cf 91       	pop	r28
    1742:	df 91       	pop	r29
    1744:	08 95       	ret

00001746 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1746:	df 93       	push	r29
    1748:	cf 93       	push	r28
    174a:	0f 92       	push	r0
    174c:	cd b7       	in	r28, 0x3d	; 61
    174e:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	status = TWSR & 0xF8;
    1750:	e1 e2       	ldi	r30, 0x21	; 33
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	88 7f       	andi	r24, 0xF8	; 248
    1758:	89 83       	std	Y+1, r24	; 0x01
	return status;
    175a:	89 81       	ldd	r24, Y+1	; 0x01
}
    175c:	0f 90       	pop	r0
    175e:	cf 91       	pop	r28
    1760:	df 91       	pop	r29
    1762:	08 95       	ret

00001764 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1764:	df 93       	push	r29
    1766:	cf 93       	push	r28
    1768:	00 d0       	rcall	.+0      	; 0x176a <GPIO_setupPinDirection+0x6>
    176a:	00 d0       	rcall	.+0      	; 0x176c <GPIO_setupPinDirection+0x8>
    176c:	0f 92       	push	r0
    176e:	cd b7       	in	r28, 0x3d	; 61
    1770:	de b7       	in	r29, 0x3e	; 62
    1772:	89 83       	std	Y+1, r24	; 0x01
    1774:	6a 83       	std	Y+2, r22	; 0x02
    1776:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num >= NUM_OF_PORTS)||(pin_num >= NUM_OF_PINS_PER_PORT))
    1778:	89 81       	ldd	r24, Y+1	; 0x01
    177a:	84 30       	cpi	r24, 0x04	; 4
    177c:	08 f0       	brcs	.+2      	; 0x1780 <GPIO_setupPinDirection+0x1c>
    177e:	d5 c0       	rjmp	.+426    	; 0x192a <GPIO_setupPinDirection+0x1c6>
    1780:	8a 81       	ldd	r24, Y+2	; 0x02
    1782:	88 30       	cpi	r24, 0x08	; 8
    1784:	08 f0       	brcs	.+2      	; 0x1788 <GPIO_setupPinDirection+0x24>
    1786:	d1 c0       	rjmp	.+418    	; 0x192a <GPIO_setupPinDirection+0x1c6>
	{
		/* nothing */
	}
	else
	{
		switch(port_num)
    1788:	89 81       	ldd	r24, Y+1	; 0x01
    178a:	28 2f       	mov	r18, r24
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	3d 83       	std	Y+5, r19	; 0x05
    1790:	2c 83       	std	Y+4, r18	; 0x04
    1792:	8c 81       	ldd	r24, Y+4	; 0x04
    1794:	9d 81       	ldd	r25, Y+5	; 0x05
    1796:	81 30       	cpi	r24, 0x01	; 1
    1798:	91 05       	cpc	r25, r1
    179a:	09 f4       	brne	.+2      	; 0x179e <GPIO_setupPinDirection+0x3a>
    179c:	43 c0       	rjmp	.+134    	; 0x1824 <GPIO_setupPinDirection+0xc0>
    179e:	2c 81       	ldd	r18, Y+4	; 0x04
    17a0:	3d 81       	ldd	r19, Y+5	; 0x05
    17a2:	22 30       	cpi	r18, 0x02	; 2
    17a4:	31 05       	cpc	r19, r1
    17a6:	2c f4       	brge	.+10     	; 0x17b2 <GPIO_setupPinDirection+0x4e>
    17a8:	8c 81       	ldd	r24, Y+4	; 0x04
    17aa:	9d 81       	ldd	r25, Y+5	; 0x05
    17ac:	00 97       	sbiw	r24, 0x00	; 0
    17ae:	71 f0       	breq	.+28     	; 0x17cc <GPIO_setupPinDirection+0x68>
    17b0:	bc c0       	rjmp	.+376    	; 0x192a <GPIO_setupPinDirection+0x1c6>
    17b2:	2c 81       	ldd	r18, Y+4	; 0x04
    17b4:	3d 81       	ldd	r19, Y+5	; 0x05
    17b6:	22 30       	cpi	r18, 0x02	; 2
    17b8:	31 05       	cpc	r19, r1
    17ba:	09 f4       	brne	.+2      	; 0x17be <GPIO_setupPinDirection+0x5a>
    17bc:	5f c0       	rjmp	.+190    	; 0x187c <GPIO_setupPinDirection+0x118>
    17be:	8c 81       	ldd	r24, Y+4	; 0x04
    17c0:	9d 81       	ldd	r25, Y+5	; 0x05
    17c2:	83 30       	cpi	r24, 0x03	; 3
    17c4:	91 05       	cpc	r25, r1
    17c6:	09 f4       	brne	.+2      	; 0x17ca <GPIO_setupPinDirection+0x66>
    17c8:	85 c0       	rjmp	.+266    	; 0x18d4 <GPIO_setupPinDirection+0x170>
    17ca:	af c0       	rjmp	.+350    	; 0x192a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    17cc:	8b 81       	ldd	r24, Y+3	; 0x03
    17ce:	81 30       	cpi	r24, 0x01	; 1
    17d0:	a1 f4       	brne	.+40     	; 0x17fa <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    17d2:	aa e3       	ldi	r26, 0x3A	; 58
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	ea e3       	ldi	r30, 0x3A	; 58
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	48 2f       	mov	r20, r24
    17de:	8a 81       	ldd	r24, Y+2	; 0x02
    17e0:	28 2f       	mov	r18, r24
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	02 2e       	mov	r0, r18
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <GPIO_setupPinDirection+0x8c>
    17ec:	88 0f       	add	r24, r24
    17ee:	99 1f       	adc	r25, r25
    17f0:	0a 94       	dec	r0
    17f2:	e2 f7       	brpl	.-8      	; 0x17ec <GPIO_setupPinDirection+0x88>
    17f4:	84 2b       	or	r24, r20
    17f6:	8c 93       	st	X, r24
    17f8:	98 c0       	rjmp	.+304    	; 0x192a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    17fa:	aa e3       	ldi	r26, 0x3A	; 58
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	ea e3       	ldi	r30, 0x3A	; 58
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	48 2f       	mov	r20, r24
    1806:	8a 81       	ldd	r24, Y+2	; 0x02
    1808:	28 2f       	mov	r18, r24
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	02 2e       	mov	r0, r18
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <GPIO_setupPinDirection+0xb4>
    1814:	88 0f       	add	r24, r24
    1816:	99 1f       	adc	r25, r25
    1818:	0a 94       	dec	r0
    181a:	e2 f7       	brpl	.-8      	; 0x1814 <GPIO_setupPinDirection+0xb0>
    181c:	80 95       	com	r24
    181e:	84 23       	and	r24, r20
    1820:	8c 93       	st	X, r24
    1822:	83 c0       	rjmp	.+262    	; 0x192a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1824:	8b 81       	ldd	r24, Y+3	; 0x03
    1826:	81 30       	cpi	r24, 0x01	; 1
    1828:	a1 f4       	brne	.+40     	; 0x1852 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    182a:	a7 e3       	ldi	r26, 0x37	; 55
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	e7 e3       	ldi	r30, 0x37	; 55
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	48 2f       	mov	r20, r24
    1836:	8a 81       	ldd	r24, Y+2	; 0x02
    1838:	28 2f       	mov	r18, r24
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	02 2e       	mov	r0, r18
    1842:	02 c0       	rjmp	.+4      	; 0x1848 <GPIO_setupPinDirection+0xe4>
    1844:	88 0f       	add	r24, r24
    1846:	99 1f       	adc	r25, r25
    1848:	0a 94       	dec	r0
    184a:	e2 f7       	brpl	.-8      	; 0x1844 <GPIO_setupPinDirection+0xe0>
    184c:	84 2b       	or	r24, r20
    184e:	8c 93       	st	X, r24
    1850:	6c c0       	rjmp	.+216    	; 0x192a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1852:	a7 e3       	ldi	r26, 0x37	; 55
    1854:	b0 e0       	ldi	r27, 0x00	; 0
    1856:	e7 e3       	ldi	r30, 0x37	; 55
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	48 2f       	mov	r20, r24
    185e:	8a 81       	ldd	r24, Y+2	; 0x02
    1860:	28 2f       	mov	r18, r24
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	02 2e       	mov	r0, r18
    186a:	02 c0       	rjmp	.+4      	; 0x1870 <GPIO_setupPinDirection+0x10c>
    186c:	88 0f       	add	r24, r24
    186e:	99 1f       	adc	r25, r25
    1870:	0a 94       	dec	r0
    1872:	e2 f7       	brpl	.-8      	; 0x186c <GPIO_setupPinDirection+0x108>
    1874:	80 95       	com	r24
    1876:	84 23       	and	r24, r20
    1878:	8c 93       	st	X, r24
    187a:	57 c0       	rjmp	.+174    	; 0x192a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    187c:	8b 81       	ldd	r24, Y+3	; 0x03
    187e:	81 30       	cpi	r24, 0x01	; 1
    1880:	a1 f4       	brne	.+40     	; 0x18aa <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1882:	a4 e3       	ldi	r26, 0x34	; 52
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	e4 e3       	ldi	r30, 0x34	; 52
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	48 2f       	mov	r20, r24
    188e:	8a 81       	ldd	r24, Y+2	; 0x02
    1890:	28 2f       	mov	r18, r24
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	02 2e       	mov	r0, r18
    189a:	02 c0       	rjmp	.+4      	; 0x18a0 <GPIO_setupPinDirection+0x13c>
    189c:	88 0f       	add	r24, r24
    189e:	99 1f       	adc	r25, r25
    18a0:	0a 94       	dec	r0
    18a2:	e2 f7       	brpl	.-8      	; 0x189c <GPIO_setupPinDirection+0x138>
    18a4:	84 2b       	or	r24, r20
    18a6:	8c 93       	st	X, r24
    18a8:	40 c0       	rjmp	.+128    	; 0x192a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    18aa:	a4 e3       	ldi	r26, 0x34	; 52
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	e4 e3       	ldi	r30, 0x34	; 52
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	48 2f       	mov	r20, r24
    18b6:	8a 81       	ldd	r24, Y+2	; 0x02
    18b8:	28 2f       	mov	r18, r24
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	02 2e       	mov	r0, r18
    18c2:	02 c0       	rjmp	.+4      	; 0x18c8 <GPIO_setupPinDirection+0x164>
    18c4:	88 0f       	add	r24, r24
    18c6:	99 1f       	adc	r25, r25
    18c8:	0a 94       	dec	r0
    18ca:	e2 f7       	brpl	.-8      	; 0x18c4 <GPIO_setupPinDirection+0x160>
    18cc:	80 95       	com	r24
    18ce:	84 23       	and	r24, r20
    18d0:	8c 93       	st	X, r24
    18d2:	2b c0       	rjmp	.+86     	; 0x192a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    18d4:	8b 81       	ldd	r24, Y+3	; 0x03
    18d6:	81 30       	cpi	r24, 0x01	; 1
    18d8:	a1 f4       	brne	.+40     	; 0x1902 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    18da:	a1 e3       	ldi	r26, 0x31	; 49
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	e1 e3       	ldi	r30, 0x31	; 49
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	48 2f       	mov	r20, r24
    18e6:	8a 81       	ldd	r24, Y+2	; 0x02
    18e8:	28 2f       	mov	r18, r24
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	02 2e       	mov	r0, r18
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <GPIO_setupPinDirection+0x194>
    18f4:	88 0f       	add	r24, r24
    18f6:	99 1f       	adc	r25, r25
    18f8:	0a 94       	dec	r0
    18fa:	e2 f7       	brpl	.-8      	; 0x18f4 <GPIO_setupPinDirection+0x190>
    18fc:	84 2b       	or	r24, r20
    18fe:	8c 93       	st	X, r24
    1900:	14 c0       	rjmp	.+40     	; 0x192a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1902:	a1 e3       	ldi	r26, 0x31	; 49
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	e1 e3       	ldi	r30, 0x31	; 49
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	48 2f       	mov	r20, r24
    190e:	8a 81       	ldd	r24, Y+2	; 0x02
    1910:	28 2f       	mov	r18, r24
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	02 2e       	mov	r0, r18
    191a:	02 c0       	rjmp	.+4      	; 0x1920 <GPIO_setupPinDirection+0x1bc>
    191c:	88 0f       	add	r24, r24
    191e:	99 1f       	adc	r25, r25
    1920:	0a 94       	dec	r0
    1922:	e2 f7       	brpl	.-8      	; 0x191c <GPIO_setupPinDirection+0x1b8>
    1924:	80 95       	com	r24
    1926:	84 23       	and	r24, r20
    1928:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	cf 91       	pop	r28
    1936:	df 91       	pop	r29
    1938:	08 95       	ret

0000193a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    193a:	df 93       	push	r29
    193c:	cf 93       	push	r28
    193e:	00 d0       	rcall	.+0      	; 0x1940 <GPIO_writePin+0x6>
    1940:	00 d0       	rcall	.+0      	; 0x1942 <GPIO_writePin+0x8>
    1942:	0f 92       	push	r0
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
    1948:	89 83       	std	Y+1, r24	; 0x01
    194a:	6a 83       	std	Y+2, r22	; 0x02
    194c:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT))
    194e:	89 81       	ldd	r24, Y+1	; 0x01
    1950:	84 30       	cpi	r24, 0x04	; 4
    1952:	08 f0       	brcs	.+2      	; 0x1956 <GPIO_writePin+0x1c>
    1954:	d5 c0       	rjmp	.+426    	; 0x1b00 <GPIO_writePin+0x1c6>
    1956:	8a 81       	ldd	r24, Y+2	; 0x02
    1958:	88 30       	cpi	r24, 0x08	; 8
    195a:	08 f0       	brcs	.+2      	; 0x195e <GPIO_writePin+0x24>
    195c:	d1 c0       	rjmp	.+418    	; 0x1b00 <GPIO_writePin+0x1c6>
	{
		/* nothing */
	}
	else
	{
		switch(port_num)
    195e:	89 81       	ldd	r24, Y+1	; 0x01
    1960:	28 2f       	mov	r18, r24
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	3d 83       	std	Y+5, r19	; 0x05
    1966:	2c 83       	std	Y+4, r18	; 0x04
    1968:	8c 81       	ldd	r24, Y+4	; 0x04
    196a:	9d 81       	ldd	r25, Y+5	; 0x05
    196c:	81 30       	cpi	r24, 0x01	; 1
    196e:	91 05       	cpc	r25, r1
    1970:	09 f4       	brne	.+2      	; 0x1974 <GPIO_writePin+0x3a>
    1972:	43 c0       	rjmp	.+134    	; 0x19fa <GPIO_writePin+0xc0>
    1974:	2c 81       	ldd	r18, Y+4	; 0x04
    1976:	3d 81       	ldd	r19, Y+5	; 0x05
    1978:	22 30       	cpi	r18, 0x02	; 2
    197a:	31 05       	cpc	r19, r1
    197c:	2c f4       	brge	.+10     	; 0x1988 <GPIO_writePin+0x4e>
    197e:	8c 81       	ldd	r24, Y+4	; 0x04
    1980:	9d 81       	ldd	r25, Y+5	; 0x05
    1982:	00 97       	sbiw	r24, 0x00	; 0
    1984:	71 f0       	breq	.+28     	; 0x19a2 <GPIO_writePin+0x68>
    1986:	bc c0       	rjmp	.+376    	; 0x1b00 <GPIO_writePin+0x1c6>
    1988:	2c 81       	ldd	r18, Y+4	; 0x04
    198a:	3d 81       	ldd	r19, Y+5	; 0x05
    198c:	22 30       	cpi	r18, 0x02	; 2
    198e:	31 05       	cpc	r19, r1
    1990:	09 f4       	brne	.+2      	; 0x1994 <GPIO_writePin+0x5a>
    1992:	5f c0       	rjmp	.+190    	; 0x1a52 <GPIO_writePin+0x118>
    1994:	8c 81       	ldd	r24, Y+4	; 0x04
    1996:	9d 81       	ldd	r25, Y+5	; 0x05
    1998:	83 30       	cpi	r24, 0x03	; 3
    199a:	91 05       	cpc	r25, r1
    199c:	09 f4       	brne	.+2      	; 0x19a0 <GPIO_writePin+0x66>
    199e:	85 c0       	rjmp	.+266    	; 0x1aaa <GPIO_writePin+0x170>
    19a0:	af c0       	rjmp	.+350    	; 0x1b00 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    19a2:	8b 81       	ldd	r24, Y+3	; 0x03
    19a4:	81 30       	cpi	r24, 0x01	; 1
    19a6:	a1 f4       	brne	.+40     	; 0x19d0 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    19a8:	ab e3       	ldi	r26, 0x3B	; 59
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	eb e3       	ldi	r30, 0x3B	; 59
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	48 2f       	mov	r20, r24
    19b4:	8a 81       	ldd	r24, Y+2	; 0x02
    19b6:	28 2f       	mov	r18, r24
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	02 2e       	mov	r0, r18
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <GPIO_writePin+0x8c>
    19c2:	88 0f       	add	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	0a 94       	dec	r0
    19c8:	e2 f7       	brpl	.-8      	; 0x19c2 <GPIO_writePin+0x88>
    19ca:	84 2b       	or	r24, r20
    19cc:	8c 93       	st	X, r24
    19ce:	98 c0       	rjmp	.+304    	; 0x1b00 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    19d0:	ab e3       	ldi	r26, 0x3B	; 59
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	eb e3       	ldi	r30, 0x3B	; 59
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
    19da:	48 2f       	mov	r20, r24
    19dc:	8a 81       	ldd	r24, Y+2	; 0x02
    19de:	28 2f       	mov	r18, r24
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	02 2e       	mov	r0, r18
    19e8:	02 c0       	rjmp	.+4      	; 0x19ee <GPIO_writePin+0xb4>
    19ea:	88 0f       	add	r24, r24
    19ec:	99 1f       	adc	r25, r25
    19ee:	0a 94       	dec	r0
    19f0:	e2 f7       	brpl	.-8      	; 0x19ea <GPIO_writePin+0xb0>
    19f2:	80 95       	com	r24
    19f4:	84 23       	and	r24, r20
    19f6:	8c 93       	st	X, r24
    19f8:	83 c0       	rjmp	.+262    	; 0x1b00 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    19fa:	8b 81       	ldd	r24, Y+3	; 0x03
    19fc:	81 30       	cpi	r24, 0x01	; 1
    19fe:	a1 f4       	brne	.+40     	; 0x1a28 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1a00:	a8 e3       	ldi	r26, 0x38	; 56
    1a02:	b0 e0       	ldi	r27, 0x00	; 0
    1a04:	e8 e3       	ldi	r30, 0x38	; 56
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
    1a0a:	48 2f       	mov	r20, r24
    1a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0e:	28 2f       	mov	r18, r24
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	02 2e       	mov	r0, r18
    1a18:	02 c0       	rjmp	.+4      	; 0x1a1e <GPIO_writePin+0xe4>
    1a1a:	88 0f       	add	r24, r24
    1a1c:	99 1f       	adc	r25, r25
    1a1e:	0a 94       	dec	r0
    1a20:	e2 f7       	brpl	.-8      	; 0x1a1a <GPIO_writePin+0xe0>
    1a22:	84 2b       	or	r24, r20
    1a24:	8c 93       	st	X, r24
    1a26:	6c c0       	rjmp	.+216    	; 0x1b00 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1a28:	a8 e3       	ldi	r26, 0x38	; 56
    1a2a:	b0 e0       	ldi	r27, 0x00	; 0
    1a2c:	e8 e3       	ldi	r30, 0x38	; 56
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z
    1a32:	48 2f       	mov	r20, r24
    1a34:	8a 81       	ldd	r24, Y+2	; 0x02
    1a36:	28 2f       	mov	r18, r24
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	02 2e       	mov	r0, r18
    1a40:	02 c0       	rjmp	.+4      	; 0x1a46 <GPIO_writePin+0x10c>
    1a42:	88 0f       	add	r24, r24
    1a44:	99 1f       	adc	r25, r25
    1a46:	0a 94       	dec	r0
    1a48:	e2 f7       	brpl	.-8      	; 0x1a42 <GPIO_writePin+0x108>
    1a4a:	80 95       	com	r24
    1a4c:	84 23       	and	r24, r20
    1a4e:	8c 93       	st	X, r24
    1a50:	57 c0       	rjmp	.+174    	; 0x1b00 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1a52:	8b 81       	ldd	r24, Y+3	; 0x03
    1a54:	81 30       	cpi	r24, 0x01	; 1
    1a56:	a1 f4       	brne	.+40     	; 0x1a80 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1a58:	a5 e3       	ldi	r26, 0x35	; 53
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e5 e3       	ldi	r30, 0x35	; 53
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	48 2f       	mov	r20, r24
    1a64:	8a 81       	ldd	r24, Y+2	; 0x02
    1a66:	28 2f       	mov	r18, r24
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	02 2e       	mov	r0, r18
    1a70:	02 c0       	rjmp	.+4      	; 0x1a76 <GPIO_writePin+0x13c>
    1a72:	88 0f       	add	r24, r24
    1a74:	99 1f       	adc	r25, r25
    1a76:	0a 94       	dec	r0
    1a78:	e2 f7       	brpl	.-8      	; 0x1a72 <GPIO_writePin+0x138>
    1a7a:	84 2b       	or	r24, r20
    1a7c:	8c 93       	st	X, r24
    1a7e:	40 c0       	rjmp	.+128    	; 0x1b00 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1a80:	a5 e3       	ldi	r26, 0x35	; 53
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	e5 e3       	ldi	r30, 0x35	; 53
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	48 2f       	mov	r20, r24
    1a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8e:	28 2f       	mov	r18, r24
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	02 2e       	mov	r0, r18
    1a98:	02 c0       	rjmp	.+4      	; 0x1a9e <GPIO_writePin+0x164>
    1a9a:	88 0f       	add	r24, r24
    1a9c:	99 1f       	adc	r25, r25
    1a9e:	0a 94       	dec	r0
    1aa0:	e2 f7       	brpl	.-8      	; 0x1a9a <GPIO_writePin+0x160>
    1aa2:	80 95       	com	r24
    1aa4:	84 23       	and	r24, r20
    1aa6:	8c 93       	st	X, r24
    1aa8:	2b c0       	rjmp	.+86     	; 0x1b00 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1aac:	81 30       	cpi	r24, 0x01	; 1
    1aae:	a1 f4       	brne	.+40     	; 0x1ad8 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1ab0:	a2 e3       	ldi	r26, 0x32	; 50
    1ab2:	b0 e0       	ldi	r27, 0x00	; 0
    1ab4:	e2 e3       	ldi	r30, 0x32	; 50
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	48 2f       	mov	r20, r24
    1abc:	8a 81       	ldd	r24, Y+2	; 0x02
    1abe:	28 2f       	mov	r18, r24
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	02 2e       	mov	r0, r18
    1ac8:	02 c0       	rjmp	.+4      	; 0x1ace <GPIO_writePin+0x194>
    1aca:	88 0f       	add	r24, r24
    1acc:	99 1f       	adc	r25, r25
    1ace:	0a 94       	dec	r0
    1ad0:	e2 f7       	brpl	.-8      	; 0x1aca <GPIO_writePin+0x190>
    1ad2:	84 2b       	or	r24, r20
    1ad4:	8c 93       	st	X, r24
    1ad6:	14 c0       	rjmp	.+40     	; 0x1b00 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1ad8:	a2 e3       	ldi	r26, 0x32	; 50
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	e2 e3       	ldi	r30, 0x32	; 50
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	48 2f       	mov	r20, r24
    1ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae6:	28 2f       	mov	r18, r24
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	02 2e       	mov	r0, r18
    1af0:	02 c0       	rjmp	.+4      	; 0x1af6 <GPIO_writePin+0x1bc>
    1af2:	88 0f       	add	r24, r24
    1af4:	99 1f       	adc	r25, r25
    1af6:	0a 94       	dec	r0
    1af8:	e2 f7       	brpl	.-8      	; 0x1af2 <GPIO_writePin+0x1b8>
    1afa:	80 95       	com	r24
    1afc:	84 23       	and	r24, r20
    1afe:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1b00:	0f 90       	pop	r0
    1b02:	0f 90       	pop	r0
    1b04:	0f 90       	pop	r0
    1b06:	0f 90       	pop	r0
    1b08:	0f 90       	pop	r0
    1b0a:	cf 91       	pop	r28
    1b0c:	df 91       	pop	r29
    1b0e:	08 95       	ret

00001b10 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1b10:	df 93       	push	r29
    1b12:	cf 93       	push	r28
    1b14:	00 d0       	rcall	.+0      	; 0x1b16 <GPIO_readPin+0x6>
    1b16:	00 d0       	rcall	.+0      	; 0x1b18 <GPIO_readPin+0x8>
    1b18:	0f 92       	push	r0
    1b1a:	cd b7       	in	r28, 0x3d	; 61
    1b1c:	de b7       	in	r29, 0x3e	; 62
    1b1e:	8a 83       	std	Y+2, r24	; 0x02
    1b20:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1b22:	19 82       	std	Y+1, r1	; 0x01
	if((port_num >= NUM_OF_PORTS)||(pin_num >= NUM_OF_PINS_PER_PORT))
    1b24:	8a 81       	ldd	r24, Y+2	; 0x02
    1b26:	84 30       	cpi	r24, 0x04	; 4
    1b28:	08 f0       	brcs	.+2      	; 0x1b2c <GPIO_readPin+0x1c>
    1b2a:	84 c0       	rjmp	.+264    	; 0x1c34 <GPIO_readPin+0x124>
    1b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2e:	88 30       	cpi	r24, 0x08	; 8
    1b30:	08 f0       	brcs	.+2      	; 0x1b34 <GPIO_readPin+0x24>
    1b32:	80 c0       	rjmp	.+256    	; 0x1c34 <GPIO_readPin+0x124>
	{
		/* nothing */
	}
	else
	{
		switch(port_num)
    1b34:	8a 81       	ldd	r24, Y+2	; 0x02
    1b36:	28 2f       	mov	r18, r24
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	3d 83       	std	Y+5, r19	; 0x05
    1b3c:	2c 83       	std	Y+4, r18	; 0x04
    1b3e:	4c 81       	ldd	r20, Y+4	; 0x04
    1b40:	5d 81       	ldd	r21, Y+5	; 0x05
    1b42:	41 30       	cpi	r20, 0x01	; 1
    1b44:	51 05       	cpc	r21, r1
    1b46:	79 f1       	breq	.+94     	; 0x1ba6 <GPIO_readPin+0x96>
    1b48:	8c 81       	ldd	r24, Y+4	; 0x04
    1b4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b4c:	82 30       	cpi	r24, 0x02	; 2
    1b4e:	91 05       	cpc	r25, r1
    1b50:	34 f4       	brge	.+12     	; 0x1b5e <GPIO_readPin+0x4e>
    1b52:	2c 81       	ldd	r18, Y+4	; 0x04
    1b54:	3d 81       	ldd	r19, Y+5	; 0x05
    1b56:	21 15       	cp	r18, r1
    1b58:	31 05       	cpc	r19, r1
    1b5a:	69 f0       	breq	.+26     	; 0x1b76 <GPIO_readPin+0x66>
    1b5c:	6b c0       	rjmp	.+214    	; 0x1c34 <GPIO_readPin+0x124>
    1b5e:	4c 81       	ldd	r20, Y+4	; 0x04
    1b60:	5d 81       	ldd	r21, Y+5	; 0x05
    1b62:	42 30       	cpi	r20, 0x02	; 2
    1b64:	51 05       	cpc	r21, r1
    1b66:	b9 f1       	breq	.+110    	; 0x1bd6 <GPIO_readPin+0xc6>
    1b68:	8c 81       	ldd	r24, Y+4	; 0x04
    1b6a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b6c:	83 30       	cpi	r24, 0x03	; 3
    1b6e:	91 05       	cpc	r25, r1
    1b70:	09 f4       	brne	.+2      	; 0x1b74 <GPIO_readPin+0x64>
    1b72:	49 c0       	rjmp	.+146    	; 0x1c06 <GPIO_readPin+0xf6>
    1b74:	5f c0       	rjmp	.+190    	; 0x1c34 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1b76:	e9 e3       	ldi	r30, 0x39	; 57
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	28 2f       	mov	r18, r24
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	8b 81       	ldd	r24, Y+3	; 0x03
    1b82:	88 2f       	mov	r24, r24
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	a9 01       	movw	r20, r18
    1b88:	02 c0       	rjmp	.+4      	; 0x1b8e <GPIO_readPin+0x7e>
    1b8a:	55 95       	asr	r21
    1b8c:	47 95       	ror	r20
    1b8e:	8a 95       	dec	r24
    1b90:	e2 f7       	brpl	.-8      	; 0x1b8a <GPIO_readPin+0x7a>
    1b92:	ca 01       	movw	r24, r20
    1b94:	81 70       	andi	r24, 0x01	; 1
    1b96:	90 70       	andi	r25, 0x00	; 0
    1b98:	88 23       	and	r24, r24
    1b9a:	19 f0       	breq	.+6      	; 0x1ba2 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	89 83       	std	Y+1, r24	; 0x01
    1ba0:	49 c0       	rjmp	.+146    	; 0x1c34 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ba2:	19 82       	std	Y+1, r1	; 0x01
    1ba4:	47 c0       	rjmp	.+142    	; 0x1c34 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1ba6:	e6 e3       	ldi	r30, 0x36	; 54
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	28 2f       	mov	r18, r24
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb2:	88 2f       	mov	r24, r24
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	a9 01       	movw	r20, r18
    1bb8:	02 c0       	rjmp	.+4      	; 0x1bbe <GPIO_readPin+0xae>
    1bba:	55 95       	asr	r21
    1bbc:	47 95       	ror	r20
    1bbe:	8a 95       	dec	r24
    1bc0:	e2 f7       	brpl	.-8      	; 0x1bba <GPIO_readPin+0xaa>
    1bc2:	ca 01       	movw	r24, r20
    1bc4:	81 70       	andi	r24, 0x01	; 1
    1bc6:	90 70       	andi	r25, 0x00	; 0
    1bc8:	88 23       	and	r24, r24
    1bca:	19 f0       	breq	.+6      	; 0x1bd2 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	89 83       	std	Y+1, r24	; 0x01
    1bd0:	31 c0       	rjmp	.+98     	; 0x1c34 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1bd2:	19 82       	std	Y+1, r1	; 0x01
    1bd4:	2f c0       	rjmp	.+94     	; 0x1c34 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1bd6:	e3 e3       	ldi	r30, 0x33	; 51
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	80 81       	ld	r24, Z
    1bdc:	28 2f       	mov	r18, r24
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	8b 81       	ldd	r24, Y+3	; 0x03
    1be2:	88 2f       	mov	r24, r24
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	a9 01       	movw	r20, r18
    1be8:	02 c0       	rjmp	.+4      	; 0x1bee <GPIO_readPin+0xde>
    1bea:	55 95       	asr	r21
    1bec:	47 95       	ror	r20
    1bee:	8a 95       	dec	r24
    1bf0:	e2 f7       	brpl	.-8      	; 0x1bea <GPIO_readPin+0xda>
    1bf2:	ca 01       	movw	r24, r20
    1bf4:	81 70       	andi	r24, 0x01	; 1
    1bf6:	90 70       	andi	r25, 0x00	; 0
    1bf8:	88 23       	and	r24, r24
    1bfa:	19 f0       	breq	.+6      	; 0x1c02 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	89 83       	std	Y+1, r24	; 0x01
    1c00:	19 c0       	rjmp	.+50     	; 0x1c34 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c02:	19 82       	std	Y+1, r1	; 0x01
    1c04:	17 c0       	rjmp	.+46     	; 0x1c34 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1c06:	e0 e3       	ldi	r30, 0x30	; 48
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	28 2f       	mov	r18, r24
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	8b 81       	ldd	r24, Y+3	; 0x03
    1c12:	88 2f       	mov	r24, r24
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	a9 01       	movw	r20, r18
    1c18:	02 c0       	rjmp	.+4      	; 0x1c1e <GPIO_readPin+0x10e>
    1c1a:	55 95       	asr	r21
    1c1c:	47 95       	ror	r20
    1c1e:	8a 95       	dec	r24
    1c20:	e2 f7       	brpl	.-8      	; 0x1c1a <GPIO_readPin+0x10a>
    1c22:	ca 01       	movw	r24, r20
    1c24:	81 70       	andi	r24, 0x01	; 1
    1c26:	90 70       	andi	r25, 0x00	; 0
    1c28:	88 23       	and	r24, r24
    1c2a:	19 f0       	breq	.+6      	; 0x1c32 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	89 83       	std	Y+1, r24	; 0x01
    1c30:	01 c0       	rjmp	.+2      	; 0x1c34 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c32:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return pin_value;
    1c34:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	0f 90       	pop	r0
    1c3c:	0f 90       	pop	r0
    1c3e:	0f 90       	pop	r0
    1c40:	cf 91       	pop	r28
    1c42:	df 91       	pop	r29
    1c44:	08 95       	ret

00001c46 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, uint8 direction)
{
    1c46:	df 93       	push	r29
    1c48:	cf 93       	push	r28
    1c4a:	00 d0       	rcall	.+0      	; 0x1c4c <GPIO_setupPortDirection+0x6>
    1c4c:	00 d0       	rcall	.+0      	; 0x1c4e <GPIO_setupPortDirection+0x8>
    1c4e:	cd b7       	in	r28, 0x3d	; 61
    1c50:	de b7       	in	r29, 0x3e	; 62
    1c52:	89 83       	std	Y+1, r24	; 0x01
    1c54:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    1c56:	89 81       	ldd	r24, Y+1	; 0x01
    1c58:	84 30       	cpi	r24, 0x04	; 4
    1c5a:	90 f5       	brcc	.+100    	; 0x1cc0 <GPIO_setupPortDirection+0x7a>
	{
		/* nothing */
	}
	else
	{
		switch(port_num)
    1c5c:	89 81       	ldd	r24, Y+1	; 0x01
    1c5e:	28 2f       	mov	r18, r24
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	3c 83       	std	Y+4, r19	; 0x04
    1c64:	2b 83       	std	Y+3, r18	; 0x03
    1c66:	8b 81       	ldd	r24, Y+3	; 0x03
    1c68:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6a:	81 30       	cpi	r24, 0x01	; 1
    1c6c:	91 05       	cpc	r25, r1
    1c6e:	d1 f0       	breq	.+52     	; 0x1ca4 <GPIO_setupPortDirection+0x5e>
    1c70:	2b 81       	ldd	r18, Y+3	; 0x03
    1c72:	3c 81       	ldd	r19, Y+4	; 0x04
    1c74:	22 30       	cpi	r18, 0x02	; 2
    1c76:	31 05       	cpc	r19, r1
    1c78:	2c f4       	brge	.+10     	; 0x1c84 <GPIO_setupPortDirection+0x3e>
    1c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7e:	00 97       	sbiw	r24, 0x00	; 0
    1c80:	61 f0       	breq	.+24     	; 0x1c9a <GPIO_setupPortDirection+0x54>
    1c82:	1e c0       	rjmp	.+60     	; 0x1cc0 <GPIO_setupPortDirection+0x7a>
    1c84:	2b 81       	ldd	r18, Y+3	; 0x03
    1c86:	3c 81       	ldd	r19, Y+4	; 0x04
    1c88:	22 30       	cpi	r18, 0x02	; 2
    1c8a:	31 05       	cpc	r19, r1
    1c8c:	81 f0       	breq	.+32     	; 0x1cae <GPIO_setupPortDirection+0x68>
    1c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c90:	9c 81       	ldd	r25, Y+4	; 0x04
    1c92:	83 30       	cpi	r24, 0x03	; 3
    1c94:	91 05       	cpc	r25, r1
    1c96:	81 f0       	breq	.+32     	; 0x1cb8 <GPIO_setupPortDirection+0x72>
    1c98:	13 c0       	rjmp	.+38     	; 0x1cc0 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1c9a:	ea e3       	ldi	r30, 0x3A	; 58
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca0:	80 83       	st	Z, r24
    1ca2:	0e c0       	rjmp	.+28     	; 0x1cc0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1ca4:	e7 e3       	ldi	r30, 0x37	; 55
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    1caa:	80 83       	st	Z, r24
    1cac:	09 c0       	rjmp	.+18     	; 0x1cc0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1cae:	e4 e3       	ldi	r30, 0x34	; 52
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb4:	80 83       	st	Z, r24
    1cb6:	04 c0       	rjmp	.+8      	; 0x1cc0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1cb8:	e1 e3       	ldi	r30, 0x31	; 49
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbe:	80 83       	st	Z, r24
			break;
		}
	}
}
    1cc0:	0f 90       	pop	r0
    1cc2:	0f 90       	pop	r0
    1cc4:	0f 90       	pop	r0
    1cc6:	0f 90       	pop	r0
    1cc8:	cf 91       	pop	r28
    1cca:	df 91       	pop	r29
    1ccc:	08 95       	ret

00001cce <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1cce:	df 93       	push	r29
    1cd0:	cf 93       	push	r28
    1cd2:	00 d0       	rcall	.+0      	; 0x1cd4 <GPIO_writePort+0x6>
    1cd4:	00 d0       	rcall	.+0      	; 0x1cd6 <GPIO_writePort+0x8>
    1cd6:	cd b7       	in	r28, 0x3d	; 61
    1cd8:	de b7       	in	r29, 0x3e	; 62
    1cda:	89 83       	std	Y+1, r24	; 0x01
    1cdc:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    1cde:	89 81       	ldd	r24, Y+1	; 0x01
    1ce0:	84 30       	cpi	r24, 0x04	; 4
    1ce2:	90 f5       	brcc	.+100    	; 0x1d48 <GPIO_writePort+0x7a>
	{
		/* nothing */
	}
	else
	{
		switch(port_num)
    1ce4:	89 81       	ldd	r24, Y+1	; 0x01
    1ce6:	28 2f       	mov	r18, r24
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	3c 83       	std	Y+4, r19	; 0x04
    1cec:	2b 83       	std	Y+3, r18	; 0x03
    1cee:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf2:	81 30       	cpi	r24, 0x01	; 1
    1cf4:	91 05       	cpc	r25, r1
    1cf6:	d1 f0       	breq	.+52     	; 0x1d2c <GPIO_writePort+0x5e>
    1cf8:	2b 81       	ldd	r18, Y+3	; 0x03
    1cfa:	3c 81       	ldd	r19, Y+4	; 0x04
    1cfc:	22 30       	cpi	r18, 0x02	; 2
    1cfe:	31 05       	cpc	r19, r1
    1d00:	2c f4       	brge	.+10     	; 0x1d0c <GPIO_writePort+0x3e>
    1d02:	8b 81       	ldd	r24, Y+3	; 0x03
    1d04:	9c 81       	ldd	r25, Y+4	; 0x04
    1d06:	00 97       	sbiw	r24, 0x00	; 0
    1d08:	61 f0       	breq	.+24     	; 0x1d22 <GPIO_writePort+0x54>
    1d0a:	1e c0       	rjmp	.+60     	; 0x1d48 <GPIO_writePort+0x7a>
    1d0c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d0e:	3c 81       	ldd	r19, Y+4	; 0x04
    1d10:	22 30       	cpi	r18, 0x02	; 2
    1d12:	31 05       	cpc	r19, r1
    1d14:	81 f0       	breq	.+32     	; 0x1d36 <GPIO_writePort+0x68>
    1d16:	8b 81       	ldd	r24, Y+3	; 0x03
    1d18:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1a:	83 30       	cpi	r24, 0x03	; 3
    1d1c:	91 05       	cpc	r25, r1
    1d1e:	81 f0       	breq	.+32     	; 0x1d40 <GPIO_writePort+0x72>
    1d20:	13 c0       	rjmp	.+38     	; 0x1d48 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1d22:	eb e3       	ldi	r30, 0x3B	; 59
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	8a 81       	ldd	r24, Y+2	; 0x02
    1d28:	80 83       	st	Z, r24
    1d2a:	0e c0       	rjmp	.+28     	; 0x1d48 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1d2c:	e8 e3       	ldi	r30, 0x38	; 56
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	8a 81       	ldd	r24, Y+2	; 0x02
    1d32:	80 83       	st	Z, r24
    1d34:	09 c0       	rjmp	.+18     	; 0x1d48 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1d36:	e5 e3       	ldi	r30, 0x35	; 53
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3c:	80 83       	st	Z, r24
    1d3e:	04 c0       	rjmp	.+8      	; 0x1d48 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1d40:	e2 e3       	ldi	r30, 0x32	; 50
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	8a 81       	ldd	r24, Y+2	; 0x02
    1d46:	80 83       	st	Z, r24
			break;
		}
	}
}
    1d48:	0f 90       	pop	r0
    1d4a:	0f 90       	pop	r0
    1d4c:	0f 90       	pop	r0
    1d4e:	0f 90       	pop	r0
    1d50:	cf 91       	pop	r28
    1d52:	df 91       	pop	r29
    1d54:	08 95       	ret

00001d56 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1d56:	df 93       	push	r29
    1d58:	cf 93       	push	r28
    1d5a:	00 d0       	rcall	.+0      	; 0x1d5c <GPIO_readPort+0x6>
    1d5c:	00 d0       	rcall	.+0      	; 0x1d5e <GPIO_readPort+0x8>
    1d5e:	cd b7       	in	r28, 0x3d	; 61
    1d60:	de b7       	in	r29, 0x3e	; 62
    1d62:	8a 83       	std	Y+2, r24	; 0x02
	uint8 port_value = LOGIC_LOW;
    1d64:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS)
    1d66:	8a 81       	ldd	r24, Y+2	; 0x02
    1d68:	84 30       	cpi	r24, 0x04	; 4
    1d6a:	90 f5       	brcc	.+100    	; 0x1dd0 <GPIO_readPort+0x7a>
	{
		/* nothing */
	}
	else
	{
		switch(port_num)
    1d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6e:	28 2f       	mov	r18, r24
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	3c 83       	std	Y+4, r19	; 0x04
    1d74:	2b 83       	std	Y+3, r18	; 0x03
    1d76:	8b 81       	ldd	r24, Y+3	; 0x03
    1d78:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7a:	81 30       	cpi	r24, 0x01	; 1
    1d7c:	91 05       	cpc	r25, r1
    1d7e:	d1 f0       	breq	.+52     	; 0x1db4 <GPIO_readPort+0x5e>
    1d80:	2b 81       	ldd	r18, Y+3	; 0x03
    1d82:	3c 81       	ldd	r19, Y+4	; 0x04
    1d84:	22 30       	cpi	r18, 0x02	; 2
    1d86:	31 05       	cpc	r19, r1
    1d88:	2c f4       	brge	.+10     	; 0x1d94 <GPIO_readPort+0x3e>
    1d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8e:	00 97       	sbiw	r24, 0x00	; 0
    1d90:	61 f0       	breq	.+24     	; 0x1daa <GPIO_readPort+0x54>
    1d92:	1e c0       	rjmp	.+60     	; 0x1dd0 <GPIO_readPort+0x7a>
    1d94:	2b 81       	ldd	r18, Y+3	; 0x03
    1d96:	3c 81       	ldd	r19, Y+4	; 0x04
    1d98:	22 30       	cpi	r18, 0x02	; 2
    1d9a:	31 05       	cpc	r19, r1
    1d9c:	81 f0       	breq	.+32     	; 0x1dbe <GPIO_readPort+0x68>
    1d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1da0:	9c 81       	ldd	r25, Y+4	; 0x04
    1da2:	83 30       	cpi	r24, 0x03	; 3
    1da4:	91 05       	cpc	r25, r1
    1da6:	81 f0       	breq	.+32     	; 0x1dc8 <GPIO_readPort+0x72>
    1da8:	13 c0       	rjmp	.+38     	; 0x1dd0 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			PINA = port_value;
    1daa:	e9 e3       	ldi	r30, 0x39	; 57
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	89 81       	ldd	r24, Y+1	; 0x01
    1db0:	80 83       	st	Z, r24
    1db2:	0e c0       	rjmp	.+28     	; 0x1dd0 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			PINB = port_value;
    1db4:	e6 e3       	ldi	r30, 0x36	; 54
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	89 81       	ldd	r24, Y+1	; 0x01
    1dba:	80 83       	st	Z, r24
    1dbc:	09 c0       	rjmp	.+18     	; 0x1dd0 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			PINC = port_value;
    1dbe:	e3 e3       	ldi	r30, 0x33	; 51
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	89 81       	ldd	r24, Y+1	; 0x01
    1dc4:	80 83       	st	Z, r24
    1dc6:	04 c0       	rjmp	.+8      	; 0x1dd0 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			PIND = port_value;
    1dc8:	e0 e3       	ldi	r30, 0x30	; 48
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	89 81       	ldd	r24, Y+1	; 0x01
    1dce:	80 83       	st	Z, r24
			break;
		}
	}
	return port_value;
    1dd0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dd2:	0f 90       	pop	r0
    1dd4:	0f 90       	pop	r0
    1dd6:	0f 90       	pop	r0
    1dd8:	0f 90       	pop	r0
    1dda:	cf 91       	pop	r28
    1ddc:	df 91       	pop	r29
    1dde:	08 95       	ret

00001de0 <ADC_init>:
 * ADIF = 1
 * 125Khz --> ADC must operate in range 50-200Khz
 * so if F_CPU = 8MHZ SO PRESCALER 64
 *
 */
void ADC_init(ADC_ConfigType * type){
    1de0:	df 93       	push	r29
    1de2:	cf 93       	push	r28
    1de4:	00 d0       	rcall	.+0      	; 0x1de6 <ADC_init+0x6>
    1de6:	cd b7       	in	r28, 0x3d	; 61
    1de8:	de b7       	in	r29, 0x3e	; 62
    1dea:	9a 83       	std	Y+2, r25	; 0x02
    1dec:	89 83       	std	Y+1, r24	; 0x01

	ADMUX |= type->ref;
    1dee:	a7 e2       	ldi	r26, 0x27	; 39
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	e7 e2       	ldi	r30, 0x27	; 39
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	90 81       	ld	r25, Z
    1df8:	e9 81       	ldd	r30, Y+1	; 0x01
    1dfa:	fa 81       	ldd	r31, Y+2	; 0x02
    1dfc:	81 81       	ldd	r24, Z+1	; 0x01
    1dfe:	89 2b       	or	r24, r25
    1e00:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADC_ENABLE_BIT) | type->prescaler ;
    1e02:	a6 e2       	ldi	r26, 0x26	; 38
    1e04:	b0 e0       	ldi	r27, 0x00	; 0
    1e06:	e6 e2       	ldi	r30, 0x26	; 38
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	90 81       	ld	r25, Z
    1e0c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e0e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e10:	80 81       	ld	r24, Z
    1e12:	89 2b       	or	r24, r25
    1e14:	80 68       	ori	r24, 0x80	; 128
    1e16:	8c 93       	st	X, r24


}
    1e18:	0f 90       	pop	r0
    1e1a:	0f 90       	pop	r0
    1e1c:	cf 91       	pop	r28
    1e1e:	df 91       	pop	r29
    1e20:	08 95       	ret

00001e22 <ADC_readChannel>:
uint16 ADC_readChannel(uint8 channel_num)
{
    1e22:	df 93       	push	r29
    1e24:	cf 93       	push	r28
    1e26:	0f 92       	push	r0
    1e28:	cd b7       	in	r28, 0x3d	; 61
    1e2a:	de b7       	in	r29, 0x3e	; 62
    1e2c:	89 83       	std	Y+1, r24	; 0x01
	channel_num &= 0x07;
    1e2e:	89 81       	ldd	r24, Y+1	; 0x01
    1e30:	87 70       	andi	r24, 0x07	; 7
    1e32:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0XE0;
    1e34:	a7 e2       	ldi	r26, 0x27	; 39
    1e36:	b0 e0       	ldi	r27, 0x00	; 0
    1e38:	e7 e2       	ldi	r30, 0x27	; 39
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	80 7e       	andi	r24, 0xE0	; 224
    1e40:	8c 93       	st	X, r24
	ADMUX |= channel_num;
    1e42:	a7 e2       	ldi	r26, 0x27	; 39
    1e44:	b0 e0       	ldi	r27, 0x00	; 0
    1e46:	e7 e2       	ldi	r30, 0x27	; 39
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	90 81       	ld	r25, Z
    1e4c:	89 81       	ldd	r24, Y+1	; 0x01
    1e4e:	89 2b       	or	r24, r25
    1e50:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC);
    1e52:	a6 e2       	ldi	r26, 0x26	; 38
    1e54:	b0 e0       	ldi	r27, 0x00	; 0
    1e56:	e6 e2       	ldi	r30, 0x26	; 38
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	80 81       	ld	r24, Z
    1e5c:	80 64       	ori	r24, 0x40	; 64
    1e5e:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,ADIF));
    1e60:	e6 e2       	ldi	r30, 0x26	; 38
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	80 81       	ld	r24, Z
    1e66:	88 2f       	mov	r24, r24
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	80 71       	andi	r24, 0x10	; 16
    1e6c:	90 70       	andi	r25, 0x00	; 0
    1e6e:	00 97       	sbiw	r24, 0x00	; 0
    1e70:	b9 f3       	breq	.-18     	; 0x1e60 <ADC_readChannel+0x3e>
	SET_BIT(ADCSRA,ADIF);
    1e72:	a6 e2       	ldi	r26, 0x26	; 38
    1e74:	b0 e0       	ldi	r27, 0x00	; 0
    1e76:	e6 e2       	ldi	r30, 0x26	; 38
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	80 81       	ld	r24, Z
    1e7c:	80 61       	ori	r24, 0x10	; 16
    1e7e:	8c 93       	st	X, r24
	return ADC;
    1e80:	e4 e2       	ldi	r30, 0x24	; 36
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	80 81       	ld	r24, Z
    1e86:	91 81       	ldd	r25, Z+1	; 0x01
}
    1e88:	0f 90       	pop	r0
    1e8a:	cf 91       	pop	r28
    1e8c:	df 91       	pop	r29
    1e8e:	08 95       	ret

00001e90 <Ultrasonic_init>:

uint16 time;
uint16 distance;

void Ultrasonic_init(void)
{
    1e90:	df 93       	push	r29
    1e92:	cf 93       	push	r28
    1e94:	00 d0       	rcall	.+0      	; 0x1e96 <Ultrasonic_init+0x6>
    1e96:	cd b7       	in	r28, 0x3d	; 61
    1e98:	de b7       	in	r29, 0x3e	; 62
	Icu_ConfigType config = {F_CPU_8,RISING};
    1e9a:	82 e0       	ldi	r24, 0x02	; 2
    1e9c:	89 83       	std	Y+1, r24	; 0x01
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	8a 83       	std	Y+2, r24	; 0x02
	GPIO_setupPinDirection(TRIGGER_PORT, TRIGGER_PIN, PIN_OUTPUT);
    1ea2:	83 e0       	ldi	r24, 0x03	; 3
    1ea4:	65 e0       	ldi	r22, 0x05	; 5
    1ea6:	41 e0       	ldi	r20, 0x01	; 1
    1ea8:	0e 94 b2 0b 	call	0x1764	; 0x1764 <GPIO_setupPinDirection>
	GPIO_writePin(TRIGGER_PORT, TRIGGER_PIN, LOGIC_LOW);
    1eac:	83 e0       	ldi	r24, 0x03	; 3
    1eae:	65 e0       	ldi	r22, 0x05	; 5
    1eb0:	40 e0       	ldi	r20, 0x00	; 0
    1eb2:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
	GPIO_setupPinDirection(ECHO_PORT, ECHO_PIN, PIN_INPUT);
    1eb6:	83 e0       	ldi	r24, 0x03	; 3
    1eb8:	66 e0       	ldi	r22, 0x06	; 6
    1eba:	40 e0       	ldi	r20, 0x00	; 0
    1ebc:	0e 94 b2 0b 	call	0x1764	; 0x1764 <GPIO_setupPinDirection>
	Icu_init(&config);
    1ec0:	ce 01       	movw	r24, r28
    1ec2:	01 96       	adiw	r24, 0x01	; 1
    1ec4:	0e 94 ef 09 	call	0x13de	; 0x13de <Icu_init>
	Icu_setCallBack(&Ultrasonic_edgeProcessing);
    1ec8:	8a e7       	ldi	r24, 0x7A	; 122
    1eca:	90 e1       	ldi	r25, 0x10	; 16
    1ecc:	0e 94 38 0a 	call	0x1470	; 0x1470 <Icu_setCallBack>
}
    1ed0:	0f 90       	pop	r0
    1ed2:	0f 90       	pop	r0
    1ed4:	cf 91       	pop	r28
    1ed6:	df 91       	pop	r29
    1ed8:	08 95       	ret

00001eda <Ultrasonic_Trigger>:
void Ultrasonic_Trigger(void)
{
    1eda:	df 93       	push	r29
    1edc:	cf 93       	push	r28
    1ede:	cd b7       	in	r28, 0x3d	; 61
    1ee0:	de b7       	in	r29, 0x3e	; 62
    1ee2:	68 97       	sbiw	r28, 0x18	; 24
    1ee4:	0f b6       	in	r0, 0x3f	; 63
    1ee6:	f8 94       	cli
    1ee8:	de bf       	out	0x3e, r29	; 62
    1eea:	0f be       	out	0x3f, r0	; 63
    1eec:	cd bf       	out	0x3d, r28	; 61
	GPIO_writePin(TRIGGER_PORT, TRIGGER_PIN, LOGIC_HIGH);
    1eee:	83 e0       	ldi	r24, 0x03	; 3
    1ef0:	65 e0       	ldi	r22, 0x05	; 5
    1ef2:	41 e0       	ldi	r20, 0x01	; 1
    1ef4:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	a0 e2       	ldi	r26, 0x20	; 32
    1efe:	b1 e4       	ldi	r27, 0x41	; 65
    1f00:	8d 8b       	std	Y+21, r24	; 0x15
    1f02:	9e 8b       	std	Y+22, r25	; 0x16
    1f04:	af 8b       	std	Y+23, r26	; 0x17
    1f06:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f08:	6d 89       	ldd	r22, Y+21	; 0x15
    1f0a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f0c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f0e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f10:	2b ea       	ldi	r18, 0xAB	; 171
    1f12:	3a ea       	ldi	r19, 0xAA	; 170
    1f14:	4a e2       	ldi	r20, 0x2A	; 42
    1f16:	50 e4       	ldi	r21, 0x40	; 64
    1f18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	89 8b       	std	Y+17, r24	; 0x11
    1f22:	9a 8b       	std	Y+18, r25	; 0x12
    1f24:	ab 8b       	std	Y+19, r26	; 0x13
    1f26:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1f28:	69 89       	ldd	r22, Y+17	; 0x11
    1f2a:	7a 89       	ldd	r23, Y+18	; 0x12
    1f2c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f2e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	40 e8       	ldi	r20, 0x80	; 128
    1f36:	5f e3       	ldi	r21, 0x3F	; 63
    1f38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f3c:	88 23       	and	r24, r24
    1f3e:	1c f4       	brge	.+6      	; 0x1f46 <Ultrasonic_Trigger+0x6c>
		__ticks = 1;
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	88 8b       	std	Y+16, r24	; 0x10
    1f44:	91 c0       	rjmp	.+290    	; 0x2068 <Ultrasonic_Trigger+0x18e>
	else if (__tmp > 255)
    1f46:	69 89       	ldd	r22, Y+17	; 0x11
    1f48:	7a 89       	ldd	r23, Y+18	; 0x12
    1f4a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f4c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f4e:	20 e0       	ldi	r18, 0x00	; 0
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	4f e7       	ldi	r20, 0x7F	; 127
    1f54:	53 e4       	ldi	r21, 0x43	; 67
    1f56:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f5a:	18 16       	cp	r1, r24
    1f5c:	0c f0       	brlt	.+2      	; 0x1f60 <Ultrasonic_Trigger+0x86>
    1f5e:	7b c0       	rjmp	.+246    	; 0x2056 <Ultrasonic_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    1f60:	6d 89       	ldd	r22, Y+21	; 0x15
    1f62:	7e 89       	ldd	r23, Y+22	; 0x16
    1f64:	8f 89       	ldd	r24, Y+23	; 0x17
    1f66:	98 8d       	ldd	r25, Y+24	; 0x18
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	4a e7       	ldi	r20, 0x7A	; 122
    1f6e:	54 e4       	ldi	r21, 0x44	; 68
    1f70:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	8c 87       	std	Y+12, r24	; 0x0c
    1f7a:	9d 87       	std	Y+13, r25	; 0x0d
    1f7c:	ae 87       	std	Y+14, r26	; 0x0e
    1f7e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f80:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f82:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f84:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f86:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	4a ef       	ldi	r20, 0xFA	; 250
    1f8e:	54 e4       	ldi	r21, 0x44	; 68
    1f90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	88 87       	std	Y+8, r24	; 0x08
    1f9a:	99 87       	std	Y+9, r25	; 0x09
    1f9c:	aa 87       	std	Y+10, r26	; 0x0a
    1f9e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1fa0:	68 85       	ldd	r22, Y+8	; 0x08
    1fa2:	79 85       	ldd	r23, Y+9	; 0x09
    1fa4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fa6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	40 e8       	ldi	r20, 0x80	; 128
    1fae:	5f e3       	ldi	r21, 0x3F	; 63
    1fb0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fb4:	88 23       	and	r24, r24
    1fb6:	2c f4       	brge	.+10     	; 0x1fc2 <Ultrasonic_Trigger+0xe8>
		__ticks = 1;
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	9f 83       	std	Y+7, r25	; 0x07
    1fbe:	8e 83       	std	Y+6, r24	; 0x06
    1fc0:	3f c0       	rjmp	.+126    	; 0x2040 <Ultrasonic_Trigger+0x166>
	else if (__tmp > 65535)
    1fc2:	68 85       	ldd	r22, Y+8	; 0x08
    1fc4:	79 85       	ldd	r23, Y+9	; 0x09
    1fc6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fc8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	3f ef       	ldi	r19, 0xFF	; 255
    1fce:	4f e7       	ldi	r20, 0x7F	; 127
    1fd0:	57 e4       	ldi	r21, 0x47	; 71
    1fd2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fd6:	18 16       	cp	r1, r24
    1fd8:	4c f5       	brge	.+82     	; 0x202c <Ultrasonic_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fda:	6c 85       	ldd	r22, Y+12	; 0x0c
    1fdc:	7d 85       	ldd	r23, Y+13	; 0x0d
    1fde:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fe0:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	40 e2       	ldi	r20, 0x20	; 32
    1fe8:	51 e4       	ldi	r21, 0x41	; 65
    1fea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	bc 01       	movw	r22, r24
    1ff4:	cd 01       	movw	r24, r26
    1ff6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	9f 83       	std	Y+7, r25	; 0x07
    2000:	8e 83       	std	Y+6, r24	; 0x06
    2002:	0f c0       	rjmp	.+30     	; 0x2022 <Ultrasonic_Trigger+0x148>
    2004:	88 ec       	ldi	r24, 0xC8	; 200
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	9d 83       	std	Y+5, r25	; 0x05
    200a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    200c:	8c 81       	ldd	r24, Y+4	; 0x04
    200e:	9d 81       	ldd	r25, Y+5	; 0x05
    2010:	01 97       	sbiw	r24, 0x01	; 1
    2012:	f1 f7       	brne	.-4      	; 0x2010 <Ultrasonic_Trigger+0x136>
    2014:	9d 83       	std	Y+5, r25	; 0x05
    2016:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2018:	8e 81       	ldd	r24, Y+6	; 0x06
    201a:	9f 81       	ldd	r25, Y+7	; 0x07
    201c:	01 97       	sbiw	r24, 0x01	; 1
    201e:	9f 83       	std	Y+7, r25	; 0x07
    2020:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2022:	8e 81       	ldd	r24, Y+6	; 0x06
    2024:	9f 81       	ldd	r25, Y+7	; 0x07
    2026:	00 97       	sbiw	r24, 0x00	; 0
    2028:	69 f7       	brne	.-38     	; 0x2004 <Ultrasonic_Trigger+0x12a>
    202a:	24 c0       	rjmp	.+72     	; 0x2074 <Ultrasonic_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    202c:	68 85       	ldd	r22, Y+8	; 0x08
    202e:	79 85       	ldd	r23, Y+9	; 0x09
    2030:	8a 85       	ldd	r24, Y+10	; 0x0a
    2032:	9b 85       	ldd	r25, Y+11	; 0x0b
    2034:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2038:	dc 01       	movw	r26, r24
    203a:	cb 01       	movw	r24, r22
    203c:	9f 83       	std	Y+7, r25	; 0x07
    203e:	8e 83       	std	Y+6, r24	; 0x06
    2040:	8e 81       	ldd	r24, Y+6	; 0x06
    2042:	9f 81       	ldd	r25, Y+7	; 0x07
    2044:	9b 83       	std	Y+3, r25	; 0x03
    2046:	8a 83       	std	Y+2, r24	; 0x02
    2048:	8a 81       	ldd	r24, Y+2	; 0x02
    204a:	9b 81       	ldd	r25, Y+3	; 0x03
    204c:	01 97       	sbiw	r24, 0x01	; 1
    204e:	f1 f7       	brne	.-4      	; 0x204c <Ultrasonic_Trigger+0x172>
    2050:	9b 83       	std	Y+3, r25	; 0x03
    2052:	8a 83       	std	Y+2, r24	; 0x02
    2054:	0f c0       	rjmp	.+30     	; 0x2074 <Ultrasonic_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2056:	69 89       	ldd	r22, Y+17	; 0x11
    2058:	7a 89       	ldd	r23, Y+18	; 0x12
    205a:	8b 89       	ldd	r24, Y+19	; 0x13
    205c:	9c 89       	ldd	r25, Y+20	; 0x14
    205e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2062:	dc 01       	movw	r26, r24
    2064:	cb 01       	movw	r24, r22
    2066:	88 8b       	std	Y+16, r24	; 0x10
    2068:	88 89       	ldd	r24, Y+16	; 0x10
    206a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    206c:	89 81       	ldd	r24, Y+1	; 0x01
    206e:	8a 95       	dec	r24
    2070:	f1 f7       	brne	.-4      	; 0x206e <Ultrasonic_Trigger+0x194>
    2072:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	GPIO_writePin(TRIGGER_PORT, TRIGGER_PIN, LOGIC_LOW);
    2074:	83 e0       	ldi	r24, 0x03	; 3
    2076:	65 e0       	ldi	r22, 0x05	; 5
    2078:	40 e0       	ldi	r20, 0x00	; 0
    207a:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
}
    207e:	68 96       	adiw	r28, 0x18	; 24
    2080:	0f b6       	in	r0, 0x3f	; 63
    2082:	f8 94       	cli
    2084:	de bf       	out	0x3e, r29	; 62
    2086:	0f be       	out	0x3f, r0	; 63
    2088:	cd bf       	out	0x3d, r28	; 61
    208a:	cf 91       	pop	r28
    208c:	df 91       	pop	r29
    208e:	08 95       	ret

00002090 <Ultrasonic_readDistance>:

uint16 Ultrasonic_readDistance(void)
{
    2090:	df 93       	push	r29
    2092:	cf 93       	push	r28
    2094:	cd b7       	in	r28, 0x3d	; 61
    2096:	de b7       	in	r29, 0x3e	; 62
	Ultrasonic_Trigger();
    2098:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <Ultrasonic_Trigger>
	Icu_setEdgeDetectionType(RISING);
    209c:	81 e0       	ldi	r24, 0x01	; 1
    209e:	0e 94 4a 0a 	call	0x1494	; 0x1494 <Icu_setEdgeDetectionType>
	/*(34400*timer)/2
	   17200*timer
	   17200*(ticks)*10^-6
	   distance=time*0.0172
	 */
	distance=time*0.0172;
    20a2:	80 91 85 01 	lds	r24, 0x0185
    20a6:	90 91 86 01 	lds	r25, 0x0186
    20aa:	cc 01       	movw	r24, r24
    20ac:	a0 e0       	ldi	r26, 0x00	; 0
    20ae:	b0 e0       	ldi	r27, 0x00	; 0
    20b0:	bc 01       	movw	r22, r24
    20b2:	cd 01       	movw	r24, r26
    20b4:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	bc 01       	movw	r22, r24
    20be:	cd 01       	movw	r24, r26
    20c0:	24 e0       	ldi	r18, 0x04	; 4
    20c2:	37 ee       	ldi	r19, 0xE7	; 231
    20c4:	4c e8       	ldi	r20, 0x8C	; 140
    20c6:	5c e3       	ldi	r21, 0x3C	; 60
    20c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20cc:	dc 01       	movw	r26, r24
    20ce:	cb 01       	movw	r24, r22
    20d0:	bc 01       	movw	r22, r24
    20d2:	cd 01       	movw	r24, r26
    20d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	90 93 73 01 	sts	0x0173, r25
    20e0:	80 93 72 01 	sts	0x0172, r24
	return (distance+1);
    20e4:	80 91 72 01 	lds	r24, 0x0172
    20e8:	90 91 73 01 	lds	r25, 0x0173
    20ec:	01 96       	adiw	r24, 0x01	; 1

}
    20ee:	cf 91       	pop	r28
    20f0:	df 91       	pop	r29
    20f2:	08 95       	ret

000020f4 <Ultrasonic_edgeProcessing>:
void Ultrasonic_edgeProcessing(void)
{
    20f4:	df 93       	push	r29
    20f6:	cf 93       	push	r28
    20f8:	cd b7       	in	r28, 0x3d	; 61
    20fa:	de b7       	in	r29, 0x3e	; 62
	time = Icu_getInputCaptureValue();
    20fc:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <Icu_getInputCaptureValue>
    2100:	90 93 86 01 	sts	0x0186, r25
    2104:	80 93 85 01 	sts	0x0185, r24
	Icu_clearTimerValue();
    2108:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <Icu_clearTimerValue>
	Icu_setEdgeDetectionType(FALLING);
    210c:	80 e0       	ldi	r24, 0x00	; 0
    210e:	0e 94 4a 0a 	call	0x1494	; 0x1494 <Icu_setEdgeDetectionType>
}
    2112:	cf 91       	pop	r28
    2114:	df 91       	pop	r29
    2116:	08 95       	ret

00002118 <AC_DcMotor_Init>:
#include "../../MCAL/GPIO/gpio.h"
#include "ac_dc_Motor.h"


void AC_DcMotor_Init(void)
{
    2118:	df 93       	push	r29
    211a:	cf 93       	push	r28
    211c:	cd b7       	in	r28, 0x3d	; 61
    211e:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection (AC_DC_PORT_ID,AC_DC_ANTI_PIN_ID,PIN_OUTPUT);
    2120:	80 e0       	ldi	r24, 0x00	; 0
    2122:	61 e0       	ldi	r22, 0x01	; 1
    2124:	41 e0       	ldi	r20, 0x01	; 1
    2126:	0e 94 b2 0b 	call	0x1764	; 0x1764 <GPIO_setupPinDirection>
	GPIO_setupPinDirection (AC_DC_PORT_ID,AC_DC_CLOCK_PIN_ID,PIN_OUTPUT);
    212a:	80 e0       	ldi	r24, 0x00	; 0
    212c:	60 e0       	ldi	r22, 0x00	; 0
    212e:	41 e0       	ldi	r20, 0x01	; 1
    2130:	0e 94 b2 0b 	call	0x1764	; 0x1764 <GPIO_setupPinDirection>
	GPIO_writePin (AC_DC_PORT_ID,AC_DC_ANTI_PIN_ID,LOGIC_LOW);
    2134:	80 e0       	ldi	r24, 0x00	; 0
    2136:	61 e0       	ldi	r22, 0x01	; 1
    2138:	40 e0       	ldi	r20, 0x00	; 0
    213a:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
	GPIO_writePin (AC_DC_PORT_ID,AC_DC_CLOCK_PIN_ID,LOGIC_LOW);
    213e:	80 e0       	ldi	r24, 0x00	; 0
    2140:	60 e0       	ldi	r22, 0x00	; 0
    2142:	40 e0       	ldi	r20, 0x00	; 0
    2144:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>

}
    2148:	cf 91       	pop	r28
    214a:	df 91       	pop	r29
    214c:	08 95       	ret

0000214e <AC_DcMotor_Rotate>:

void AC_DcMotor_Rotate(AC_DcMotor_State state,uint8 speed)
{
    214e:	df 93       	push	r29
    2150:	cf 93       	push	r28
    2152:	00 d0       	rcall	.+0      	; 0x2154 <AC_DcMotor_Rotate+0x6>
    2154:	cd b7       	in	r28, 0x3d	; 61
    2156:	de b7       	in	r29, 0x3e	; 62
    2158:	89 83       	std	Y+1, r24	; 0x01
    215a:	6a 83       	std	Y+2, r22	; 0x02
	PWM_Timer0_Start (speed);
    215c:	8a 81       	ldd	r24, Y+2	; 0x02
    215e:	0e 94 76 09 	call	0x12ec	; 0x12ec <PWM_Timer0_Start>
	if (state == STOP1)
    2162:	89 81       	ldd	r24, Y+1	; 0x01
    2164:	88 23       	and	r24, r24
    2166:	59 f4       	brne	.+22     	; 0x217e <AC_DcMotor_Rotate+0x30>
	{
		/*Stop the motor*/
		GPIO_writePin (AC_DC_PORT_ID,AC_DC_ANTI_PIN_ID,LOGIC_LOW);
    2168:	80 e0       	ldi	r24, 0x00	; 0
    216a:	61 e0       	ldi	r22, 0x01	; 1
    216c:	40 e0       	ldi	r20, 0x00	; 0
    216e:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
		GPIO_writePin (AC_DC_PORT_ID,AC_DC_CLOCK_PIN_ID,LOGIC_LOW);
    2172:	80 e0       	ldi	r24, 0x00	; 0
    2174:	60 e0       	ldi	r22, 0x00	; 0
    2176:	40 e0       	ldi	r20, 0x00	; 0
    2178:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
    217c:	1b c0       	rjmp	.+54     	; 0x21b4 <AC_DcMotor_Rotate+0x66>
	}

	else if (state == CLOCKWISE1)
    217e:	89 81       	ldd	r24, Y+1	; 0x01
    2180:	81 30       	cpi	r24, 0x01	; 1
    2182:	59 f4       	brne	.+22     	; 0x219a <AC_DcMotor_Rotate+0x4c>
	{
		/*Rotate Clockwise*/
		GPIO_writePin (AC_DC_PORT_ID,AC_DC_ANTI_PIN_ID,LOGIC_LOW);
    2184:	80 e0       	ldi	r24, 0x00	; 0
    2186:	61 e0       	ldi	r22, 0x01	; 1
    2188:	40 e0       	ldi	r20, 0x00	; 0
    218a:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
		GPIO_writePin (AC_DC_PORT_ID,AC_DC_CLOCK_PIN_ID,LOGIC_HIGH);
    218e:	80 e0       	ldi	r24, 0x00	; 0
    2190:	60 e0       	ldi	r22, 0x00	; 0
    2192:	41 e0       	ldi	r20, 0x01	; 1
    2194:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
    2198:	0d c0       	rjmp	.+26     	; 0x21b4 <AC_DcMotor_Rotate+0x66>

	}

	else if (state == ANTICLOCKWISE1)
    219a:	89 81       	ldd	r24, Y+1	; 0x01
    219c:	82 30       	cpi	r24, 0x02	; 2
    219e:	51 f4       	brne	.+20     	; 0x21b4 <AC_DcMotor_Rotate+0x66>
	{
		/*Rotate AntiClockwise*/
		GPIO_writePin (AC_DC_PORT_ID,AC_DC_ANTI_PIN_ID,LOGIC_HIGH);
    21a0:	80 e0       	ldi	r24, 0x00	; 0
    21a2:	61 e0       	ldi	r22, 0x01	; 1
    21a4:	41 e0       	ldi	r20, 0x01	; 1
    21a6:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
		GPIO_writePin (AC_DC_PORT_ID,AC_DC_CLOCK_PIN_ID,LOGIC_LOW);
    21aa:	80 e0       	ldi	r24, 0x00	; 0
    21ac:	60 e0       	ldi	r22, 0x00	; 0
    21ae:	40 e0       	ldi	r20, 0x00	; 0
    21b0:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
	}
}
    21b4:	0f 90       	pop	r0
    21b6:	0f 90       	pop	r0
    21b8:	cf 91       	pop	r28
    21ba:	df 91       	pop	r29
    21bc:	08 95       	ret

000021be <DcMotor_Init>:
#include "../../MCAL/GPIO/gpio.h"
#include "dc_Motor.h"


void DcMotor_Init(void)
{
    21be:	df 93       	push	r29
    21c0:	cf 93       	push	r28
    21c2:	cd b7       	in	r28, 0x3d	; 61
    21c4:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection (DC_PORT_ID,DC_ANTI_PIN_ID,PIN_OUTPUT);
    21c6:	82 e0       	ldi	r24, 0x02	; 2
    21c8:	65 e0       	ldi	r22, 0x05	; 5
    21ca:	41 e0       	ldi	r20, 0x01	; 1
    21cc:	0e 94 b2 0b 	call	0x1764	; 0x1764 <GPIO_setupPinDirection>
	GPIO_setupPinDirection (DC_PORT_ID,DC_CLOCK_PIN_ID,PIN_OUTPUT);
    21d0:	82 e0       	ldi	r24, 0x02	; 2
    21d2:	64 e0       	ldi	r22, 0x04	; 4
    21d4:	41 e0       	ldi	r20, 0x01	; 1
    21d6:	0e 94 b2 0b 	call	0x1764	; 0x1764 <GPIO_setupPinDirection>
	GPIO_writePin (DC_PORT_ID,DC_ANTI_PIN_ID,LOGIC_LOW);
    21da:	82 e0       	ldi	r24, 0x02	; 2
    21dc:	65 e0       	ldi	r22, 0x05	; 5
    21de:	40 e0       	ldi	r20, 0x00	; 0
    21e0:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
	GPIO_writePin (DC_PORT_ID,DC_CLOCK_PIN_ID,LOGIC_LOW);
    21e4:	82 e0       	ldi	r24, 0x02	; 2
    21e6:	64 e0       	ldi	r22, 0x04	; 4
    21e8:	40 e0       	ldi	r20, 0x00	; 0
    21ea:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>

}
    21ee:	cf 91       	pop	r28
    21f0:	df 91       	pop	r29
    21f2:	08 95       	ret

000021f4 <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state)
{
    21f4:	df 93       	push	r29
    21f6:	cf 93       	push	r28
    21f8:	0f 92       	push	r0
    21fa:	cd b7       	in	r28, 0x3d	; 61
    21fc:	de b7       	in	r29, 0x3e	; 62
    21fe:	89 83       	std	Y+1, r24	; 0x01
	if (state == STOP)
    2200:	89 81       	ldd	r24, Y+1	; 0x01
    2202:	88 23       	and	r24, r24
    2204:	59 f4       	brne	.+22     	; 0x221c <DcMotor_Rotate+0x28>
	{
		/*Stop the motor*/
		GPIO_writePin (DC_PORT_ID,DC_ANTI_PIN_ID,LOGIC_LOW);
    2206:	82 e0       	ldi	r24, 0x02	; 2
    2208:	65 e0       	ldi	r22, 0x05	; 5
    220a:	40 e0       	ldi	r20, 0x00	; 0
    220c:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
		GPIO_writePin (DC_PORT_ID,DC_CLOCK_PIN_ID,LOGIC_LOW);
    2210:	82 e0       	ldi	r24, 0x02	; 2
    2212:	64 e0       	ldi	r22, 0x04	; 4
    2214:	40 e0       	ldi	r20, 0x00	; 0
    2216:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
    221a:	1b c0       	rjmp	.+54     	; 0x2252 <DcMotor_Rotate+0x5e>
	}

	else if (state == CLOCKWISE)
    221c:	89 81       	ldd	r24, Y+1	; 0x01
    221e:	81 30       	cpi	r24, 0x01	; 1
    2220:	59 f4       	brne	.+22     	; 0x2238 <DcMotor_Rotate+0x44>
	{
		/*Rotate Clockwise*/
		GPIO_writePin (DC_PORT_ID,DC_ANTI_PIN_ID,LOGIC_LOW);
    2222:	82 e0       	ldi	r24, 0x02	; 2
    2224:	65 e0       	ldi	r22, 0x05	; 5
    2226:	40 e0       	ldi	r20, 0x00	; 0
    2228:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
		GPIO_writePin (DC_PORT_ID,DC_CLOCK_PIN_ID,LOGIC_HIGH);
    222c:	82 e0       	ldi	r24, 0x02	; 2
    222e:	64 e0       	ldi	r22, 0x04	; 4
    2230:	41 e0       	ldi	r20, 0x01	; 1
    2232:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
    2236:	0d c0       	rjmp	.+26     	; 0x2252 <DcMotor_Rotate+0x5e>

	}

	else if (state == ANTICLOCKWISE)
    2238:	89 81       	ldd	r24, Y+1	; 0x01
    223a:	82 30       	cpi	r24, 0x02	; 2
    223c:	51 f4       	brne	.+20     	; 0x2252 <DcMotor_Rotate+0x5e>
	{
		/*Rotate AntiClockwise*/
		GPIO_writePin (DC_PORT_ID,DC_ANTI_PIN_ID,LOGIC_HIGH);
    223e:	82 e0       	ldi	r24, 0x02	; 2
    2240:	65 e0       	ldi	r22, 0x05	; 5
    2242:	41 e0       	ldi	r20, 0x01	; 1
    2244:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
		GPIO_writePin (DC_PORT_ID,DC_CLOCK_PIN_ID,LOGIC_LOW);
    2248:	82 e0       	ldi	r24, 0x02	; 2
    224a:	64 e0       	ldi	r22, 0x04	; 4
    224c:	40 e0       	ldi	r20, 0x00	; 0
    224e:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
	}
}
    2252:	0f 90       	pop	r0
    2254:	cf 91       	pop	r28
    2256:	df 91       	pop	r29
    2258:	08 95       	ret

0000225a <LM35_getTemperature>:
#include "lm35_sensor.h"
#include "../../MCAL/ADC/adc.h"

/*calculate the temperature*/
uint8 LM35_getTemperature(void)
{
    225a:	df 93       	push	r29
    225c:	cf 93       	push	r28
    225e:	00 d0       	rcall	.+0      	; 0x2260 <LM35_getTemperature+0x6>
    2260:	0f 92       	push	r0
    2262:	cd b7       	in	r28, 0x3d	; 61
    2264:	de b7       	in	r29, 0x3e	; 62
	uint8 temp_value = 0;
    2266:	1b 82       	std	Y+3, r1	; 0x03

	uint16 adc_value = 0;
    2268:	1a 82       	std	Y+2, r1	; 0x02
    226a:	19 82       	std	Y+1, r1	; 0x01

	/* Read ADC channel where the temperature sensor is connected */
	adc_value = ADC_readChannel(SENSOR_CHANNEL_ID);
    226c:	82 e0       	ldi	r24, 0x02	; 2
    226e:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <ADC_readChannel>
    2272:	9a 83       	std	Y+2, r25	; 0x02
    2274:	89 83       	std	Y+1, r24	; 0x01

	/* Calculate the temperature from the ADC value*/
	temp_value = (uint8)(((uint32)adc_value*SENSOR_MAX_TEMPERATURE*ADC_REF_VOLT_VALUE)/(ADC_MAXIMUM_VALUE*SENSOR_MAX_VOLT_VALUE));
    2276:	89 81       	ldd	r24, Y+1	; 0x01
    2278:	9a 81       	ldd	r25, Y+2	; 0x02
    227a:	cc 01       	movw	r24, r24
    227c:	a0 e0       	ldi	r26, 0x00	; 0
    227e:	b0 e0       	ldi	r27, 0x00	; 0
    2280:	26 e9       	ldi	r18, 0x96	; 150
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	40 e0       	ldi	r20, 0x00	; 0
    2286:	50 e0       	ldi	r21, 0x00	; 0
    2288:	bc 01       	movw	r22, r24
    228a:	cd 01       	movw	r24, r26
    228c:	0e 94 78 25 	call	0x4af0	; 0x4af0 <__mulsi3>
    2290:	dc 01       	movw	r26, r24
    2292:	cb 01       	movw	r24, r22
    2294:	bc 01       	movw	r22, r24
    2296:	cd 01       	movw	r24, r26
    2298:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    229c:	dc 01       	movw	r26, r24
    229e:	cb 01       	movw	r24, r22
    22a0:	bc 01       	movw	r22, r24
    22a2:	cd 01       	movw	r24, r26
    22a4:	2a e0       	ldi	r18, 0x0A	; 10
    22a6:	37 ed       	ldi	r19, 0xD7	; 215
    22a8:	43 e2       	ldi	r20, 0x23	; 35
    22aa:	50 e4       	ldi	r21, 0x40	; 64
    22ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	bc 01       	movw	r22, r24
    22b6:	cd 01       	movw	r24, r26
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	30 ed       	ldi	r19, 0xD0	; 208
    22bc:	4f eb       	ldi	r20, 0xBF	; 191
    22be:	54 e4       	ldi	r21, 0x44	; 68
    22c0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22c4:	dc 01       	movw	r26, r24
    22c6:	cb 01       	movw	r24, r22
    22c8:	bc 01       	movw	r22, r24
    22ca:	cd 01       	movw	r24, r26
    22cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d0:	dc 01       	movw	r26, r24
    22d2:	cb 01       	movw	r24, r22
    22d4:	8b 83       	std	Y+3, r24	; 0x03

	return temp_value;
    22d6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    22d8:	0f 90       	pop	r0
    22da:	0f 90       	pop	r0
    22dc:	0f 90       	pop	r0
    22de:	cf 91       	pop	r28
    22e0:	df 91       	pop	r29
    22e2:	08 95       	ret

000022e4 <LCD_init>:

/* FUNCTION DEFINATION*/

/*Initialize the LCD*/
void LCD_init(void)
{
    22e4:	df 93       	push	r29
    22e6:	cf 93       	push	r28
    22e8:	cd b7       	in	r28, 0x3d	; 61
    22ea:	de b7       	in	r29, 0x3e	; 62
    22ec:	2e 97       	sbiw	r28, 0x0e	; 14
    22ee:	0f b6       	in	r0, 0x3f	; 63
    22f0:	f8 94       	cli
    22f2:	de bf       	out	0x3e, r29	; 62
    22f4:	0f be       	out	0x3f, r0	; 63
    22f6:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID,PIN_OUTPUT );
    22f8:	82 e0       	ldi	r24, 0x02	; 2
    22fa:	62 e0       	ldi	r22, 0x02	; 2
    22fc:	41 e0       	ldi	r20, 0x01	; 1
    22fe:	0e 94 b2 0b 	call	0x1764	; 0x1764 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID,PIN_OUTPUT );
    2302:	82 e0       	ldi	r24, 0x02	; 2
    2304:	63 e0       	ldi	r22, 0x03	; 3
    2306:	41 e0       	ldi	r20, 0x01	; 1
    2308:	0e 94 b2 0b 	call	0x1764	; 0x1764 <GPIO_setupPinDirection>
    230c:	80 e0       	ldi	r24, 0x00	; 0
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	a0 ea       	ldi	r26, 0xA0	; 160
    2312:	b1 e4       	ldi	r27, 0x41	; 65
    2314:	8b 87       	std	Y+11, r24	; 0x0b
    2316:	9c 87       	std	Y+12, r25	; 0x0c
    2318:	ad 87       	std	Y+13, r26	; 0x0d
    231a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    231c:	6b 85       	ldd	r22, Y+11	; 0x0b
    231e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2320:	8d 85       	ldd	r24, Y+13	; 0x0d
    2322:	9e 85       	ldd	r25, Y+14	; 0x0e
    2324:	20 e0       	ldi	r18, 0x00	; 0
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	4a ef       	ldi	r20, 0xFA	; 250
    232a:	54 e4       	ldi	r21, 0x44	; 68
    232c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2330:	dc 01       	movw	r26, r24
    2332:	cb 01       	movw	r24, r22
    2334:	8f 83       	std	Y+7, r24	; 0x07
    2336:	98 87       	std	Y+8, r25	; 0x08
    2338:	a9 87       	std	Y+9, r26	; 0x09
    233a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    233c:	6f 81       	ldd	r22, Y+7	; 0x07
    233e:	78 85       	ldd	r23, Y+8	; 0x08
    2340:	89 85       	ldd	r24, Y+9	; 0x09
    2342:	9a 85       	ldd	r25, Y+10	; 0x0a
    2344:	20 e0       	ldi	r18, 0x00	; 0
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	40 e8       	ldi	r20, 0x80	; 128
    234a:	5f e3       	ldi	r21, 0x3F	; 63
    234c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2350:	88 23       	and	r24, r24
    2352:	2c f4       	brge	.+10     	; 0x235e <LCD_init+0x7a>
		__ticks = 1;
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	9e 83       	std	Y+6, r25	; 0x06
    235a:	8d 83       	std	Y+5, r24	; 0x05
    235c:	3f c0       	rjmp	.+126    	; 0x23dc <LCD_init+0xf8>
	else if (__tmp > 65535)
    235e:	6f 81       	ldd	r22, Y+7	; 0x07
    2360:	78 85       	ldd	r23, Y+8	; 0x08
    2362:	89 85       	ldd	r24, Y+9	; 0x09
    2364:	9a 85       	ldd	r25, Y+10	; 0x0a
    2366:	20 e0       	ldi	r18, 0x00	; 0
    2368:	3f ef       	ldi	r19, 0xFF	; 255
    236a:	4f e7       	ldi	r20, 0x7F	; 127
    236c:	57 e4       	ldi	r21, 0x47	; 71
    236e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2372:	18 16       	cp	r1, r24
    2374:	4c f5       	brge	.+82     	; 0x23c8 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2376:	6b 85       	ldd	r22, Y+11	; 0x0b
    2378:	7c 85       	ldd	r23, Y+12	; 0x0c
    237a:	8d 85       	ldd	r24, Y+13	; 0x0d
    237c:	9e 85       	ldd	r25, Y+14	; 0x0e
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	40 e2       	ldi	r20, 0x20	; 32
    2384:	51 e4       	ldi	r21, 0x41	; 65
    2386:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	bc 01       	movw	r22, r24
    2390:	cd 01       	movw	r24, r26
    2392:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2396:	dc 01       	movw	r26, r24
    2398:	cb 01       	movw	r24, r22
    239a:	9e 83       	std	Y+6, r25	; 0x06
    239c:	8d 83       	std	Y+5, r24	; 0x05
    239e:	0f c0       	rjmp	.+30     	; 0x23be <LCD_init+0xda>
    23a0:	88 ec       	ldi	r24, 0xC8	; 200
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	9c 83       	std	Y+4, r25	; 0x04
    23a6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23a8:	8b 81       	ldd	r24, Y+3	; 0x03
    23aa:	9c 81       	ldd	r25, Y+4	; 0x04
    23ac:	01 97       	sbiw	r24, 0x01	; 1
    23ae:	f1 f7       	brne	.-4      	; 0x23ac <LCD_init+0xc8>
    23b0:	9c 83       	std	Y+4, r25	; 0x04
    23b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b4:	8d 81       	ldd	r24, Y+5	; 0x05
    23b6:	9e 81       	ldd	r25, Y+6	; 0x06
    23b8:	01 97       	sbiw	r24, 0x01	; 1
    23ba:	9e 83       	std	Y+6, r25	; 0x06
    23bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23be:	8d 81       	ldd	r24, Y+5	; 0x05
    23c0:	9e 81       	ldd	r25, Y+6	; 0x06
    23c2:	00 97       	sbiw	r24, 0x00	; 0
    23c4:	69 f7       	brne	.-38     	; 0x23a0 <LCD_init+0xbc>
    23c6:	14 c0       	rjmp	.+40     	; 0x23f0 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c8:	6f 81       	ldd	r22, Y+7	; 0x07
    23ca:	78 85       	ldd	r23, Y+8	; 0x08
    23cc:	89 85       	ldd	r24, Y+9	; 0x09
    23ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d4:	dc 01       	movw	r26, r24
    23d6:	cb 01       	movw	r24, r22
    23d8:	9e 83       	std	Y+6, r25	; 0x06
    23da:	8d 83       	std	Y+5, r24	; 0x05
    23dc:	8d 81       	ldd	r24, Y+5	; 0x05
    23de:	9e 81       	ldd	r25, Y+6	; 0x06
    23e0:	9a 83       	std	Y+2, r25	; 0x02
    23e2:	89 83       	std	Y+1, r24	; 0x01
    23e4:	89 81       	ldd	r24, Y+1	; 0x01
    23e6:	9a 81       	ldd	r25, Y+2	; 0x02
    23e8:	01 97       	sbiw	r24, 0x01	; 1
    23ea:	f1 f7       	brne	.-4      	; 0x23e8 <LCD_init+0x104>
    23ec:	9a 83       	std	Y+2, r25	; 0x02
    23ee:	89 83       	std	Y+1, r24	; 0x01

	#if(LCD_DATA_BITS_MODE == 8)
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
	LCD_SendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
#elif(LCD_DATA_BITS_MODE == 4)
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID , PIN_OUTPUT);
    23f0:	81 e0       	ldi	r24, 0x01	; 1
    23f2:	64 e0       	ldi	r22, 0x04	; 4
    23f4:	41 e0       	ldi	r20, 0x01	; 1
    23f6:	0e 94 b2 0b 	call	0x1764	; 0x1764 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID , PIN_OUTPUT);
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	65 e0       	ldi	r22, 0x05	; 5
    23fe:	41 e0       	ldi	r20, 0x01	; 1
    2400:	0e 94 b2 0b 	call	0x1764	; 0x1764 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID , PIN_OUTPUT);
    2404:	81 e0       	ldi	r24, 0x01	; 1
    2406:	66 e0       	ldi	r22, 0x06	; 6
    2408:	41 e0       	ldi	r20, 0x01	; 1
    240a:	0e 94 b2 0b 	call	0x1764	; 0x1764 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID , PIN_OUTPUT);
    240e:	81 e0       	ldi	r24, 0x01	; 1
    2410:	67 e0       	ldi	r22, 0x07	; 7
    2412:	41 e0       	ldi	r20, 0x01	; 1
    2414:	0e 94 b2 0b 	call	0x1764	; 0x1764 <GPIO_setupPinDirection>
	LCD_SendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    2418:	83 e3       	ldi	r24, 0x33	; 51
    241a:	0e 94 24 12 	call	0x2448	; 0x2448 <LCD_SendCommand>
	LCD_SendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    241e:	82 e3       	ldi	r24, 0x32	; 50
    2420:	0e 94 24 12 	call	0x2448	; 0x2448 <LCD_SendCommand>
	LCD_SendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    2424:	88 e2       	ldi	r24, 0x28	; 40
    2426:	0e 94 24 12 	call	0x2448	; 0x2448 <LCD_SendCommand>
#endif
	LCD_SendCommand(LCD_CURSOR_OFF); /* cursor off */
    242a:	8c e0       	ldi	r24, 0x0C	; 12
    242c:	0e 94 24 12 	call	0x2448	; 0x2448 <LCD_SendCommand>
	LCD_SendCommand(LCD_CLEAR_COMMAND);
    2430:	81 e0       	ldi	r24, 0x01	; 1
    2432:	0e 94 24 12 	call	0x2448	; 0x2448 <LCD_SendCommand>
}
    2436:	2e 96       	adiw	r28, 0x0e	; 14
    2438:	0f b6       	in	r0, 0x3f	; 63
    243a:	f8 94       	cli
    243c:	de bf       	out	0x3e, r29	; 62
    243e:	0f be       	out	0x3f, r0	; 63
    2440:	cd bf       	out	0x3d, r28	; 61
    2442:	cf 91       	pop	r28
    2444:	df 91       	pop	r29
    2446:	08 95       	ret

00002448 <LCD_SendCommand>:

/*SEND COMMAND*/

void LCD_SendCommand(uint8 command)
{
    2448:	0f 93       	push	r16
    244a:	1f 93       	push	r17
    244c:	df 93       	push	r29
    244e:	cf 93       	push	r28
    2450:	cd b7       	in	r28, 0x3d	; 61
    2452:	de b7       	in	r29, 0x3e	; 62
    2454:	c3 56       	subi	r28, 0x63	; 99
    2456:	d0 40       	sbci	r29, 0x00	; 0
    2458:	0f b6       	in	r0, 0x3f	; 63
    245a:	f8 94       	cli
    245c:	de bf       	out	0x3e, r29	; 62
    245e:	0f be       	out	0x3f, r0	; 63
    2460:	cd bf       	out	0x3d, r28	; 61
    2462:	fe 01       	movw	r30, r28
    2464:	ed 59       	subi	r30, 0x9D	; 157
    2466:	ff 4f       	sbci	r31, 0xFF	; 255
    2468:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);/*RS=0*/
    246a:	82 e0       	ldi	r24, 0x02	; 2
    246c:	62 e0       	ldi	r22, 0x02	; 2
    246e:	40 e0       	ldi	r20, 0x00	; 0
    2470:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
    2474:	fe 01       	movw	r30, r28
    2476:	e1 5a       	subi	r30, 0xA1	; 161
    2478:	ff 4f       	sbci	r31, 0xFF	; 255
    247a:	80 e0       	ldi	r24, 0x00	; 0
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	a0 e8       	ldi	r26, 0x80	; 128
    2480:	bf e3       	ldi	r27, 0x3F	; 63
    2482:	80 83       	st	Z, r24
    2484:	91 83       	std	Z+1, r25	; 0x01
    2486:	a2 83       	std	Z+2, r26	; 0x02
    2488:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    248a:	8e 01       	movw	r16, r28
    248c:	05 5a       	subi	r16, 0xA5	; 165
    248e:	1f 4f       	sbci	r17, 0xFF	; 255
    2490:	fe 01       	movw	r30, r28
    2492:	e1 5a       	subi	r30, 0xA1	; 161
    2494:	ff 4f       	sbci	r31, 0xFF	; 255
    2496:	60 81       	ld	r22, Z
    2498:	71 81       	ldd	r23, Z+1	; 0x01
    249a:	82 81       	ldd	r24, Z+2	; 0x02
    249c:	93 81       	ldd	r25, Z+3	; 0x03
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	4a ef       	ldi	r20, 0xFA	; 250
    24a4:	54 e4       	ldi	r21, 0x44	; 68
    24a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24aa:	dc 01       	movw	r26, r24
    24ac:	cb 01       	movw	r24, r22
    24ae:	f8 01       	movw	r30, r16
    24b0:	80 83       	st	Z, r24
    24b2:	91 83       	std	Z+1, r25	; 0x01
    24b4:	a2 83       	std	Z+2, r26	; 0x02
    24b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24b8:	fe 01       	movw	r30, r28
    24ba:	e5 5a       	subi	r30, 0xA5	; 165
    24bc:	ff 4f       	sbci	r31, 0xFF	; 255
    24be:	60 81       	ld	r22, Z
    24c0:	71 81       	ldd	r23, Z+1	; 0x01
    24c2:	82 81       	ldd	r24, Z+2	; 0x02
    24c4:	93 81       	ldd	r25, Z+3	; 0x03
    24c6:	20 e0       	ldi	r18, 0x00	; 0
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	40 e8       	ldi	r20, 0x80	; 128
    24cc:	5f e3       	ldi	r21, 0x3F	; 63
    24ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24d2:	88 23       	and	r24, r24
    24d4:	44 f4       	brge	.+16     	; 0x24e6 <LCD_SendCommand+0x9e>
		__ticks = 1;
    24d6:	fe 01       	movw	r30, r28
    24d8:	e7 5a       	subi	r30, 0xA7	; 167
    24da:	ff 4f       	sbci	r31, 0xFF	; 255
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	91 83       	std	Z+1, r25	; 0x01
    24e2:	80 83       	st	Z, r24
    24e4:	64 c0       	rjmp	.+200    	; 0x25ae <LCD_SendCommand+0x166>
	else if (__tmp > 65535)
    24e6:	fe 01       	movw	r30, r28
    24e8:	e5 5a       	subi	r30, 0xA5	; 165
    24ea:	ff 4f       	sbci	r31, 0xFF	; 255
    24ec:	60 81       	ld	r22, Z
    24ee:	71 81       	ldd	r23, Z+1	; 0x01
    24f0:	82 81       	ldd	r24, Z+2	; 0x02
    24f2:	93 81       	ldd	r25, Z+3	; 0x03
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	3f ef       	ldi	r19, 0xFF	; 255
    24f8:	4f e7       	ldi	r20, 0x7F	; 127
    24fa:	57 e4       	ldi	r21, 0x47	; 71
    24fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2500:	18 16       	cp	r1, r24
    2502:	0c f0       	brlt	.+2      	; 0x2506 <LCD_SendCommand+0xbe>
    2504:	43 c0       	rjmp	.+134    	; 0x258c <LCD_SendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2506:	fe 01       	movw	r30, r28
    2508:	e1 5a       	subi	r30, 0xA1	; 161
    250a:	ff 4f       	sbci	r31, 0xFF	; 255
    250c:	60 81       	ld	r22, Z
    250e:	71 81       	ldd	r23, Z+1	; 0x01
    2510:	82 81       	ldd	r24, Z+2	; 0x02
    2512:	93 81       	ldd	r25, Z+3	; 0x03
    2514:	20 e0       	ldi	r18, 0x00	; 0
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	40 e2       	ldi	r20, 0x20	; 32
    251a:	51 e4       	ldi	r21, 0x41	; 65
    251c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2520:	dc 01       	movw	r26, r24
    2522:	cb 01       	movw	r24, r22
    2524:	8e 01       	movw	r16, r28
    2526:	07 5a       	subi	r16, 0xA7	; 167
    2528:	1f 4f       	sbci	r17, 0xFF	; 255
    252a:	bc 01       	movw	r22, r24
    252c:	cd 01       	movw	r24, r26
    252e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2532:	dc 01       	movw	r26, r24
    2534:	cb 01       	movw	r24, r22
    2536:	f8 01       	movw	r30, r16
    2538:	91 83       	std	Z+1, r25	; 0x01
    253a:	80 83       	st	Z, r24
    253c:	1f c0       	rjmp	.+62     	; 0x257c <LCD_SendCommand+0x134>
    253e:	fe 01       	movw	r30, r28
    2540:	e9 5a       	subi	r30, 0xA9	; 169
    2542:	ff 4f       	sbci	r31, 0xFF	; 255
    2544:	88 ec       	ldi	r24, 0xC8	; 200
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	91 83       	std	Z+1, r25	; 0x01
    254a:	80 83       	st	Z, r24
    254c:	fe 01       	movw	r30, r28
    254e:	e9 5a       	subi	r30, 0xA9	; 169
    2550:	ff 4f       	sbci	r31, 0xFF	; 255
    2552:	80 81       	ld	r24, Z
    2554:	91 81       	ldd	r25, Z+1	; 0x01
    2556:	01 97       	sbiw	r24, 0x01	; 1
    2558:	f1 f7       	brne	.-4      	; 0x2556 <LCD_SendCommand+0x10e>
    255a:	fe 01       	movw	r30, r28
    255c:	e9 5a       	subi	r30, 0xA9	; 169
    255e:	ff 4f       	sbci	r31, 0xFF	; 255
    2560:	91 83       	std	Z+1, r25	; 0x01
    2562:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2564:	de 01       	movw	r26, r28
    2566:	a7 5a       	subi	r26, 0xA7	; 167
    2568:	bf 4f       	sbci	r27, 0xFF	; 255
    256a:	fe 01       	movw	r30, r28
    256c:	e7 5a       	subi	r30, 0xA7	; 167
    256e:	ff 4f       	sbci	r31, 0xFF	; 255
    2570:	80 81       	ld	r24, Z
    2572:	91 81       	ldd	r25, Z+1	; 0x01
    2574:	01 97       	sbiw	r24, 0x01	; 1
    2576:	11 96       	adiw	r26, 0x01	; 1
    2578:	9c 93       	st	X, r25
    257a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    257c:	fe 01       	movw	r30, r28
    257e:	e7 5a       	subi	r30, 0xA7	; 167
    2580:	ff 4f       	sbci	r31, 0xFF	; 255
    2582:	80 81       	ld	r24, Z
    2584:	91 81       	ldd	r25, Z+1	; 0x01
    2586:	00 97       	sbiw	r24, 0x00	; 0
    2588:	d1 f6       	brne	.-76     	; 0x253e <LCD_SendCommand+0xf6>
    258a:	27 c0       	rjmp	.+78     	; 0x25da <LCD_SendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    258c:	8e 01       	movw	r16, r28
    258e:	07 5a       	subi	r16, 0xA7	; 167
    2590:	1f 4f       	sbci	r17, 0xFF	; 255
    2592:	fe 01       	movw	r30, r28
    2594:	e5 5a       	subi	r30, 0xA5	; 165
    2596:	ff 4f       	sbci	r31, 0xFF	; 255
    2598:	60 81       	ld	r22, Z
    259a:	71 81       	ldd	r23, Z+1	; 0x01
    259c:	82 81       	ldd	r24, Z+2	; 0x02
    259e:	93 81       	ldd	r25, Z+3	; 0x03
    25a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a4:	dc 01       	movw	r26, r24
    25a6:	cb 01       	movw	r24, r22
    25a8:	f8 01       	movw	r30, r16
    25aa:	91 83       	std	Z+1, r25	; 0x01
    25ac:	80 83       	st	Z, r24
    25ae:	de 01       	movw	r26, r28
    25b0:	ab 5a       	subi	r26, 0xAB	; 171
    25b2:	bf 4f       	sbci	r27, 0xFF	; 255
    25b4:	fe 01       	movw	r30, r28
    25b6:	e7 5a       	subi	r30, 0xA7	; 167
    25b8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ba:	80 81       	ld	r24, Z
    25bc:	91 81       	ldd	r25, Z+1	; 0x01
    25be:	8d 93       	st	X+, r24
    25c0:	9c 93       	st	X, r25
    25c2:	fe 01       	movw	r30, r28
    25c4:	eb 5a       	subi	r30, 0xAB	; 171
    25c6:	ff 4f       	sbci	r31, 0xFF	; 255
    25c8:	80 81       	ld	r24, Z
    25ca:	91 81       	ldd	r25, Z+1	; 0x01
    25cc:	01 97       	sbiw	r24, 0x01	; 1
    25ce:	f1 f7       	brne	.-4      	; 0x25cc <LCD_SendCommand+0x184>
    25d0:	fe 01       	movw	r30, r28
    25d2:	eb 5a       	subi	r30, 0xAB	; 171
    25d4:	ff 4f       	sbci	r31, 0xFF	; 255
    25d6:	91 83       	std	Z+1, r25	; 0x01
    25d8:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);/*E=1*/
    25da:	82 e0       	ldi	r24, 0x02	; 2
    25dc:	63 e0       	ldi	r22, 0x03	; 3
    25de:	41 e0       	ldi	r20, 0x01	; 1
    25e0:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
    25e4:	fe 01       	movw	r30, r28
    25e6:	ef 5a       	subi	r30, 0xAF	; 175
    25e8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ea:	80 e0       	ldi	r24, 0x00	; 0
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	a0 e8       	ldi	r26, 0x80	; 128
    25f0:	bf e3       	ldi	r27, 0x3F	; 63
    25f2:	80 83       	st	Z, r24
    25f4:	91 83       	std	Z+1, r25	; 0x01
    25f6:	a2 83       	std	Z+2, r26	; 0x02
    25f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25fa:	8e 01       	movw	r16, r28
    25fc:	03 5b       	subi	r16, 0xB3	; 179
    25fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2600:	fe 01       	movw	r30, r28
    2602:	ef 5a       	subi	r30, 0xAF	; 175
    2604:	ff 4f       	sbci	r31, 0xFF	; 255
    2606:	60 81       	ld	r22, Z
    2608:	71 81       	ldd	r23, Z+1	; 0x01
    260a:	82 81       	ldd	r24, Z+2	; 0x02
    260c:	93 81       	ldd	r25, Z+3	; 0x03
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	4a ef       	ldi	r20, 0xFA	; 250
    2614:	54 e4       	ldi	r21, 0x44	; 68
    2616:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261a:	dc 01       	movw	r26, r24
    261c:	cb 01       	movw	r24, r22
    261e:	f8 01       	movw	r30, r16
    2620:	80 83       	st	Z, r24
    2622:	91 83       	std	Z+1, r25	; 0x01
    2624:	a2 83       	std	Z+2, r26	; 0x02
    2626:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2628:	fe 01       	movw	r30, r28
    262a:	e3 5b       	subi	r30, 0xB3	; 179
    262c:	ff 4f       	sbci	r31, 0xFF	; 255
    262e:	60 81       	ld	r22, Z
    2630:	71 81       	ldd	r23, Z+1	; 0x01
    2632:	82 81       	ldd	r24, Z+2	; 0x02
    2634:	93 81       	ldd	r25, Z+3	; 0x03
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	40 e8       	ldi	r20, 0x80	; 128
    263c:	5f e3       	ldi	r21, 0x3F	; 63
    263e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2642:	88 23       	and	r24, r24
    2644:	44 f4       	brge	.+16     	; 0x2656 <LCD_SendCommand+0x20e>
		__ticks = 1;
    2646:	fe 01       	movw	r30, r28
    2648:	e5 5b       	subi	r30, 0xB5	; 181
    264a:	ff 4f       	sbci	r31, 0xFF	; 255
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	91 83       	std	Z+1, r25	; 0x01
    2652:	80 83       	st	Z, r24
    2654:	64 c0       	rjmp	.+200    	; 0x271e <LCD_SendCommand+0x2d6>
	else if (__tmp > 65535)
    2656:	fe 01       	movw	r30, r28
    2658:	e3 5b       	subi	r30, 0xB3	; 179
    265a:	ff 4f       	sbci	r31, 0xFF	; 255
    265c:	60 81       	ld	r22, Z
    265e:	71 81       	ldd	r23, Z+1	; 0x01
    2660:	82 81       	ldd	r24, Z+2	; 0x02
    2662:	93 81       	ldd	r25, Z+3	; 0x03
    2664:	20 e0       	ldi	r18, 0x00	; 0
    2666:	3f ef       	ldi	r19, 0xFF	; 255
    2668:	4f e7       	ldi	r20, 0x7F	; 127
    266a:	57 e4       	ldi	r21, 0x47	; 71
    266c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2670:	18 16       	cp	r1, r24
    2672:	0c f0       	brlt	.+2      	; 0x2676 <LCD_SendCommand+0x22e>
    2674:	43 c0       	rjmp	.+134    	; 0x26fc <LCD_SendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2676:	fe 01       	movw	r30, r28
    2678:	ef 5a       	subi	r30, 0xAF	; 175
    267a:	ff 4f       	sbci	r31, 0xFF	; 255
    267c:	60 81       	ld	r22, Z
    267e:	71 81       	ldd	r23, Z+1	; 0x01
    2680:	82 81       	ldd	r24, Z+2	; 0x02
    2682:	93 81       	ldd	r25, Z+3	; 0x03
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	40 e2       	ldi	r20, 0x20	; 32
    268a:	51 e4       	ldi	r21, 0x41	; 65
    268c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	8e 01       	movw	r16, r28
    2696:	05 5b       	subi	r16, 0xB5	; 181
    2698:	1f 4f       	sbci	r17, 0xFF	; 255
    269a:	bc 01       	movw	r22, r24
    269c:	cd 01       	movw	r24, r26
    269e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a2:	dc 01       	movw	r26, r24
    26a4:	cb 01       	movw	r24, r22
    26a6:	f8 01       	movw	r30, r16
    26a8:	91 83       	std	Z+1, r25	; 0x01
    26aa:	80 83       	st	Z, r24
    26ac:	1f c0       	rjmp	.+62     	; 0x26ec <LCD_SendCommand+0x2a4>
    26ae:	fe 01       	movw	r30, r28
    26b0:	e7 5b       	subi	r30, 0xB7	; 183
    26b2:	ff 4f       	sbci	r31, 0xFF	; 255
    26b4:	88 ec       	ldi	r24, 0xC8	; 200
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	91 83       	std	Z+1, r25	; 0x01
    26ba:	80 83       	st	Z, r24
    26bc:	fe 01       	movw	r30, r28
    26be:	e7 5b       	subi	r30, 0xB7	; 183
    26c0:	ff 4f       	sbci	r31, 0xFF	; 255
    26c2:	80 81       	ld	r24, Z
    26c4:	91 81       	ldd	r25, Z+1	; 0x01
    26c6:	01 97       	sbiw	r24, 0x01	; 1
    26c8:	f1 f7       	brne	.-4      	; 0x26c6 <LCD_SendCommand+0x27e>
    26ca:	fe 01       	movw	r30, r28
    26cc:	e7 5b       	subi	r30, 0xB7	; 183
    26ce:	ff 4f       	sbci	r31, 0xFF	; 255
    26d0:	91 83       	std	Z+1, r25	; 0x01
    26d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26d4:	de 01       	movw	r26, r28
    26d6:	a5 5b       	subi	r26, 0xB5	; 181
    26d8:	bf 4f       	sbci	r27, 0xFF	; 255
    26da:	fe 01       	movw	r30, r28
    26dc:	e5 5b       	subi	r30, 0xB5	; 181
    26de:	ff 4f       	sbci	r31, 0xFF	; 255
    26e0:	80 81       	ld	r24, Z
    26e2:	91 81       	ldd	r25, Z+1	; 0x01
    26e4:	01 97       	sbiw	r24, 0x01	; 1
    26e6:	11 96       	adiw	r26, 0x01	; 1
    26e8:	9c 93       	st	X, r25
    26ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ec:	fe 01       	movw	r30, r28
    26ee:	e5 5b       	subi	r30, 0xB5	; 181
    26f0:	ff 4f       	sbci	r31, 0xFF	; 255
    26f2:	80 81       	ld	r24, Z
    26f4:	91 81       	ldd	r25, Z+1	; 0x01
    26f6:	00 97       	sbiw	r24, 0x00	; 0
    26f8:	d1 f6       	brne	.-76     	; 0x26ae <LCD_SendCommand+0x266>
    26fa:	27 c0       	rjmp	.+78     	; 0x274a <LCD_SendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26fc:	8e 01       	movw	r16, r28
    26fe:	05 5b       	subi	r16, 0xB5	; 181
    2700:	1f 4f       	sbci	r17, 0xFF	; 255
    2702:	fe 01       	movw	r30, r28
    2704:	e3 5b       	subi	r30, 0xB3	; 179
    2706:	ff 4f       	sbci	r31, 0xFF	; 255
    2708:	60 81       	ld	r22, Z
    270a:	71 81       	ldd	r23, Z+1	; 0x01
    270c:	82 81       	ldd	r24, Z+2	; 0x02
    270e:	93 81       	ldd	r25, Z+3	; 0x03
    2710:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2714:	dc 01       	movw	r26, r24
    2716:	cb 01       	movw	r24, r22
    2718:	f8 01       	movw	r30, r16
    271a:	91 83       	std	Z+1, r25	; 0x01
    271c:	80 83       	st	Z, r24
    271e:	de 01       	movw	r26, r28
    2720:	a9 5b       	subi	r26, 0xB9	; 185
    2722:	bf 4f       	sbci	r27, 0xFF	; 255
    2724:	fe 01       	movw	r30, r28
    2726:	e5 5b       	subi	r30, 0xB5	; 181
    2728:	ff 4f       	sbci	r31, 0xFF	; 255
    272a:	80 81       	ld	r24, Z
    272c:	91 81       	ldd	r25, Z+1	; 0x01
    272e:	8d 93       	st	X+, r24
    2730:	9c 93       	st	X, r25
    2732:	fe 01       	movw	r30, r28
    2734:	e9 5b       	subi	r30, 0xB9	; 185
    2736:	ff 4f       	sbci	r31, 0xFF	; 255
    2738:	80 81       	ld	r24, Z
    273a:	91 81       	ldd	r25, Z+1	; 0x01
    273c:	01 97       	sbiw	r24, 0x01	; 1
    273e:	f1 f7       	brne	.-4      	; 0x273c <LCD_SendCommand+0x2f4>
    2740:	fe 01       	movw	r30, r28
    2742:	e9 5b       	subi	r30, 0xB9	; 185
    2744:	ff 4f       	sbci	r31, 0xFF	; 255
    2746:	91 83       	std	Z+1, r25	; 0x01
    2748:	80 83       	st	Z, r24
	GPIO_writePort(LCD_DATA_PORT_ID, command);/*WRITE COMMAND*/
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID,LOGIC_LOW);/*E=0*/
	_delay_ms(1);
#elif(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID , GET_BIT(command,4));
    274a:	fe 01       	movw	r30, r28
    274c:	ed 59       	subi	r30, 0x9D	; 157
    274e:	ff 4f       	sbci	r31, 0xFF	; 255
    2750:	80 81       	ld	r24, Z
    2752:	88 2f       	mov	r24, r24
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	80 71       	andi	r24, 0x10	; 16
    2758:	90 70       	andi	r25, 0x00	; 0
    275a:	95 95       	asr	r25
    275c:	87 95       	ror	r24
    275e:	95 95       	asr	r25
    2760:	87 95       	ror	r24
    2762:	95 95       	asr	r25
    2764:	87 95       	ror	r24
    2766:	95 95       	asr	r25
    2768:	87 95       	ror	r24
    276a:	98 2f       	mov	r25, r24
    276c:	81 e0       	ldi	r24, 0x01	; 1
    276e:	64 e0       	ldi	r22, 0x04	; 4
    2770:	49 2f       	mov	r20, r25
    2772:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID , GET_BIT(command,5));
    2776:	fe 01       	movw	r30, r28
    2778:	ed 59       	subi	r30, 0x9D	; 157
    277a:	ff 4f       	sbci	r31, 0xFF	; 255
    277c:	80 81       	ld	r24, Z
    277e:	88 2f       	mov	r24, r24
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	80 72       	andi	r24, 0x20	; 32
    2784:	90 70       	andi	r25, 0x00	; 0
    2786:	95 95       	asr	r25
    2788:	87 95       	ror	r24
    278a:	95 95       	asr	r25
    278c:	87 95       	ror	r24
    278e:	95 95       	asr	r25
    2790:	87 95       	ror	r24
    2792:	95 95       	asr	r25
    2794:	87 95       	ror	r24
    2796:	95 95       	asr	r25
    2798:	87 95       	ror	r24
    279a:	98 2f       	mov	r25, r24
    279c:	81 e0       	ldi	r24, 0x01	; 1
    279e:	65 e0       	ldi	r22, 0x05	; 5
    27a0:	49 2f       	mov	r20, r25
    27a2:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID , GET_BIT(command,6));
    27a6:	fe 01       	movw	r30, r28
    27a8:	ed 59       	subi	r30, 0x9D	; 157
    27aa:	ff 4f       	sbci	r31, 0xFF	; 255
    27ac:	80 81       	ld	r24, Z
    27ae:	88 2f       	mov	r24, r24
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	80 74       	andi	r24, 0x40	; 64
    27b4:	90 70       	andi	r25, 0x00	; 0
    27b6:	08 2e       	mov	r0, r24
    27b8:	89 2f       	mov	r24, r25
    27ba:	00 0c       	add	r0, r0
    27bc:	88 1f       	adc	r24, r24
    27be:	99 0b       	sbc	r25, r25
    27c0:	00 0c       	add	r0, r0
    27c2:	88 1f       	adc	r24, r24
    27c4:	99 1f       	adc	r25, r25
    27c6:	98 2f       	mov	r25, r24
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	66 e0       	ldi	r22, 0x06	; 6
    27cc:	49 2f       	mov	r20, r25
    27ce:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID , GET_BIT(command,7));
    27d2:	fe 01       	movw	r30, r28
    27d4:	ed 59       	subi	r30, 0x9D	; 157
    27d6:	ff 4f       	sbci	r31, 0xFF	; 255
    27d8:	80 81       	ld	r24, Z
    27da:	98 2f       	mov	r25, r24
    27dc:	99 1f       	adc	r25, r25
    27de:	99 27       	eor	r25, r25
    27e0:	99 1f       	adc	r25, r25
    27e2:	81 e0       	ldi	r24, 0x01	; 1
    27e4:	67 e0       	ldi	r22, 0x07	; 7
    27e6:	49 2f       	mov	r20, r25
    27e8:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
    27ec:	fe 01       	movw	r30, r28
    27ee:	ed 5b       	subi	r30, 0xBD	; 189
    27f0:	ff 4f       	sbci	r31, 0xFF	; 255
    27f2:	80 e0       	ldi	r24, 0x00	; 0
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	a0 e8       	ldi	r26, 0x80	; 128
    27f8:	bf e3       	ldi	r27, 0x3F	; 63
    27fa:	80 83       	st	Z, r24
    27fc:	91 83       	std	Z+1, r25	; 0x01
    27fe:	a2 83       	std	Z+2, r26	; 0x02
    2800:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2802:	8e 01       	movw	r16, r28
    2804:	01 5c       	subi	r16, 0xC1	; 193
    2806:	1f 4f       	sbci	r17, 0xFF	; 255
    2808:	fe 01       	movw	r30, r28
    280a:	ed 5b       	subi	r30, 0xBD	; 189
    280c:	ff 4f       	sbci	r31, 0xFF	; 255
    280e:	60 81       	ld	r22, Z
    2810:	71 81       	ldd	r23, Z+1	; 0x01
    2812:	82 81       	ldd	r24, Z+2	; 0x02
    2814:	93 81       	ldd	r25, Z+3	; 0x03
    2816:	20 e0       	ldi	r18, 0x00	; 0
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	4a ef       	ldi	r20, 0xFA	; 250
    281c:	54 e4       	ldi	r21, 0x44	; 68
    281e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2822:	dc 01       	movw	r26, r24
    2824:	cb 01       	movw	r24, r22
    2826:	f8 01       	movw	r30, r16
    2828:	80 83       	st	Z, r24
    282a:	91 83       	std	Z+1, r25	; 0x01
    282c:	a2 83       	std	Z+2, r26	; 0x02
    282e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2830:	fe 01       	movw	r30, r28
    2832:	ff 96       	adiw	r30, 0x3f	; 63
    2834:	60 81       	ld	r22, Z
    2836:	71 81       	ldd	r23, Z+1	; 0x01
    2838:	82 81       	ldd	r24, Z+2	; 0x02
    283a:	93 81       	ldd	r25, Z+3	; 0x03
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	40 e8       	ldi	r20, 0x80	; 128
    2842:	5f e3       	ldi	r21, 0x3F	; 63
    2844:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2848:	88 23       	and	r24, r24
    284a:	2c f4       	brge	.+10     	; 0x2856 <LCD_SendCommand+0x40e>
		__ticks = 1;
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	9e af       	std	Y+62, r25	; 0x3e
    2852:	8d af       	std	Y+61, r24	; 0x3d
    2854:	46 c0       	rjmp	.+140    	; 0x28e2 <LCD_SendCommand+0x49a>
	else if (__tmp > 65535)
    2856:	fe 01       	movw	r30, r28
    2858:	ff 96       	adiw	r30, 0x3f	; 63
    285a:	60 81       	ld	r22, Z
    285c:	71 81       	ldd	r23, Z+1	; 0x01
    285e:	82 81       	ldd	r24, Z+2	; 0x02
    2860:	93 81       	ldd	r25, Z+3	; 0x03
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	3f ef       	ldi	r19, 0xFF	; 255
    2866:	4f e7       	ldi	r20, 0x7F	; 127
    2868:	57 e4       	ldi	r21, 0x47	; 71
    286a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    286e:	18 16       	cp	r1, r24
    2870:	64 f5       	brge	.+88     	; 0x28ca <LCD_SendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2872:	fe 01       	movw	r30, r28
    2874:	ed 5b       	subi	r30, 0xBD	; 189
    2876:	ff 4f       	sbci	r31, 0xFF	; 255
    2878:	60 81       	ld	r22, Z
    287a:	71 81       	ldd	r23, Z+1	; 0x01
    287c:	82 81       	ldd	r24, Z+2	; 0x02
    287e:	93 81       	ldd	r25, Z+3	; 0x03
    2880:	20 e0       	ldi	r18, 0x00	; 0
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	40 e2       	ldi	r20, 0x20	; 32
    2886:	51 e4       	ldi	r21, 0x41	; 65
    2888:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    288c:	dc 01       	movw	r26, r24
    288e:	cb 01       	movw	r24, r22
    2890:	bc 01       	movw	r22, r24
    2892:	cd 01       	movw	r24, r26
    2894:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2898:	dc 01       	movw	r26, r24
    289a:	cb 01       	movw	r24, r22
    289c:	9e af       	std	Y+62, r25	; 0x3e
    289e:	8d af       	std	Y+61, r24	; 0x3d
    28a0:	0f c0       	rjmp	.+30     	; 0x28c0 <LCD_SendCommand+0x478>
    28a2:	88 ec       	ldi	r24, 0xC8	; 200
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	9c af       	std	Y+60, r25	; 0x3c
    28a8:	8b af       	std	Y+59, r24	; 0x3b
    28aa:	8b ad       	ldd	r24, Y+59	; 0x3b
    28ac:	9c ad       	ldd	r25, Y+60	; 0x3c
    28ae:	01 97       	sbiw	r24, 0x01	; 1
    28b0:	f1 f7       	brne	.-4      	; 0x28ae <LCD_SendCommand+0x466>
    28b2:	9c af       	std	Y+60, r25	; 0x3c
    28b4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    28b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    28ba:	01 97       	sbiw	r24, 0x01	; 1
    28bc:	9e af       	std	Y+62, r25	; 0x3e
    28be:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    28c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    28c4:	00 97       	sbiw	r24, 0x00	; 0
    28c6:	69 f7       	brne	.-38     	; 0x28a2 <LCD_SendCommand+0x45a>
    28c8:	16 c0       	rjmp	.+44     	; 0x28f6 <LCD_SendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ca:	fe 01       	movw	r30, r28
    28cc:	ff 96       	adiw	r30, 0x3f	; 63
    28ce:	60 81       	ld	r22, Z
    28d0:	71 81       	ldd	r23, Z+1	; 0x01
    28d2:	82 81       	ldd	r24, Z+2	; 0x02
    28d4:	93 81       	ldd	r25, Z+3	; 0x03
    28d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28da:	dc 01       	movw	r26, r24
    28dc:	cb 01       	movw	r24, r22
    28de:	9e af       	std	Y+62, r25	; 0x3e
    28e0:	8d af       	std	Y+61, r24	; 0x3d
    28e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    28e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    28e6:	9a af       	std	Y+58, r25	; 0x3a
    28e8:	89 af       	std	Y+57, r24	; 0x39
    28ea:	89 ad       	ldd	r24, Y+57	; 0x39
    28ec:	9a ad       	ldd	r25, Y+58	; 0x3a
    28ee:	01 97       	sbiw	r24, 0x01	; 1
    28f0:	f1 f7       	brne	.-4      	; 0x28ee <LCD_SendCommand+0x4a6>
    28f2:	9a af       	std	Y+58, r25	; 0x3a
    28f4:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID,LOGIC_LOW);/*E=0*/
    28f6:	82 e0       	ldi	r24, 0x02	; 2
    28f8:	63 e0       	ldi	r22, 0x03	; 3
    28fa:	40 e0       	ldi	r20, 0x00	; 0
    28fc:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
    2900:	80 e0       	ldi	r24, 0x00	; 0
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	a0 e8       	ldi	r26, 0x80	; 128
    2906:	bf e3       	ldi	r27, 0x3F	; 63
    2908:	8d ab       	std	Y+53, r24	; 0x35
    290a:	9e ab       	std	Y+54, r25	; 0x36
    290c:	af ab       	std	Y+55, r26	; 0x37
    290e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2910:	6d a9       	ldd	r22, Y+53	; 0x35
    2912:	7e a9       	ldd	r23, Y+54	; 0x36
    2914:	8f a9       	ldd	r24, Y+55	; 0x37
    2916:	98 ad       	ldd	r25, Y+56	; 0x38
    2918:	20 e0       	ldi	r18, 0x00	; 0
    291a:	30 e0       	ldi	r19, 0x00	; 0
    291c:	4a ef       	ldi	r20, 0xFA	; 250
    291e:	54 e4       	ldi	r21, 0x44	; 68
    2920:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2924:	dc 01       	movw	r26, r24
    2926:	cb 01       	movw	r24, r22
    2928:	89 ab       	std	Y+49, r24	; 0x31
    292a:	9a ab       	std	Y+50, r25	; 0x32
    292c:	ab ab       	std	Y+51, r26	; 0x33
    292e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2930:	69 a9       	ldd	r22, Y+49	; 0x31
    2932:	7a a9       	ldd	r23, Y+50	; 0x32
    2934:	8b a9       	ldd	r24, Y+51	; 0x33
    2936:	9c a9       	ldd	r25, Y+52	; 0x34
    2938:	20 e0       	ldi	r18, 0x00	; 0
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	40 e8       	ldi	r20, 0x80	; 128
    293e:	5f e3       	ldi	r21, 0x3F	; 63
    2940:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2944:	88 23       	and	r24, r24
    2946:	2c f4       	brge	.+10     	; 0x2952 <LCD_SendCommand+0x50a>
		__ticks = 1;
    2948:	81 e0       	ldi	r24, 0x01	; 1
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	98 ab       	std	Y+48, r25	; 0x30
    294e:	8f a7       	std	Y+47, r24	; 0x2f
    2950:	3f c0       	rjmp	.+126    	; 0x29d0 <LCD_SendCommand+0x588>
	else if (__tmp > 65535)
    2952:	69 a9       	ldd	r22, Y+49	; 0x31
    2954:	7a a9       	ldd	r23, Y+50	; 0x32
    2956:	8b a9       	ldd	r24, Y+51	; 0x33
    2958:	9c a9       	ldd	r25, Y+52	; 0x34
    295a:	20 e0       	ldi	r18, 0x00	; 0
    295c:	3f ef       	ldi	r19, 0xFF	; 255
    295e:	4f e7       	ldi	r20, 0x7F	; 127
    2960:	57 e4       	ldi	r21, 0x47	; 71
    2962:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2966:	18 16       	cp	r1, r24
    2968:	4c f5       	brge	.+82     	; 0x29bc <LCD_SendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    296a:	6d a9       	ldd	r22, Y+53	; 0x35
    296c:	7e a9       	ldd	r23, Y+54	; 0x36
    296e:	8f a9       	ldd	r24, Y+55	; 0x37
    2970:	98 ad       	ldd	r25, Y+56	; 0x38
    2972:	20 e0       	ldi	r18, 0x00	; 0
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	40 e2       	ldi	r20, 0x20	; 32
    2978:	51 e4       	ldi	r21, 0x41	; 65
    297a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    297e:	dc 01       	movw	r26, r24
    2980:	cb 01       	movw	r24, r22
    2982:	bc 01       	movw	r22, r24
    2984:	cd 01       	movw	r24, r26
    2986:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    298a:	dc 01       	movw	r26, r24
    298c:	cb 01       	movw	r24, r22
    298e:	98 ab       	std	Y+48, r25	; 0x30
    2990:	8f a7       	std	Y+47, r24	; 0x2f
    2992:	0f c0       	rjmp	.+30     	; 0x29b2 <LCD_SendCommand+0x56a>
    2994:	88 ec       	ldi	r24, 0xC8	; 200
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	9e a7       	std	Y+46, r25	; 0x2e
    299a:	8d a7       	std	Y+45, r24	; 0x2d
    299c:	8d a5       	ldd	r24, Y+45	; 0x2d
    299e:	9e a5       	ldd	r25, Y+46	; 0x2e
    29a0:	01 97       	sbiw	r24, 0x01	; 1
    29a2:	f1 f7       	brne	.-4      	; 0x29a0 <LCD_SendCommand+0x558>
    29a4:	9e a7       	std	Y+46, r25	; 0x2e
    29a6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    29aa:	98 a9       	ldd	r25, Y+48	; 0x30
    29ac:	01 97       	sbiw	r24, 0x01	; 1
    29ae:	98 ab       	std	Y+48, r25	; 0x30
    29b0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    29b4:	98 a9       	ldd	r25, Y+48	; 0x30
    29b6:	00 97       	sbiw	r24, 0x00	; 0
    29b8:	69 f7       	brne	.-38     	; 0x2994 <LCD_SendCommand+0x54c>
    29ba:	14 c0       	rjmp	.+40     	; 0x29e4 <LCD_SendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29bc:	69 a9       	ldd	r22, Y+49	; 0x31
    29be:	7a a9       	ldd	r23, Y+50	; 0x32
    29c0:	8b a9       	ldd	r24, Y+51	; 0x33
    29c2:	9c a9       	ldd	r25, Y+52	; 0x34
    29c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c8:	dc 01       	movw	r26, r24
    29ca:	cb 01       	movw	r24, r22
    29cc:	98 ab       	std	Y+48, r25	; 0x30
    29ce:	8f a7       	std	Y+47, r24	; 0x2f
    29d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    29d2:	98 a9       	ldd	r25, Y+48	; 0x30
    29d4:	9c a7       	std	Y+44, r25	; 0x2c
    29d6:	8b a7       	std	Y+43, r24	; 0x2b
    29d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    29da:	9c a5       	ldd	r25, Y+44	; 0x2c
    29dc:	01 97       	sbiw	r24, 0x01	; 1
    29de:	f1 f7       	brne	.-4      	; 0x29dc <LCD_SendCommand+0x594>
    29e0:	9c a7       	std	Y+44, r25	; 0x2c
    29e2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID,LOGIC_HIGH);/*E=1*/
    29e4:	82 e0       	ldi	r24, 0x02	; 2
    29e6:	63 e0       	ldi	r22, 0x03	; 3
    29e8:	41 e0       	ldi	r20, 0x01	; 1
    29ea:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
    29ee:	80 e0       	ldi	r24, 0x00	; 0
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	a0 e8       	ldi	r26, 0x80	; 128
    29f4:	bf e3       	ldi	r27, 0x3F	; 63
    29f6:	8f a3       	std	Y+39, r24	; 0x27
    29f8:	98 a7       	std	Y+40, r25	; 0x28
    29fa:	a9 a7       	std	Y+41, r26	; 0x29
    29fc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29fe:	6f a1       	ldd	r22, Y+39	; 0x27
    2a00:	78 a5       	ldd	r23, Y+40	; 0x28
    2a02:	89 a5       	ldd	r24, Y+41	; 0x29
    2a04:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	4a ef       	ldi	r20, 0xFA	; 250
    2a0c:	54 e4       	ldi	r21, 0x44	; 68
    2a0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a12:	dc 01       	movw	r26, r24
    2a14:	cb 01       	movw	r24, r22
    2a16:	8b a3       	std	Y+35, r24	; 0x23
    2a18:	9c a3       	std	Y+36, r25	; 0x24
    2a1a:	ad a3       	std	Y+37, r26	; 0x25
    2a1c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a1e:	6b a1       	ldd	r22, Y+35	; 0x23
    2a20:	7c a1       	ldd	r23, Y+36	; 0x24
    2a22:	8d a1       	ldd	r24, Y+37	; 0x25
    2a24:	9e a1       	ldd	r25, Y+38	; 0x26
    2a26:	20 e0       	ldi	r18, 0x00	; 0
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	40 e8       	ldi	r20, 0x80	; 128
    2a2c:	5f e3       	ldi	r21, 0x3F	; 63
    2a2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a32:	88 23       	and	r24, r24
    2a34:	2c f4       	brge	.+10     	; 0x2a40 <LCD_SendCommand+0x5f8>
		__ticks = 1;
    2a36:	81 e0       	ldi	r24, 0x01	; 1
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	9a a3       	std	Y+34, r25	; 0x22
    2a3c:	89 a3       	std	Y+33, r24	; 0x21
    2a3e:	3f c0       	rjmp	.+126    	; 0x2abe <LCD_SendCommand+0x676>
	else if (__tmp > 65535)
    2a40:	6b a1       	ldd	r22, Y+35	; 0x23
    2a42:	7c a1       	ldd	r23, Y+36	; 0x24
    2a44:	8d a1       	ldd	r24, Y+37	; 0x25
    2a46:	9e a1       	ldd	r25, Y+38	; 0x26
    2a48:	20 e0       	ldi	r18, 0x00	; 0
    2a4a:	3f ef       	ldi	r19, 0xFF	; 255
    2a4c:	4f e7       	ldi	r20, 0x7F	; 127
    2a4e:	57 e4       	ldi	r21, 0x47	; 71
    2a50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a54:	18 16       	cp	r1, r24
    2a56:	4c f5       	brge	.+82     	; 0x2aaa <LCD_SendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a58:	6f a1       	ldd	r22, Y+39	; 0x27
    2a5a:	78 a5       	ldd	r23, Y+40	; 0x28
    2a5c:	89 a5       	ldd	r24, Y+41	; 0x29
    2a5e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a60:	20 e0       	ldi	r18, 0x00	; 0
    2a62:	30 e0       	ldi	r19, 0x00	; 0
    2a64:	40 e2       	ldi	r20, 0x20	; 32
    2a66:	51 e4       	ldi	r21, 0x41	; 65
    2a68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a6c:	dc 01       	movw	r26, r24
    2a6e:	cb 01       	movw	r24, r22
    2a70:	bc 01       	movw	r22, r24
    2a72:	cd 01       	movw	r24, r26
    2a74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a78:	dc 01       	movw	r26, r24
    2a7a:	cb 01       	movw	r24, r22
    2a7c:	9a a3       	std	Y+34, r25	; 0x22
    2a7e:	89 a3       	std	Y+33, r24	; 0x21
    2a80:	0f c0       	rjmp	.+30     	; 0x2aa0 <LCD_SendCommand+0x658>
    2a82:	88 ec       	ldi	r24, 0xC8	; 200
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	98 a3       	std	Y+32, r25	; 0x20
    2a88:	8f 8f       	std	Y+31, r24	; 0x1f
    2a8a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a8c:	98 a1       	ldd	r25, Y+32	; 0x20
    2a8e:	01 97       	sbiw	r24, 0x01	; 1
    2a90:	f1 f7       	brne	.-4      	; 0x2a8e <LCD_SendCommand+0x646>
    2a92:	98 a3       	std	Y+32, r25	; 0x20
    2a94:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a96:	89 a1       	ldd	r24, Y+33	; 0x21
    2a98:	9a a1       	ldd	r25, Y+34	; 0x22
    2a9a:	01 97       	sbiw	r24, 0x01	; 1
    2a9c:	9a a3       	std	Y+34, r25	; 0x22
    2a9e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aa0:	89 a1       	ldd	r24, Y+33	; 0x21
    2aa2:	9a a1       	ldd	r25, Y+34	; 0x22
    2aa4:	00 97       	sbiw	r24, 0x00	; 0
    2aa6:	69 f7       	brne	.-38     	; 0x2a82 <LCD_SendCommand+0x63a>
    2aa8:	14 c0       	rjmp	.+40     	; 0x2ad2 <LCD_SendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aaa:	6b a1       	ldd	r22, Y+35	; 0x23
    2aac:	7c a1       	ldd	r23, Y+36	; 0x24
    2aae:	8d a1       	ldd	r24, Y+37	; 0x25
    2ab0:	9e a1       	ldd	r25, Y+38	; 0x26
    2ab2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab6:	dc 01       	movw	r26, r24
    2ab8:	cb 01       	movw	r24, r22
    2aba:	9a a3       	std	Y+34, r25	; 0x22
    2abc:	89 a3       	std	Y+33, r24	; 0x21
    2abe:	89 a1       	ldd	r24, Y+33	; 0x21
    2ac0:	9a a1       	ldd	r25, Y+34	; 0x22
    2ac2:	9e 8f       	std	Y+30, r25	; 0x1e
    2ac4:	8d 8f       	std	Y+29, r24	; 0x1d
    2ac6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ac8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2aca:	01 97       	sbiw	r24, 0x01	; 1
    2acc:	f1 f7       	brne	.-4      	; 0x2aca <LCD_SendCommand+0x682>
    2ace:	9e 8f       	std	Y+30, r25	; 0x1e
    2ad0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID , GET_BIT(command,0));
    2ad2:	fe 01       	movw	r30, r28
    2ad4:	ed 59       	subi	r30, 0x9D	; 157
    2ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad8:	80 81       	ld	r24, Z
    2ada:	98 2f       	mov	r25, r24
    2adc:	91 70       	andi	r25, 0x01	; 1
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	64 e0       	ldi	r22, 0x04	; 4
    2ae2:	49 2f       	mov	r20, r25
    2ae4:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID , GET_BIT(command,1));
    2ae8:	fe 01       	movw	r30, r28
    2aea:	ed 59       	subi	r30, 0x9D	; 157
    2aec:	ff 4f       	sbci	r31, 0xFF	; 255
    2aee:	80 81       	ld	r24, Z
    2af0:	88 2f       	mov	r24, r24
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	82 70       	andi	r24, 0x02	; 2
    2af6:	90 70       	andi	r25, 0x00	; 0
    2af8:	95 95       	asr	r25
    2afa:	87 95       	ror	r24
    2afc:	98 2f       	mov	r25, r24
    2afe:	81 e0       	ldi	r24, 0x01	; 1
    2b00:	65 e0       	ldi	r22, 0x05	; 5
    2b02:	49 2f       	mov	r20, r25
    2b04:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID , GET_BIT(command,2));
    2b08:	fe 01       	movw	r30, r28
    2b0a:	ed 59       	subi	r30, 0x9D	; 157
    2b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0e:	80 81       	ld	r24, Z
    2b10:	88 2f       	mov	r24, r24
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	84 70       	andi	r24, 0x04	; 4
    2b16:	90 70       	andi	r25, 0x00	; 0
    2b18:	95 95       	asr	r25
    2b1a:	87 95       	ror	r24
    2b1c:	95 95       	asr	r25
    2b1e:	87 95       	ror	r24
    2b20:	98 2f       	mov	r25, r24
    2b22:	81 e0       	ldi	r24, 0x01	; 1
    2b24:	66 e0       	ldi	r22, 0x06	; 6
    2b26:	49 2f       	mov	r20, r25
    2b28:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID , GET_BIT(command,3));
    2b2c:	fe 01       	movw	r30, r28
    2b2e:	ed 59       	subi	r30, 0x9D	; 157
    2b30:	ff 4f       	sbci	r31, 0xFF	; 255
    2b32:	80 81       	ld	r24, Z
    2b34:	88 2f       	mov	r24, r24
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	88 70       	andi	r24, 0x08	; 8
    2b3a:	90 70       	andi	r25, 0x00	; 0
    2b3c:	95 95       	asr	r25
    2b3e:	87 95       	ror	r24
    2b40:	95 95       	asr	r25
    2b42:	87 95       	ror	r24
    2b44:	95 95       	asr	r25
    2b46:	87 95       	ror	r24
    2b48:	98 2f       	mov	r25, r24
    2b4a:	81 e0       	ldi	r24, 0x01	; 1
    2b4c:	67 e0       	ldi	r22, 0x07	; 7
    2b4e:	49 2f       	mov	r20, r25
    2b50:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
    2b54:	80 e0       	ldi	r24, 0x00	; 0
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	a0 e8       	ldi	r26, 0x80	; 128
    2b5a:	bf e3       	ldi	r27, 0x3F	; 63
    2b5c:	89 8f       	std	Y+25, r24	; 0x19
    2b5e:	9a 8f       	std	Y+26, r25	; 0x1a
    2b60:	ab 8f       	std	Y+27, r26	; 0x1b
    2b62:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b64:	69 8d       	ldd	r22, Y+25	; 0x19
    2b66:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b6c:	20 e0       	ldi	r18, 0x00	; 0
    2b6e:	30 e0       	ldi	r19, 0x00	; 0
    2b70:	4a ef       	ldi	r20, 0xFA	; 250
    2b72:	54 e4       	ldi	r21, 0x44	; 68
    2b74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b78:	dc 01       	movw	r26, r24
    2b7a:	cb 01       	movw	r24, r22
    2b7c:	8d 8b       	std	Y+21, r24	; 0x15
    2b7e:	9e 8b       	std	Y+22, r25	; 0x16
    2b80:	af 8b       	std	Y+23, r26	; 0x17
    2b82:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b84:	6d 89       	ldd	r22, Y+21	; 0x15
    2b86:	7e 89       	ldd	r23, Y+22	; 0x16
    2b88:	8f 89       	ldd	r24, Y+23	; 0x17
    2b8a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b8c:	20 e0       	ldi	r18, 0x00	; 0
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	40 e8       	ldi	r20, 0x80	; 128
    2b92:	5f e3       	ldi	r21, 0x3F	; 63
    2b94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b98:	88 23       	and	r24, r24
    2b9a:	2c f4       	brge	.+10     	; 0x2ba6 <LCD_SendCommand+0x75e>
		__ticks = 1;
    2b9c:	81 e0       	ldi	r24, 0x01	; 1
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	9c 8b       	std	Y+20, r25	; 0x14
    2ba2:	8b 8b       	std	Y+19, r24	; 0x13
    2ba4:	3f c0       	rjmp	.+126    	; 0x2c24 <LCD_SendCommand+0x7dc>
	else if (__tmp > 65535)
    2ba6:	6d 89       	ldd	r22, Y+21	; 0x15
    2ba8:	7e 89       	ldd	r23, Y+22	; 0x16
    2baa:	8f 89       	ldd	r24, Y+23	; 0x17
    2bac:	98 8d       	ldd	r25, Y+24	; 0x18
    2bae:	20 e0       	ldi	r18, 0x00	; 0
    2bb0:	3f ef       	ldi	r19, 0xFF	; 255
    2bb2:	4f e7       	ldi	r20, 0x7F	; 127
    2bb4:	57 e4       	ldi	r21, 0x47	; 71
    2bb6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bba:	18 16       	cp	r1, r24
    2bbc:	4c f5       	brge	.+82     	; 0x2c10 <LCD_SendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bbe:	69 8d       	ldd	r22, Y+25	; 0x19
    2bc0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bc2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bc4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bc6:	20 e0       	ldi	r18, 0x00	; 0
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	40 e2       	ldi	r20, 0x20	; 32
    2bcc:	51 e4       	ldi	r21, 0x41	; 65
    2bce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd2:	dc 01       	movw	r26, r24
    2bd4:	cb 01       	movw	r24, r22
    2bd6:	bc 01       	movw	r22, r24
    2bd8:	cd 01       	movw	r24, r26
    2bda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bde:	dc 01       	movw	r26, r24
    2be0:	cb 01       	movw	r24, r22
    2be2:	9c 8b       	std	Y+20, r25	; 0x14
    2be4:	8b 8b       	std	Y+19, r24	; 0x13
    2be6:	0f c0       	rjmp	.+30     	; 0x2c06 <LCD_SendCommand+0x7be>
    2be8:	88 ec       	ldi	r24, 0xC8	; 200
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	9a 8b       	std	Y+18, r25	; 0x12
    2bee:	89 8b       	std	Y+17, r24	; 0x11
    2bf0:	89 89       	ldd	r24, Y+17	; 0x11
    2bf2:	9a 89       	ldd	r25, Y+18	; 0x12
    2bf4:	01 97       	sbiw	r24, 0x01	; 1
    2bf6:	f1 f7       	brne	.-4      	; 0x2bf4 <LCD_SendCommand+0x7ac>
    2bf8:	9a 8b       	std	Y+18, r25	; 0x12
    2bfa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bfc:	8b 89       	ldd	r24, Y+19	; 0x13
    2bfe:	9c 89       	ldd	r25, Y+20	; 0x14
    2c00:	01 97       	sbiw	r24, 0x01	; 1
    2c02:	9c 8b       	std	Y+20, r25	; 0x14
    2c04:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c06:	8b 89       	ldd	r24, Y+19	; 0x13
    2c08:	9c 89       	ldd	r25, Y+20	; 0x14
    2c0a:	00 97       	sbiw	r24, 0x00	; 0
    2c0c:	69 f7       	brne	.-38     	; 0x2be8 <LCD_SendCommand+0x7a0>
    2c0e:	14 c0       	rjmp	.+40     	; 0x2c38 <LCD_SendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c10:	6d 89       	ldd	r22, Y+21	; 0x15
    2c12:	7e 89       	ldd	r23, Y+22	; 0x16
    2c14:	8f 89       	ldd	r24, Y+23	; 0x17
    2c16:	98 8d       	ldd	r25, Y+24	; 0x18
    2c18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c1c:	dc 01       	movw	r26, r24
    2c1e:	cb 01       	movw	r24, r22
    2c20:	9c 8b       	std	Y+20, r25	; 0x14
    2c22:	8b 8b       	std	Y+19, r24	; 0x13
    2c24:	8b 89       	ldd	r24, Y+19	; 0x13
    2c26:	9c 89       	ldd	r25, Y+20	; 0x14
    2c28:	98 8b       	std	Y+16, r25	; 0x10
    2c2a:	8f 87       	std	Y+15, r24	; 0x0f
    2c2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c2e:	98 89       	ldd	r25, Y+16	; 0x10
    2c30:	01 97       	sbiw	r24, 0x01	; 1
    2c32:	f1 f7       	brne	.-4      	; 0x2c30 <LCD_SendCommand+0x7e8>
    2c34:	98 8b       	std	Y+16, r25	; 0x10
    2c36:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /*E=0*/
    2c38:	82 e0       	ldi	r24, 0x02	; 2
    2c3a:	63 e0       	ldi	r22, 0x03	; 3
    2c3c:	40 e0       	ldi	r20, 0x00	; 0
    2c3e:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
    2c42:	80 e0       	ldi	r24, 0x00	; 0
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	a0 e8       	ldi	r26, 0x80	; 128
    2c48:	bf e3       	ldi	r27, 0x3F	; 63
    2c4a:	8b 87       	std	Y+11, r24	; 0x0b
    2c4c:	9c 87       	std	Y+12, r25	; 0x0c
    2c4e:	ad 87       	std	Y+13, r26	; 0x0d
    2c50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c52:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c54:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c56:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c58:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c5a:	20 e0       	ldi	r18, 0x00	; 0
    2c5c:	30 e0       	ldi	r19, 0x00	; 0
    2c5e:	4a ef       	ldi	r20, 0xFA	; 250
    2c60:	54 e4       	ldi	r21, 0x44	; 68
    2c62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c66:	dc 01       	movw	r26, r24
    2c68:	cb 01       	movw	r24, r22
    2c6a:	8f 83       	std	Y+7, r24	; 0x07
    2c6c:	98 87       	std	Y+8, r25	; 0x08
    2c6e:	a9 87       	std	Y+9, r26	; 0x09
    2c70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c72:	6f 81       	ldd	r22, Y+7	; 0x07
    2c74:	78 85       	ldd	r23, Y+8	; 0x08
    2c76:	89 85       	ldd	r24, Y+9	; 0x09
    2c78:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c7a:	20 e0       	ldi	r18, 0x00	; 0
    2c7c:	30 e0       	ldi	r19, 0x00	; 0
    2c7e:	40 e8       	ldi	r20, 0x80	; 128
    2c80:	5f e3       	ldi	r21, 0x3F	; 63
    2c82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c86:	88 23       	and	r24, r24
    2c88:	2c f4       	brge	.+10     	; 0x2c94 <LCD_SendCommand+0x84c>
		__ticks = 1;
    2c8a:	81 e0       	ldi	r24, 0x01	; 1
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	9e 83       	std	Y+6, r25	; 0x06
    2c90:	8d 83       	std	Y+5, r24	; 0x05
    2c92:	3f c0       	rjmp	.+126    	; 0x2d12 <LCD_SendCommand+0x8ca>
	else if (__tmp > 65535)
    2c94:	6f 81       	ldd	r22, Y+7	; 0x07
    2c96:	78 85       	ldd	r23, Y+8	; 0x08
    2c98:	89 85       	ldd	r24, Y+9	; 0x09
    2c9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c9c:	20 e0       	ldi	r18, 0x00	; 0
    2c9e:	3f ef       	ldi	r19, 0xFF	; 255
    2ca0:	4f e7       	ldi	r20, 0x7F	; 127
    2ca2:	57 e4       	ldi	r21, 0x47	; 71
    2ca4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ca8:	18 16       	cp	r1, r24
    2caa:	4c f5       	brge	.+82     	; 0x2cfe <LCD_SendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cac:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cae:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cb4:	20 e0       	ldi	r18, 0x00	; 0
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	40 e2       	ldi	r20, 0x20	; 32
    2cba:	51 e4       	ldi	r21, 0x41	; 65
    2cbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc0:	dc 01       	movw	r26, r24
    2cc2:	cb 01       	movw	r24, r22
    2cc4:	bc 01       	movw	r22, r24
    2cc6:	cd 01       	movw	r24, r26
    2cc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ccc:	dc 01       	movw	r26, r24
    2cce:	cb 01       	movw	r24, r22
    2cd0:	9e 83       	std	Y+6, r25	; 0x06
    2cd2:	8d 83       	std	Y+5, r24	; 0x05
    2cd4:	0f c0       	rjmp	.+30     	; 0x2cf4 <LCD_SendCommand+0x8ac>
    2cd6:	88 ec       	ldi	r24, 0xC8	; 200
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	9c 83       	std	Y+4, r25	; 0x04
    2cdc:	8b 83       	std	Y+3, r24	; 0x03
    2cde:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce2:	01 97       	sbiw	r24, 0x01	; 1
    2ce4:	f1 f7       	brne	.-4      	; 0x2ce2 <LCD_SendCommand+0x89a>
    2ce6:	9c 83       	std	Y+4, r25	; 0x04
    2ce8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cea:	8d 81       	ldd	r24, Y+5	; 0x05
    2cec:	9e 81       	ldd	r25, Y+6	; 0x06
    2cee:	01 97       	sbiw	r24, 0x01	; 1
    2cf0:	9e 83       	std	Y+6, r25	; 0x06
    2cf2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf6:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf8:	00 97       	sbiw	r24, 0x00	; 0
    2cfa:	69 f7       	brne	.-38     	; 0x2cd6 <LCD_SendCommand+0x88e>
    2cfc:	14 c0       	rjmp	.+40     	; 0x2d26 <LCD_SendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cfe:	6f 81       	ldd	r22, Y+7	; 0x07
    2d00:	78 85       	ldd	r23, Y+8	; 0x08
    2d02:	89 85       	ldd	r24, Y+9	; 0x09
    2d04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d0a:	dc 01       	movw	r26, r24
    2d0c:	cb 01       	movw	r24, r22
    2d0e:	9e 83       	std	Y+6, r25	; 0x06
    2d10:	8d 83       	std	Y+5, r24	; 0x05
    2d12:	8d 81       	ldd	r24, Y+5	; 0x05
    2d14:	9e 81       	ldd	r25, Y+6	; 0x06
    2d16:	9a 83       	std	Y+2, r25	; 0x02
    2d18:	89 83       	std	Y+1, r24	; 0x01
    2d1a:	89 81       	ldd	r24, Y+1	; 0x01
    2d1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d1e:	01 97       	sbiw	r24, 0x01	; 1
    2d20:	f1 f7       	brne	.-4      	; 0x2d1e <LCD_SendCommand+0x8d6>
    2d22:	9a 83       	std	Y+2, r25	; 0x02
    2d24:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

#endif

}
    2d26:	cd 59       	subi	r28, 0x9D	; 157
    2d28:	df 4f       	sbci	r29, 0xFF	; 255
    2d2a:	0f b6       	in	r0, 0x3f	; 63
    2d2c:	f8 94       	cli
    2d2e:	de bf       	out	0x3e, r29	; 62
    2d30:	0f be       	out	0x3f, r0	; 63
    2d32:	cd bf       	out	0x3d, r28	; 61
    2d34:	cf 91       	pop	r28
    2d36:	df 91       	pop	r29
    2d38:	1f 91       	pop	r17
    2d3a:	0f 91       	pop	r16
    2d3c:	08 95       	ret

00002d3e <LCD_DisplayChar>:

/*DISPLAY*/

void LCD_DisplayChar(uint8 data)
{
    2d3e:	0f 93       	push	r16
    2d40:	1f 93       	push	r17
    2d42:	df 93       	push	r29
    2d44:	cf 93       	push	r28
    2d46:	cd b7       	in	r28, 0x3d	; 61
    2d48:	de b7       	in	r29, 0x3e	; 62
    2d4a:	c3 56       	subi	r28, 0x63	; 99
    2d4c:	d0 40       	sbci	r29, 0x00	; 0
    2d4e:	0f b6       	in	r0, 0x3f	; 63
    2d50:	f8 94       	cli
    2d52:	de bf       	out	0x3e, r29	; 62
    2d54:	0f be       	out	0x3f, r0	; 63
    2d56:	cd bf       	out	0x3d, r28	; 61
    2d58:	fe 01       	movw	r30, r28
    2d5a:	ed 59       	subi	r30, 0x9D	; 157
    2d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5e:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);/*RS=1*/
    2d60:	82 e0       	ldi	r24, 0x02	; 2
    2d62:	62 e0       	ldi	r22, 0x02	; 2
    2d64:	41 e0       	ldi	r20, 0x01	; 1
    2d66:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
    2d6a:	fe 01       	movw	r30, r28
    2d6c:	e1 5a       	subi	r30, 0xA1	; 161
    2d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d70:	80 e0       	ldi	r24, 0x00	; 0
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	a0 e8       	ldi	r26, 0x80	; 128
    2d76:	bf e3       	ldi	r27, 0x3F	; 63
    2d78:	80 83       	st	Z, r24
    2d7a:	91 83       	std	Z+1, r25	; 0x01
    2d7c:	a2 83       	std	Z+2, r26	; 0x02
    2d7e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d80:	8e 01       	movw	r16, r28
    2d82:	05 5a       	subi	r16, 0xA5	; 165
    2d84:	1f 4f       	sbci	r17, 0xFF	; 255
    2d86:	fe 01       	movw	r30, r28
    2d88:	e1 5a       	subi	r30, 0xA1	; 161
    2d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8c:	60 81       	ld	r22, Z
    2d8e:	71 81       	ldd	r23, Z+1	; 0x01
    2d90:	82 81       	ldd	r24, Z+2	; 0x02
    2d92:	93 81       	ldd	r25, Z+3	; 0x03
    2d94:	20 e0       	ldi	r18, 0x00	; 0
    2d96:	30 e0       	ldi	r19, 0x00	; 0
    2d98:	4a ef       	ldi	r20, 0xFA	; 250
    2d9a:	54 e4       	ldi	r21, 0x44	; 68
    2d9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2da0:	dc 01       	movw	r26, r24
    2da2:	cb 01       	movw	r24, r22
    2da4:	f8 01       	movw	r30, r16
    2da6:	80 83       	st	Z, r24
    2da8:	91 83       	std	Z+1, r25	; 0x01
    2daa:	a2 83       	std	Z+2, r26	; 0x02
    2dac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2dae:	fe 01       	movw	r30, r28
    2db0:	e5 5a       	subi	r30, 0xA5	; 165
    2db2:	ff 4f       	sbci	r31, 0xFF	; 255
    2db4:	60 81       	ld	r22, Z
    2db6:	71 81       	ldd	r23, Z+1	; 0x01
    2db8:	82 81       	ldd	r24, Z+2	; 0x02
    2dba:	93 81       	ldd	r25, Z+3	; 0x03
    2dbc:	20 e0       	ldi	r18, 0x00	; 0
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	40 e8       	ldi	r20, 0x80	; 128
    2dc2:	5f e3       	ldi	r21, 0x3F	; 63
    2dc4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dc8:	88 23       	and	r24, r24
    2dca:	44 f4       	brge	.+16     	; 0x2ddc <LCD_DisplayChar+0x9e>
		__ticks = 1;
    2dcc:	fe 01       	movw	r30, r28
    2dce:	e7 5a       	subi	r30, 0xA7	; 167
    2dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd2:	81 e0       	ldi	r24, 0x01	; 1
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	91 83       	std	Z+1, r25	; 0x01
    2dd8:	80 83       	st	Z, r24
    2dda:	64 c0       	rjmp	.+200    	; 0x2ea4 <LCD_DisplayChar+0x166>
	else if (__tmp > 65535)
    2ddc:	fe 01       	movw	r30, r28
    2dde:	e5 5a       	subi	r30, 0xA5	; 165
    2de0:	ff 4f       	sbci	r31, 0xFF	; 255
    2de2:	60 81       	ld	r22, Z
    2de4:	71 81       	ldd	r23, Z+1	; 0x01
    2de6:	82 81       	ldd	r24, Z+2	; 0x02
    2de8:	93 81       	ldd	r25, Z+3	; 0x03
    2dea:	20 e0       	ldi	r18, 0x00	; 0
    2dec:	3f ef       	ldi	r19, 0xFF	; 255
    2dee:	4f e7       	ldi	r20, 0x7F	; 127
    2df0:	57 e4       	ldi	r21, 0x47	; 71
    2df2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2df6:	18 16       	cp	r1, r24
    2df8:	0c f0       	brlt	.+2      	; 0x2dfc <LCD_DisplayChar+0xbe>
    2dfa:	43 c0       	rjmp	.+134    	; 0x2e82 <LCD_DisplayChar+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dfc:	fe 01       	movw	r30, r28
    2dfe:	e1 5a       	subi	r30, 0xA1	; 161
    2e00:	ff 4f       	sbci	r31, 0xFF	; 255
    2e02:	60 81       	ld	r22, Z
    2e04:	71 81       	ldd	r23, Z+1	; 0x01
    2e06:	82 81       	ldd	r24, Z+2	; 0x02
    2e08:	93 81       	ldd	r25, Z+3	; 0x03
    2e0a:	20 e0       	ldi	r18, 0x00	; 0
    2e0c:	30 e0       	ldi	r19, 0x00	; 0
    2e0e:	40 e2       	ldi	r20, 0x20	; 32
    2e10:	51 e4       	ldi	r21, 0x41	; 65
    2e12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e16:	dc 01       	movw	r26, r24
    2e18:	cb 01       	movw	r24, r22
    2e1a:	8e 01       	movw	r16, r28
    2e1c:	07 5a       	subi	r16, 0xA7	; 167
    2e1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e20:	bc 01       	movw	r22, r24
    2e22:	cd 01       	movw	r24, r26
    2e24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e28:	dc 01       	movw	r26, r24
    2e2a:	cb 01       	movw	r24, r22
    2e2c:	f8 01       	movw	r30, r16
    2e2e:	91 83       	std	Z+1, r25	; 0x01
    2e30:	80 83       	st	Z, r24
    2e32:	1f c0       	rjmp	.+62     	; 0x2e72 <LCD_DisplayChar+0x134>
    2e34:	fe 01       	movw	r30, r28
    2e36:	e9 5a       	subi	r30, 0xA9	; 169
    2e38:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3a:	88 ec       	ldi	r24, 0xC8	; 200
    2e3c:	90 e0       	ldi	r25, 0x00	; 0
    2e3e:	91 83       	std	Z+1, r25	; 0x01
    2e40:	80 83       	st	Z, r24
    2e42:	fe 01       	movw	r30, r28
    2e44:	e9 5a       	subi	r30, 0xA9	; 169
    2e46:	ff 4f       	sbci	r31, 0xFF	; 255
    2e48:	80 81       	ld	r24, Z
    2e4a:	91 81       	ldd	r25, Z+1	; 0x01
    2e4c:	01 97       	sbiw	r24, 0x01	; 1
    2e4e:	f1 f7       	brne	.-4      	; 0x2e4c <LCD_DisplayChar+0x10e>
    2e50:	fe 01       	movw	r30, r28
    2e52:	e9 5a       	subi	r30, 0xA9	; 169
    2e54:	ff 4f       	sbci	r31, 0xFF	; 255
    2e56:	91 83       	std	Z+1, r25	; 0x01
    2e58:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e5a:	de 01       	movw	r26, r28
    2e5c:	a7 5a       	subi	r26, 0xA7	; 167
    2e5e:	bf 4f       	sbci	r27, 0xFF	; 255
    2e60:	fe 01       	movw	r30, r28
    2e62:	e7 5a       	subi	r30, 0xA7	; 167
    2e64:	ff 4f       	sbci	r31, 0xFF	; 255
    2e66:	80 81       	ld	r24, Z
    2e68:	91 81       	ldd	r25, Z+1	; 0x01
    2e6a:	01 97       	sbiw	r24, 0x01	; 1
    2e6c:	11 96       	adiw	r26, 0x01	; 1
    2e6e:	9c 93       	st	X, r25
    2e70:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e72:	fe 01       	movw	r30, r28
    2e74:	e7 5a       	subi	r30, 0xA7	; 167
    2e76:	ff 4f       	sbci	r31, 0xFF	; 255
    2e78:	80 81       	ld	r24, Z
    2e7a:	91 81       	ldd	r25, Z+1	; 0x01
    2e7c:	00 97       	sbiw	r24, 0x00	; 0
    2e7e:	d1 f6       	brne	.-76     	; 0x2e34 <LCD_DisplayChar+0xf6>
    2e80:	27 c0       	rjmp	.+78     	; 0x2ed0 <LCD_DisplayChar+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e82:	8e 01       	movw	r16, r28
    2e84:	07 5a       	subi	r16, 0xA7	; 167
    2e86:	1f 4f       	sbci	r17, 0xFF	; 255
    2e88:	fe 01       	movw	r30, r28
    2e8a:	e5 5a       	subi	r30, 0xA5	; 165
    2e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8e:	60 81       	ld	r22, Z
    2e90:	71 81       	ldd	r23, Z+1	; 0x01
    2e92:	82 81       	ldd	r24, Z+2	; 0x02
    2e94:	93 81       	ldd	r25, Z+3	; 0x03
    2e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e9a:	dc 01       	movw	r26, r24
    2e9c:	cb 01       	movw	r24, r22
    2e9e:	f8 01       	movw	r30, r16
    2ea0:	91 83       	std	Z+1, r25	; 0x01
    2ea2:	80 83       	st	Z, r24
    2ea4:	de 01       	movw	r26, r28
    2ea6:	ab 5a       	subi	r26, 0xAB	; 171
    2ea8:	bf 4f       	sbci	r27, 0xFF	; 255
    2eaa:	fe 01       	movw	r30, r28
    2eac:	e7 5a       	subi	r30, 0xA7	; 167
    2eae:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb0:	80 81       	ld	r24, Z
    2eb2:	91 81       	ldd	r25, Z+1	; 0x01
    2eb4:	8d 93       	st	X+, r24
    2eb6:	9c 93       	st	X, r25
    2eb8:	fe 01       	movw	r30, r28
    2eba:	eb 5a       	subi	r30, 0xAB	; 171
    2ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ebe:	80 81       	ld	r24, Z
    2ec0:	91 81       	ldd	r25, Z+1	; 0x01
    2ec2:	01 97       	sbiw	r24, 0x01	; 1
    2ec4:	f1 f7       	brne	.-4      	; 0x2ec2 <LCD_DisplayChar+0x184>
    2ec6:	fe 01       	movw	r30, r28
    2ec8:	eb 5a       	subi	r30, 0xAB	; 171
    2eca:	ff 4f       	sbci	r31, 0xFF	; 255
    2ecc:	91 83       	std	Z+1, r25	; 0x01
    2ece:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);/*E=1*/
    2ed0:	82 e0       	ldi	r24, 0x02	; 2
    2ed2:	63 e0       	ldi	r22, 0x03	; 3
    2ed4:	41 e0       	ldi	r20, 0x01	; 1
    2ed6:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
    2eda:	fe 01       	movw	r30, r28
    2edc:	ef 5a       	subi	r30, 0xAF	; 175
    2ede:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee0:	80 e0       	ldi	r24, 0x00	; 0
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	a0 e8       	ldi	r26, 0x80	; 128
    2ee6:	bf e3       	ldi	r27, 0x3F	; 63
    2ee8:	80 83       	st	Z, r24
    2eea:	91 83       	std	Z+1, r25	; 0x01
    2eec:	a2 83       	std	Z+2, r26	; 0x02
    2eee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ef0:	8e 01       	movw	r16, r28
    2ef2:	03 5b       	subi	r16, 0xB3	; 179
    2ef4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ef6:	fe 01       	movw	r30, r28
    2ef8:	ef 5a       	subi	r30, 0xAF	; 175
    2efa:	ff 4f       	sbci	r31, 0xFF	; 255
    2efc:	60 81       	ld	r22, Z
    2efe:	71 81       	ldd	r23, Z+1	; 0x01
    2f00:	82 81       	ldd	r24, Z+2	; 0x02
    2f02:	93 81       	ldd	r25, Z+3	; 0x03
    2f04:	20 e0       	ldi	r18, 0x00	; 0
    2f06:	30 e0       	ldi	r19, 0x00	; 0
    2f08:	4a ef       	ldi	r20, 0xFA	; 250
    2f0a:	54 e4       	ldi	r21, 0x44	; 68
    2f0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f10:	dc 01       	movw	r26, r24
    2f12:	cb 01       	movw	r24, r22
    2f14:	f8 01       	movw	r30, r16
    2f16:	80 83       	st	Z, r24
    2f18:	91 83       	std	Z+1, r25	; 0x01
    2f1a:	a2 83       	std	Z+2, r26	; 0x02
    2f1c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f1e:	fe 01       	movw	r30, r28
    2f20:	e3 5b       	subi	r30, 0xB3	; 179
    2f22:	ff 4f       	sbci	r31, 0xFF	; 255
    2f24:	60 81       	ld	r22, Z
    2f26:	71 81       	ldd	r23, Z+1	; 0x01
    2f28:	82 81       	ldd	r24, Z+2	; 0x02
    2f2a:	93 81       	ldd	r25, Z+3	; 0x03
    2f2c:	20 e0       	ldi	r18, 0x00	; 0
    2f2e:	30 e0       	ldi	r19, 0x00	; 0
    2f30:	40 e8       	ldi	r20, 0x80	; 128
    2f32:	5f e3       	ldi	r21, 0x3F	; 63
    2f34:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f38:	88 23       	and	r24, r24
    2f3a:	44 f4       	brge	.+16     	; 0x2f4c <LCD_DisplayChar+0x20e>
		__ticks = 1;
    2f3c:	fe 01       	movw	r30, r28
    2f3e:	e5 5b       	subi	r30, 0xB5	; 181
    2f40:	ff 4f       	sbci	r31, 0xFF	; 255
    2f42:	81 e0       	ldi	r24, 0x01	; 1
    2f44:	90 e0       	ldi	r25, 0x00	; 0
    2f46:	91 83       	std	Z+1, r25	; 0x01
    2f48:	80 83       	st	Z, r24
    2f4a:	64 c0       	rjmp	.+200    	; 0x3014 <LCD_DisplayChar+0x2d6>
	else if (__tmp > 65535)
    2f4c:	fe 01       	movw	r30, r28
    2f4e:	e3 5b       	subi	r30, 0xB3	; 179
    2f50:	ff 4f       	sbci	r31, 0xFF	; 255
    2f52:	60 81       	ld	r22, Z
    2f54:	71 81       	ldd	r23, Z+1	; 0x01
    2f56:	82 81       	ldd	r24, Z+2	; 0x02
    2f58:	93 81       	ldd	r25, Z+3	; 0x03
    2f5a:	20 e0       	ldi	r18, 0x00	; 0
    2f5c:	3f ef       	ldi	r19, 0xFF	; 255
    2f5e:	4f e7       	ldi	r20, 0x7F	; 127
    2f60:	57 e4       	ldi	r21, 0x47	; 71
    2f62:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f66:	18 16       	cp	r1, r24
    2f68:	0c f0       	brlt	.+2      	; 0x2f6c <LCD_DisplayChar+0x22e>
    2f6a:	43 c0       	rjmp	.+134    	; 0x2ff2 <LCD_DisplayChar+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f6c:	fe 01       	movw	r30, r28
    2f6e:	ef 5a       	subi	r30, 0xAF	; 175
    2f70:	ff 4f       	sbci	r31, 0xFF	; 255
    2f72:	60 81       	ld	r22, Z
    2f74:	71 81       	ldd	r23, Z+1	; 0x01
    2f76:	82 81       	ldd	r24, Z+2	; 0x02
    2f78:	93 81       	ldd	r25, Z+3	; 0x03
    2f7a:	20 e0       	ldi	r18, 0x00	; 0
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	40 e2       	ldi	r20, 0x20	; 32
    2f80:	51 e4       	ldi	r21, 0x41	; 65
    2f82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f86:	dc 01       	movw	r26, r24
    2f88:	cb 01       	movw	r24, r22
    2f8a:	8e 01       	movw	r16, r28
    2f8c:	05 5b       	subi	r16, 0xB5	; 181
    2f8e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f90:	bc 01       	movw	r22, r24
    2f92:	cd 01       	movw	r24, r26
    2f94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f98:	dc 01       	movw	r26, r24
    2f9a:	cb 01       	movw	r24, r22
    2f9c:	f8 01       	movw	r30, r16
    2f9e:	91 83       	std	Z+1, r25	; 0x01
    2fa0:	80 83       	st	Z, r24
    2fa2:	1f c0       	rjmp	.+62     	; 0x2fe2 <LCD_DisplayChar+0x2a4>
    2fa4:	fe 01       	movw	r30, r28
    2fa6:	e7 5b       	subi	r30, 0xB7	; 183
    2fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2faa:	88 ec       	ldi	r24, 0xC8	; 200
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	91 83       	std	Z+1, r25	; 0x01
    2fb0:	80 83       	st	Z, r24
    2fb2:	fe 01       	movw	r30, r28
    2fb4:	e7 5b       	subi	r30, 0xB7	; 183
    2fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb8:	80 81       	ld	r24, Z
    2fba:	91 81       	ldd	r25, Z+1	; 0x01
    2fbc:	01 97       	sbiw	r24, 0x01	; 1
    2fbe:	f1 f7       	brne	.-4      	; 0x2fbc <LCD_DisplayChar+0x27e>
    2fc0:	fe 01       	movw	r30, r28
    2fc2:	e7 5b       	subi	r30, 0xB7	; 183
    2fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc6:	91 83       	std	Z+1, r25	; 0x01
    2fc8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fca:	de 01       	movw	r26, r28
    2fcc:	a5 5b       	subi	r26, 0xB5	; 181
    2fce:	bf 4f       	sbci	r27, 0xFF	; 255
    2fd0:	fe 01       	movw	r30, r28
    2fd2:	e5 5b       	subi	r30, 0xB5	; 181
    2fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd6:	80 81       	ld	r24, Z
    2fd8:	91 81       	ldd	r25, Z+1	; 0x01
    2fda:	01 97       	sbiw	r24, 0x01	; 1
    2fdc:	11 96       	adiw	r26, 0x01	; 1
    2fde:	9c 93       	st	X, r25
    2fe0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fe2:	fe 01       	movw	r30, r28
    2fe4:	e5 5b       	subi	r30, 0xB5	; 181
    2fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe8:	80 81       	ld	r24, Z
    2fea:	91 81       	ldd	r25, Z+1	; 0x01
    2fec:	00 97       	sbiw	r24, 0x00	; 0
    2fee:	d1 f6       	brne	.-76     	; 0x2fa4 <LCD_DisplayChar+0x266>
    2ff0:	27 c0       	rjmp	.+78     	; 0x3040 <LCD_DisplayChar+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ff2:	8e 01       	movw	r16, r28
    2ff4:	05 5b       	subi	r16, 0xB5	; 181
    2ff6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ff8:	fe 01       	movw	r30, r28
    2ffa:	e3 5b       	subi	r30, 0xB3	; 179
    2ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffe:	60 81       	ld	r22, Z
    3000:	71 81       	ldd	r23, Z+1	; 0x01
    3002:	82 81       	ldd	r24, Z+2	; 0x02
    3004:	93 81       	ldd	r25, Z+3	; 0x03
    3006:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    300a:	dc 01       	movw	r26, r24
    300c:	cb 01       	movw	r24, r22
    300e:	f8 01       	movw	r30, r16
    3010:	91 83       	std	Z+1, r25	; 0x01
    3012:	80 83       	st	Z, r24
    3014:	de 01       	movw	r26, r28
    3016:	a9 5b       	subi	r26, 0xB9	; 185
    3018:	bf 4f       	sbci	r27, 0xFF	; 255
    301a:	fe 01       	movw	r30, r28
    301c:	e5 5b       	subi	r30, 0xB5	; 181
    301e:	ff 4f       	sbci	r31, 0xFF	; 255
    3020:	80 81       	ld	r24, Z
    3022:	91 81       	ldd	r25, Z+1	; 0x01
    3024:	8d 93       	st	X+, r24
    3026:	9c 93       	st	X, r25
    3028:	fe 01       	movw	r30, r28
    302a:	e9 5b       	subi	r30, 0xB9	; 185
    302c:	ff 4f       	sbci	r31, 0xFF	; 255
    302e:	80 81       	ld	r24, Z
    3030:	91 81       	ldd	r25, Z+1	; 0x01
    3032:	01 97       	sbiw	r24, 0x01	; 1
    3034:	f1 f7       	brne	.-4      	; 0x3032 <LCD_DisplayChar+0x2f4>
    3036:	fe 01       	movw	r30, r28
    3038:	e9 5b       	subi	r30, 0xB9	; 185
    303a:	ff 4f       	sbci	r31, 0xFF	; 255
    303c:	91 83       	std	Z+1, r25	; 0x01
    303e:	80 83       	st	Z, r24
	GPIO_writePort(LCD_DATA_PORT_ID, data);/*OUT COMMAND*/
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID,LOGIC_LOW);/*E=0*/
	_delay_ms(1);
#elif(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID , GET_BIT(data,4));
    3040:	fe 01       	movw	r30, r28
    3042:	ed 59       	subi	r30, 0x9D	; 157
    3044:	ff 4f       	sbci	r31, 0xFF	; 255
    3046:	80 81       	ld	r24, Z
    3048:	88 2f       	mov	r24, r24
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	80 71       	andi	r24, 0x10	; 16
    304e:	90 70       	andi	r25, 0x00	; 0
    3050:	95 95       	asr	r25
    3052:	87 95       	ror	r24
    3054:	95 95       	asr	r25
    3056:	87 95       	ror	r24
    3058:	95 95       	asr	r25
    305a:	87 95       	ror	r24
    305c:	95 95       	asr	r25
    305e:	87 95       	ror	r24
    3060:	98 2f       	mov	r25, r24
    3062:	81 e0       	ldi	r24, 0x01	; 1
    3064:	64 e0       	ldi	r22, 0x04	; 4
    3066:	49 2f       	mov	r20, r25
    3068:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID , GET_BIT(data,5));
    306c:	fe 01       	movw	r30, r28
    306e:	ed 59       	subi	r30, 0x9D	; 157
    3070:	ff 4f       	sbci	r31, 0xFF	; 255
    3072:	80 81       	ld	r24, Z
    3074:	88 2f       	mov	r24, r24
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	80 72       	andi	r24, 0x20	; 32
    307a:	90 70       	andi	r25, 0x00	; 0
    307c:	95 95       	asr	r25
    307e:	87 95       	ror	r24
    3080:	95 95       	asr	r25
    3082:	87 95       	ror	r24
    3084:	95 95       	asr	r25
    3086:	87 95       	ror	r24
    3088:	95 95       	asr	r25
    308a:	87 95       	ror	r24
    308c:	95 95       	asr	r25
    308e:	87 95       	ror	r24
    3090:	98 2f       	mov	r25, r24
    3092:	81 e0       	ldi	r24, 0x01	; 1
    3094:	65 e0       	ldi	r22, 0x05	; 5
    3096:	49 2f       	mov	r20, r25
    3098:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID , GET_BIT(data,6));
    309c:	fe 01       	movw	r30, r28
    309e:	ed 59       	subi	r30, 0x9D	; 157
    30a0:	ff 4f       	sbci	r31, 0xFF	; 255
    30a2:	80 81       	ld	r24, Z
    30a4:	88 2f       	mov	r24, r24
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	80 74       	andi	r24, 0x40	; 64
    30aa:	90 70       	andi	r25, 0x00	; 0
    30ac:	08 2e       	mov	r0, r24
    30ae:	89 2f       	mov	r24, r25
    30b0:	00 0c       	add	r0, r0
    30b2:	88 1f       	adc	r24, r24
    30b4:	99 0b       	sbc	r25, r25
    30b6:	00 0c       	add	r0, r0
    30b8:	88 1f       	adc	r24, r24
    30ba:	99 1f       	adc	r25, r25
    30bc:	98 2f       	mov	r25, r24
    30be:	81 e0       	ldi	r24, 0x01	; 1
    30c0:	66 e0       	ldi	r22, 0x06	; 6
    30c2:	49 2f       	mov	r20, r25
    30c4:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID , GET_BIT(data,7));
    30c8:	fe 01       	movw	r30, r28
    30ca:	ed 59       	subi	r30, 0x9D	; 157
    30cc:	ff 4f       	sbci	r31, 0xFF	; 255
    30ce:	80 81       	ld	r24, Z
    30d0:	98 2f       	mov	r25, r24
    30d2:	99 1f       	adc	r25, r25
    30d4:	99 27       	eor	r25, r25
    30d6:	99 1f       	adc	r25, r25
    30d8:	81 e0       	ldi	r24, 0x01	; 1
    30da:	67 e0       	ldi	r22, 0x07	; 7
    30dc:	49 2f       	mov	r20, r25
    30de:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
    30e2:	fe 01       	movw	r30, r28
    30e4:	ed 5b       	subi	r30, 0xBD	; 189
    30e6:	ff 4f       	sbci	r31, 0xFF	; 255
    30e8:	80 e0       	ldi	r24, 0x00	; 0
    30ea:	90 e0       	ldi	r25, 0x00	; 0
    30ec:	a0 e8       	ldi	r26, 0x80	; 128
    30ee:	bf e3       	ldi	r27, 0x3F	; 63
    30f0:	80 83       	st	Z, r24
    30f2:	91 83       	std	Z+1, r25	; 0x01
    30f4:	a2 83       	std	Z+2, r26	; 0x02
    30f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30f8:	8e 01       	movw	r16, r28
    30fa:	01 5c       	subi	r16, 0xC1	; 193
    30fc:	1f 4f       	sbci	r17, 0xFF	; 255
    30fe:	fe 01       	movw	r30, r28
    3100:	ed 5b       	subi	r30, 0xBD	; 189
    3102:	ff 4f       	sbci	r31, 0xFF	; 255
    3104:	60 81       	ld	r22, Z
    3106:	71 81       	ldd	r23, Z+1	; 0x01
    3108:	82 81       	ldd	r24, Z+2	; 0x02
    310a:	93 81       	ldd	r25, Z+3	; 0x03
    310c:	20 e0       	ldi	r18, 0x00	; 0
    310e:	30 e0       	ldi	r19, 0x00	; 0
    3110:	4a ef       	ldi	r20, 0xFA	; 250
    3112:	54 e4       	ldi	r21, 0x44	; 68
    3114:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3118:	dc 01       	movw	r26, r24
    311a:	cb 01       	movw	r24, r22
    311c:	f8 01       	movw	r30, r16
    311e:	80 83       	st	Z, r24
    3120:	91 83       	std	Z+1, r25	; 0x01
    3122:	a2 83       	std	Z+2, r26	; 0x02
    3124:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3126:	fe 01       	movw	r30, r28
    3128:	ff 96       	adiw	r30, 0x3f	; 63
    312a:	60 81       	ld	r22, Z
    312c:	71 81       	ldd	r23, Z+1	; 0x01
    312e:	82 81       	ldd	r24, Z+2	; 0x02
    3130:	93 81       	ldd	r25, Z+3	; 0x03
    3132:	20 e0       	ldi	r18, 0x00	; 0
    3134:	30 e0       	ldi	r19, 0x00	; 0
    3136:	40 e8       	ldi	r20, 0x80	; 128
    3138:	5f e3       	ldi	r21, 0x3F	; 63
    313a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    313e:	88 23       	and	r24, r24
    3140:	2c f4       	brge	.+10     	; 0x314c <LCD_DisplayChar+0x40e>
		__ticks = 1;
    3142:	81 e0       	ldi	r24, 0x01	; 1
    3144:	90 e0       	ldi	r25, 0x00	; 0
    3146:	9e af       	std	Y+62, r25	; 0x3e
    3148:	8d af       	std	Y+61, r24	; 0x3d
    314a:	46 c0       	rjmp	.+140    	; 0x31d8 <LCD_DisplayChar+0x49a>
	else if (__tmp > 65535)
    314c:	fe 01       	movw	r30, r28
    314e:	ff 96       	adiw	r30, 0x3f	; 63
    3150:	60 81       	ld	r22, Z
    3152:	71 81       	ldd	r23, Z+1	; 0x01
    3154:	82 81       	ldd	r24, Z+2	; 0x02
    3156:	93 81       	ldd	r25, Z+3	; 0x03
    3158:	20 e0       	ldi	r18, 0x00	; 0
    315a:	3f ef       	ldi	r19, 0xFF	; 255
    315c:	4f e7       	ldi	r20, 0x7F	; 127
    315e:	57 e4       	ldi	r21, 0x47	; 71
    3160:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3164:	18 16       	cp	r1, r24
    3166:	64 f5       	brge	.+88     	; 0x31c0 <LCD_DisplayChar+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3168:	fe 01       	movw	r30, r28
    316a:	ed 5b       	subi	r30, 0xBD	; 189
    316c:	ff 4f       	sbci	r31, 0xFF	; 255
    316e:	60 81       	ld	r22, Z
    3170:	71 81       	ldd	r23, Z+1	; 0x01
    3172:	82 81       	ldd	r24, Z+2	; 0x02
    3174:	93 81       	ldd	r25, Z+3	; 0x03
    3176:	20 e0       	ldi	r18, 0x00	; 0
    3178:	30 e0       	ldi	r19, 0x00	; 0
    317a:	40 e2       	ldi	r20, 0x20	; 32
    317c:	51 e4       	ldi	r21, 0x41	; 65
    317e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3182:	dc 01       	movw	r26, r24
    3184:	cb 01       	movw	r24, r22
    3186:	bc 01       	movw	r22, r24
    3188:	cd 01       	movw	r24, r26
    318a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    318e:	dc 01       	movw	r26, r24
    3190:	cb 01       	movw	r24, r22
    3192:	9e af       	std	Y+62, r25	; 0x3e
    3194:	8d af       	std	Y+61, r24	; 0x3d
    3196:	0f c0       	rjmp	.+30     	; 0x31b6 <LCD_DisplayChar+0x478>
    3198:	88 ec       	ldi	r24, 0xC8	; 200
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	9c af       	std	Y+60, r25	; 0x3c
    319e:	8b af       	std	Y+59, r24	; 0x3b
    31a0:	8b ad       	ldd	r24, Y+59	; 0x3b
    31a2:	9c ad       	ldd	r25, Y+60	; 0x3c
    31a4:	01 97       	sbiw	r24, 0x01	; 1
    31a6:	f1 f7       	brne	.-4      	; 0x31a4 <LCD_DisplayChar+0x466>
    31a8:	9c af       	std	Y+60, r25	; 0x3c
    31aa:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31ac:	8d ad       	ldd	r24, Y+61	; 0x3d
    31ae:	9e ad       	ldd	r25, Y+62	; 0x3e
    31b0:	01 97       	sbiw	r24, 0x01	; 1
    31b2:	9e af       	std	Y+62, r25	; 0x3e
    31b4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    31b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    31ba:	00 97       	sbiw	r24, 0x00	; 0
    31bc:	69 f7       	brne	.-38     	; 0x3198 <LCD_DisplayChar+0x45a>
    31be:	16 c0       	rjmp	.+44     	; 0x31ec <LCD_DisplayChar+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31c0:	fe 01       	movw	r30, r28
    31c2:	ff 96       	adiw	r30, 0x3f	; 63
    31c4:	60 81       	ld	r22, Z
    31c6:	71 81       	ldd	r23, Z+1	; 0x01
    31c8:	82 81       	ldd	r24, Z+2	; 0x02
    31ca:	93 81       	ldd	r25, Z+3	; 0x03
    31cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31d0:	dc 01       	movw	r26, r24
    31d2:	cb 01       	movw	r24, r22
    31d4:	9e af       	std	Y+62, r25	; 0x3e
    31d6:	8d af       	std	Y+61, r24	; 0x3d
    31d8:	8d ad       	ldd	r24, Y+61	; 0x3d
    31da:	9e ad       	ldd	r25, Y+62	; 0x3e
    31dc:	9a af       	std	Y+58, r25	; 0x3a
    31de:	89 af       	std	Y+57, r24	; 0x39
    31e0:	89 ad       	ldd	r24, Y+57	; 0x39
    31e2:	9a ad       	ldd	r25, Y+58	; 0x3a
    31e4:	01 97       	sbiw	r24, 0x01	; 1
    31e6:	f1 f7       	brne	.-4      	; 0x31e4 <LCD_DisplayChar+0x4a6>
    31e8:	9a af       	std	Y+58, r25	; 0x3a
    31ea:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID,LOGIC_LOW);/*E=0*/
    31ec:	82 e0       	ldi	r24, 0x02	; 2
    31ee:	63 e0       	ldi	r22, 0x03	; 3
    31f0:	40 e0       	ldi	r20, 0x00	; 0
    31f2:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
    31f6:	80 e0       	ldi	r24, 0x00	; 0
    31f8:	90 e0       	ldi	r25, 0x00	; 0
    31fa:	a0 e8       	ldi	r26, 0x80	; 128
    31fc:	bf e3       	ldi	r27, 0x3F	; 63
    31fe:	8d ab       	std	Y+53, r24	; 0x35
    3200:	9e ab       	std	Y+54, r25	; 0x36
    3202:	af ab       	std	Y+55, r26	; 0x37
    3204:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3206:	6d a9       	ldd	r22, Y+53	; 0x35
    3208:	7e a9       	ldd	r23, Y+54	; 0x36
    320a:	8f a9       	ldd	r24, Y+55	; 0x37
    320c:	98 ad       	ldd	r25, Y+56	; 0x38
    320e:	20 e0       	ldi	r18, 0x00	; 0
    3210:	30 e0       	ldi	r19, 0x00	; 0
    3212:	4a ef       	ldi	r20, 0xFA	; 250
    3214:	54 e4       	ldi	r21, 0x44	; 68
    3216:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    321a:	dc 01       	movw	r26, r24
    321c:	cb 01       	movw	r24, r22
    321e:	89 ab       	std	Y+49, r24	; 0x31
    3220:	9a ab       	std	Y+50, r25	; 0x32
    3222:	ab ab       	std	Y+51, r26	; 0x33
    3224:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3226:	69 a9       	ldd	r22, Y+49	; 0x31
    3228:	7a a9       	ldd	r23, Y+50	; 0x32
    322a:	8b a9       	ldd	r24, Y+51	; 0x33
    322c:	9c a9       	ldd	r25, Y+52	; 0x34
    322e:	20 e0       	ldi	r18, 0x00	; 0
    3230:	30 e0       	ldi	r19, 0x00	; 0
    3232:	40 e8       	ldi	r20, 0x80	; 128
    3234:	5f e3       	ldi	r21, 0x3F	; 63
    3236:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    323a:	88 23       	and	r24, r24
    323c:	2c f4       	brge	.+10     	; 0x3248 <LCD_DisplayChar+0x50a>
		__ticks = 1;
    323e:	81 e0       	ldi	r24, 0x01	; 1
    3240:	90 e0       	ldi	r25, 0x00	; 0
    3242:	98 ab       	std	Y+48, r25	; 0x30
    3244:	8f a7       	std	Y+47, r24	; 0x2f
    3246:	3f c0       	rjmp	.+126    	; 0x32c6 <LCD_DisplayChar+0x588>
	else if (__tmp > 65535)
    3248:	69 a9       	ldd	r22, Y+49	; 0x31
    324a:	7a a9       	ldd	r23, Y+50	; 0x32
    324c:	8b a9       	ldd	r24, Y+51	; 0x33
    324e:	9c a9       	ldd	r25, Y+52	; 0x34
    3250:	20 e0       	ldi	r18, 0x00	; 0
    3252:	3f ef       	ldi	r19, 0xFF	; 255
    3254:	4f e7       	ldi	r20, 0x7F	; 127
    3256:	57 e4       	ldi	r21, 0x47	; 71
    3258:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    325c:	18 16       	cp	r1, r24
    325e:	4c f5       	brge	.+82     	; 0x32b2 <LCD_DisplayChar+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3260:	6d a9       	ldd	r22, Y+53	; 0x35
    3262:	7e a9       	ldd	r23, Y+54	; 0x36
    3264:	8f a9       	ldd	r24, Y+55	; 0x37
    3266:	98 ad       	ldd	r25, Y+56	; 0x38
    3268:	20 e0       	ldi	r18, 0x00	; 0
    326a:	30 e0       	ldi	r19, 0x00	; 0
    326c:	40 e2       	ldi	r20, 0x20	; 32
    326e:	51 e4       	ldi	r21, 0x41	; 65
    3270:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3274:	dc 01       	movw	r26, r24
    3276:	cb 01       	movw	r24, r22
    3278:	bc 01       	movw	r22, r24
    327a:	cd 01       	movw	r24, r26
    327c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3280:	dc 01       	movw	r26, r24
    3282:	cb 01       	movw	r24, r22
    3284:	98 ab       	std	Y+48, r25	; 0x30
    3286:	8f a7       	std	Y+47, r24	; 0x2f
    3288:	0f c0       	rjmp	.+30     	; 0x32a8 <LCD_DisplayChar+0x56a>
    328a:	88 ec       	ldi	r24, 0xC8	; 200
    328c:	90 e0       	ldi	r25, 0x00	; 0
    328e:	9e a7       	std	Y+46, r25	; 0x2e
    3290:	8d a7       	std	Y+45, r24	; 0x2d
    3292:	8d a5       	ldd	r24, Y+45	; 0x2d
    3294:	9e a5       	ldd	r25, Y+46	; 0x2e
    3296:	01 97       	sbiw	r24, 0x01	; 1
    3298:	f1 f7       	brne	.-4      	; 0x3296 <LCD_DisplayChar+0x558>
    329a:	9e a7       	std	Y+46, r25	; 0x2e
    329c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    329e:	8f a5       	ldd	r24, Y+47	; 0x2f
    32a0:	98 a9       	ldd	r25, Y+48	; 0x30
    32a2:	01 97       	sbiw	r24, 0x01	; 1
    32a4:	98 ab       	std	Y+48, r25	; 0x30
    32a6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    32aa:	98 a9       	ldd	r25, Y+48	; 0x30
    32ac:	00 97       	sbiw	r24, 0x00	; 0
    32ae:	69 f7       	brne	.-38     	; 0x328a <LCD_DisplayChar+0x54c>
    32b0:	14 c0       	rjmp	.+40     	; 0x32da <LCD_DisplayChar+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32b2:	69 a9       	ldd	r22, Y+49	; 0x31
    32b4:	7a a9       	ldd	r23, Y+50	; 0x32
    32b6:	8b a9       	ldd	r24, Y+51	; 0x33
    32b8:	9c a9       	ldd	r25, Y+52	; 0x34
    32ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32be:	dc 01       	movw	r26, r24
    32c0:	cb 01       	movw	r24, r22
    32c2:	98 ab       	std	Y+48, r25	; 0x30
    32c4:	8f a7       	std	Y+47, r24	; 0x2f
    32c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    32c8:	98 a9       	ldd	r25, Y+48	; 0x30
    32ca:	9c a7       	std	Y+44, r25	; 0x2c
    32cc:	8b a7       	std	Y+43, r24	; 0x2b
    32ce:	8b a5       	ldd	r24, Y+43	; 0x2b
    32d0:	9c a5       	ldd	r25, Y+44	; 0x2c
    32d2:	01 97       	sbiw	r24, 0x01	; 1
    32d4:	f1 f7       	brne	.-4      	; 0x32d2 <LCD_DisplayChar+0x594>
    32d6:	9c a7       	std	Y+44, r25	; 0x2c
    32d8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID,LOGIC_HIGH);/*E=1*/
    32da:	82 e0       	ldi	r24, 0x02	; 2
    32dc:	63 e0       	ldi	r22, 0x03	; 3
    32de:	41 e0       	ldi	r20, 0x01	; 1
    32e0:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
    32e4:	80 e0       	ldi	r24, 0x00	; 0
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	a0 e8       	ldi	r26, 0x80	; 128
    32ea:	bf e3       	ldi	r27, 0x3F	; 63
    32ec:	8f a3       	std	Y+39, r24	; 0x27
    32ee:	98 a7       	std	Y+40, r25	; 0x28
    32f0:	a9 a7       	std	Y+41, r26	; 0x29
    32f2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32f4:	6f a1       	ldd	r22, Y+39	; 0x27
    32f6:	78 a5       	ldd	r23, Y+40	; 0x28
    32f8:	89 a5       	ldd	r24, Y+41	; 0x29
    32fa:	9a a5       	ldd	r25, Y+42	; 0x2a
    32fc:	20 e0       	ldi	r18, 0x00	; 0
    32fe:	30 e0       	ldi	r19, 0x00	; 0
    3300:	4a ef       	ldi	r20, 0xFA	; 250
    3302:	54 e4       	ldi	r21, 0x44	; 68
    3304:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3308:	dc 01       	movw	r26, r24
    330a:	cb 01       	movw	r24, r22
    330c:	8b a3       	std	Y+35, r24	; 0x23
    330e:	9c a3       	std	Y+36, r25	; 0x24
    3310:	ad a3       	std	Y+37, r26	; 0x25
    3312:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3314:	6b a1       	ldd	r22, Y+35	; 0x23
    3316:	7c a1       	ldd	r23, Y+36	; 0x24
    3318:	8d a1       	ldd	r24, Y+37	; 0x25
    331a:	9e a1       	ldd	r25, Y+38	; 0x26
    331c:	20 e0       	ldi	r18, 0x00	; 0
    331e:	30 e0       	ldi	r19, 0x00	; 0
    3320:	40 e8       	ldi	r20, 0x80	; 128
    3322:	5f e3       	ldi	r21, 0x3F	; 63
    3324:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3328:	88 23       	and	r24, r24
    332a:	2c f4       	brge	.+10     	; 0x3336 <LCD_DisplayChar+0x5f8>
		__ticks = 1;
    332c:	81 e0       	ldi	r24, 0x01	; 1
    332e:	90 e0       	ldi	r25, 0x00	; 0
    3330:	9a a3       	std	Y+34, r25	; 0x22
    3332:	89 a3       	std	Y+33, r24	; 0x21
    3334:	3f c0       	rjmp	.+126    	; 0x33b4 <LCD_DisplayChar+0x676>
	else if (__tmp > 65535)
    3336:	6b a1       	ldd	r22, Y+35	; 0x23
    3338:	7c a1       	ldd	r23, Y+36	; 0x24
    333a:	8d a1       	ldd	r24, Y+37	; 0x25
    333c:	9e a1       	ldd	r25, Y+38	; 0x26
    333e:	20 e0       	ldi	r18, 0x00	; 0
    3340:	3f ef       	ldi	r19, 0xFF	; 255
    3342:	4f e7       	ldi	r20, 0x7F	; 127
    3344:	57 e4       	ldi	r21, 0x47	; 71
    3346:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    334a:	18 16       	cp	r1, r24
    334c:	4c f5       	brge	.+82     	; 0x33a0 <LCD_DisplayChar+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    334e:	6f a1       	ldd	r22, Y+39	; 0x27
    3350:	78 a5       	ldd	r23, Y+40	; 0x28
    3352:	89 a5       	ldd	r24, Y+41	; 0x29
    3354:	9a a5       	ldd	r25, Y+42	; 0x2a
    3356:	20 e0       	ldi	r18, 0x00	; 0
    3358:	30 e0       	ldi	r19, 0x00	; 0
    335a:	40 e2       	ldi	r20, 0x20	; 32
    335c:	51 e4       	ldi	r21, 0x41	; 65
    335e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3362:	dc 01       	movw	r26, r24
    3364:	cb 01       	movw	r24, r22
    3366:	bc 01       	movw	r22, r24
    3368:	cd 01       	movw	r24, r26
    336a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    336e:	dc 01       	movw	r26, r24
    3370:	cb 01       	movw	r24, r22
    3372:	9a a3       	std	Y+34, r25	; 0x22
    3374:	89 a3       	std	Y+33, r24	; 0x21
    3376:	0f c0       	rjmp	.+30     	; 0x3396 <LCD_DisplayChar+0x658>
    3378:	88 ec       	ldi	r24, 0xC8	; 200
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	98 a3       	std	Y+32, r25	; 0x20
    337e:	8f 8f       	std	Y+31, r24	; 0x1f
    3380:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3382:	98 a1       	ldd	r25, Y+32	; 0x20
    3384:	01 97       	sbiw	r24, 0x01	; 1
    3386:	f1 f7       	brne	.-4      	; 0x3384 <LCD_DisplayChar+0x646>
    3388:	98 a3       	std	Y+32, r25	; 0x20
    338a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    338c:	89 a1       	ldd	r24, Y+33	; 0x21
    338e:	9a a1       	ldd	r25, Y+34	; 0x22
    3390:	01 97       	sbiw	r24, 0x01	; 1
    3392:	9a a3       	std	Y+34, r25	; 0x22
    3394:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3396:	89 a1       	ldd	r24, Y+33	; 0x21
    3398:	9a a1       	ldd	r25, Y+34	; 0x22
    339a:	00 97       	sbiw	r24, 0x00	; 0
    339c:	69 f7       	brne	.-38     	; 0x3378 <LCD_DisplayChar+0x63a>
    339e:	14 c0       	rjmp	.+40     	; 0x33c8 <LCD_DisplayChar+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33a0:	6b a1       	ldd	r22, Y+35	; 0x23
    33a2:	7c a1       	ldd	r23, Y+36	; 0x24
    33a4:	8d a1       	ldd	r24, Y+37	; 0x25
    33a6:	9e a1       	ldd	r25, Y+38	; 0x26
    33a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ac:	dc 01       	movw	r26, r24
    33ae:	cb 01       	movw	r24, r22
    33b0:	9a a3       	std	Y+34, r25	; 0x22
    33b2:	89 a3       	std	Y+33, r24	; 0x21
    33b4:	89 a1       	ldd	r24, Y+33	; 0x21
    33b6:	9a a1       	ldd	r25, Y+34	; 0x22
    33b8:	9e 8f       	std	Y+30, r25	; 0x1e
    33ba:	8d 8f       	std	Y+29, r24	; 0x1d
    33bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33be:	9e 8d       	ldd	r25, Y+30	; 0x1e
    33c0:	01 97       	sbiw	r24, 0x01	; 1
    33c2:	f1 f7       	brne	.-4      	; 0x33c0 <LCD_DisplayChar+0x682>
    33c4:	9e 8f       	std	Y+30, r25	; 0x1e
    33c6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID , GET_BIT(data,0));
    33c8:	fe 01       	movw	r30, r28
    33ca:	ed 59       	subi	r30, 0x9D	; 157
    33cc:	ff 4f       	sbci	r31, 0xFF	; 255
    33ce:	80 81       	ld	r24, Z
    33d0:	98 2f       	mov	r25, r24
    33d2:	91 70       	andi	r25, 0x01	; 1
    33d4:	81 e0       	ldi	r24, 0x01	; 1
    33d6:	64 e0       	ldi	r22, 0x04	; 4
    33d8:	49 2f       	mov	r20, r25
    33da:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID , GET_BIT(data,1));
    33de:	fe 01       	movw	r30, r28
    33e0:	ed 59       	subi	r30, 0x9D	; 157
    33e2:	ff 4f       	sbci	r31, 0xFF	; 255
    33e4:	80 81       	ld	r24, Z
    33e6:	88 2f       	mov	r24, r24
    33e8:	90 e0       	ldi	r25, 0x00	; 0
    33ea:	82 70       	andi	r24, 0x02	; 2
    33ec:	90 70       	andi	r25, 0x00	; 0
    33ee:	95 95       	asr	r25
    33f0:	87 95       	ror	r24
    33f2:	98 2f       	mov	r25, r24
    33f4:	81 e0       	ldi	r24, 0x01	; 1
    33f6:	65 e0       	ldi	r22, 0x05	; 5
    33f8:	49 2f       	mov	r20, r25
    33fa:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID , GET_BIT(data,2));
    33fe:	fe 01       	movw	r30, r28
    3400:	ed 59       	subi	r30, 0x9D	; 157
    3402:	ff 4f       	sbci	r31, 0xFF	; 255
    3404:	80 81       	ld	r24, Z
    3406:	88 2f       	mov	r24, r24
    3408:	90 e0       	ldi	r25, 0x00	; 0
    340a:	84 70       	andi	r24, 0x04	; 4
    340c:	90 70       	andi	r25, 0x00	; 0
    340e:	95 95       	asr	r25
    3410:	87 95       	ror	r24
    3412:	95 95       	asr	r25
    3414:	87 95       	ror	r24
    3416:	98 2f       	mov	r25, r24
    3418:	81 e0       	ldi	r24, 0x01	; 1
    341a:	66 e0       	ldi	r22, 0x06	; 6
    341c:	49 2f       	mov	r20, r25
    341e:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID , GET_BIT(data,3));
    3422:	fe 01       	movw	r30, r28
    3424:	ed 59       	subi	r30, 0x9D	; 157
    3426:	ff 4f       	sbci	r31, 0xFF	; 255
    3428:	80 81       	ld	r24, Z
    342a:	88 2f       	mov	r24, r24
    342c:	90 e0       	ldi	r25, 0x00	; 0
    342e:	88 70       	andi	r24, 0x08	; 8
    3430:	90 70       	andi	r25, 0x00	; 0
    3432:	95 95       	asr	r25
    3434:	87 95       	ror	r24
    3436:	95 95       	asr	r25
    3438:	87 95       	ror	r24
    343a:	95 95       	asr	r25
    343c:	87 95       	ror	r24
    343e:	98 2f       	mov	r25, r24
    3440:	81 e0       	ldi	r24, 0x01	; 1
    3442:	67 e0       	ldi	r22, 0x07	; 7
    3444:	49 2f       	mov	r20, r25
    3446:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
    344a:	80 e0       	ldi	r24, 0x00	; 0
    344c:	90 e0       	ldi	r25, 0x00	; 0
    344e:	a0 e8       	ldi	r26, 0x80	; 128
    3450:	bf e3       	ldi	r27, 0x3F	; 63
    3452:	89 8f       	std	Y+25, r24	; 0x19
    3454:	9a 8f       	std	Y+26, r25	; 0x1a
    3456:	ab 8f       	std	Y+27, r26	; 0x1b
    3458:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    345a:	69 8d       	ldd	r22, Y+25	; 0x19
    345c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    345e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3460:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3462:	20 e0       	ldi	r18, 0x00	; 0
    3464:	30 e0       	ldi	r19, 0x00	; 0
    3466:	4a ef       	ldi	r20, 0xFA	; 250
    3468:	54 e4       	ldi	r21, 0x44	; 68
    346a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    346e:	dc 01       	movw	r26, r24
    3470:	cb 01       	movw	r24, r22
    3472:	8d 8b       	std	Y+21, r24	; 0x15
    3474:	9e 8b       	std	Y+22, r25	; 0x16
    3476:	af 8b       	std	Y+23, r26	; 0x17
    3478:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    347a:	6d 89       	ldd	r22, Y+21	; 0x15
    347c:	7e 89       	ldd	r23, Y+22	; 0x16
    347e:	8f 89       	ldd	r24, Y+23	; 0x17
    3480:	98 8d       	ldd	r25, Y+24	; 0x18
    3482:	20 e0       	ldi	r18, 0x00	; 0
    3484:	30 e0       	ldi	r19, 0x00	; 0
    3486:	40 e8       	ldi	r20, 0x80	; 128
    3488:	5f e3       	ldi	r21, 0x3F	; 63
    348a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    348e:	88 23       	and	r24, r24
    3490:	2c f4       	brge	.+10     	; 0x349c <LCD_DisplayChar+0x75e>
		__ticks = 1;
    3492:	81 e0       	ldi	r24, 0x01	; 1
    3494:	90 e0       	ldi	r25, 0x00	; 0
    3496:	9c 8b       	std	Y+20, r25	; 0x14
    3498:	8b 8b       	std	Y+19, r24	; 0x13
    349a:	3f c0       	rjmp	.+126    	; 0x351a <LCD_DisplayChar+0x7dc>
	else if (__tmp > 65535)
    349c:	6d 89       	ldd	r22, Y+21	; 0x15
    349e:	7e 89       	ldd	r23, Y+22	; 0x16
    34a0:	8f 89       	ldd	r24, Y+23	; 0x17
    34a2:	98 8d       	ldd	r25, Y+24	; 0x18
    34a4:	20 e0       	ldi	r18, 0x00	; 0
    34a6:	3f ef       	ldi	r19, 0xFF	; 255
    34a8:	4f e7       	ldi	r20, 0x7F	; 127
    34aa:	57 e4       	ldi	r21, 0x47	; 71
    34ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34b0:	18 16       	cp	r1, r24
    34b2:	4c f5       	brge	.+82     	; 0x3506 <LCD_DisplayChar+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34b4:	69 8d       	ldd	r22, Y+25	; 0x19
    34b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34bc:	20 e0       	ldi	r18, 0x00	; 0
    34be:	30 e0       	ldi	r19, 0x00	; 0
    34c0:	40 e2       	ldi	r20, 0x20	; 32
    34c2:	51 e4       	ldi	r21, 0x41	; 65
    34c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34c8:	dc 01       	movw	r26, r24
    34ca:	cb 01       	movw	r24, r22
    34cc:	bc 01       	movw	r22, r24
    34ce:	cd 01       	movw	r24, r26
    34d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34d4:	dc 01       	movw	r26, r24
    34d6:	cb 01       	movw	r24, r22
    34d8:	9c 8b       	std	Y+20, r25	; 0x14
    34da:	8b 8b       	std	Y+19, r24	; 0x13
    34dc:	0f c0       	rjmp	.+30     	; 0x34fc <LCD_DisplayChar+0x7be>
    34de:	88 ec       	ldi	r24, 0xC8	; 200
    34e0:	90 e0       	ldi	r25, 0x00	; 0
    34e2:	9a 8b       	std	Y+18, r25	; 0x12
    34e4:	89 8b       	std	Y+17, r24	; 0x11
    34e6:	89 89       	ldd	r24, Y+17	; 0x11
    34e8:	9a 89       	ldd	r25, Y+18	; 0x12
    34ea:	01 97       	sbiw	r24, 0x01	; 1
    34ec:	f1 f7       	brne	.-4      	; 0x34ea <LCD_DisplayChar+0x7ac>
    34ee:	9a 8b       	std	Y+18, r25	; 0x12
    34f0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34f2:	8b 89       	ldd	r24, Y+19	; 0x13
    34f4:	9c 89       	ldd	r25, Y+20	; 0x14
    34f6:	01 97       	sbiw	r24, 0x01	; 1
    34f8:	9c 8b       	std	Y+20, r25	; 0x14
    34fa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34fc:	8b 89       	ldd	r24, Y+19	; 0x13
    34fe:	9c 89       	ldd	r25, Y+20	; 0x14
    3500:	00 97       	sbiw	r24, 0x00	; 0
    3502:	69 f7       	brne	.-38     	; 0x34de <LCD_DisplayChar+0x7a0>
    3504:	14 c0       	rjmp	.+40     	; 0x352e <LCD_DisplayChar+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3506:	6d 89       	ldd	r22, Y+21	; 0x15
    3508:	7e 89       	ldd	r23, Y+22	; 0x16
    350a:	8f 89       	ldd	r24, Y+23	; 0x17
    350c:	98 8d       	ldd	r25, Y+24	; 0x18
    350e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3512:	dc 01       	movw	r26, r24
    3514:	cb 01       	movw	r24, r22
    3516:	9c 8b       	std	Y+20, r25	; 0x14
    3518:	8b 8b       	std	Y+19, r24	; 0x13
    351a:	8b 89       	ldd	r24, Y+19	; 0x13
    351c:	9c 89       	ldd	r25, Y+20	; 0x14
    351e:	98 8b       	std	Y+16, r25	; 0x10
    3520:	8f 87       	std	Y+15, r24	; 0x0f
    3522:	8f 85       	ldd	r24, Y+15	; 0x0f
    3524:	98 89       	ldd	r25, Y+16	; 0x10
    3526:	01 97       	sbiw	r24, 0x01	; 1
    3528:	f1 f7       	brne	.-4      	; 0x3526 <LCD_DisplayChar+0x7e8>
    352a:	98 8b       	std	Y+16, r25	; 0x10
    352c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /*E=0*/
    352e:	82 e0       	ldi	r24, 0x02	; 2
    3530:	63 e0       	ldi	r22, 0x03	; 3
    3532:	40 e0       	ldi	r20, 0x00	; 0
    3534:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
    3538:	80 e0       	ldi	r24, 0x00	; 0
    353a:	90 e0       	ldi	r25, 0x00	; 0
    353c:	a0 e8       	ldi	r26, 0x80	; 128
    353e:	bf e3       	ldi	r27, 0x3F	; 63
    3540:	8b 87       	std	Y+11, r24	; 0x0b
    3542:	9c 87       	std	Y+12, r25	; 0x0c
    3544:	ad 87       	std	Y+13, r26	; 0x0d
    3546:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3548:	6b 85       	ldd	r22, Y+11	; 0x0b
    354a:	7c 85       	ldd	r23, Y+12	; 0x0c
    354c:	8d 85       	ldd	r24, Y+13	; 0x0d
    354e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3550:	20 e0       	ldi	r18, 0x00	; 0
    3552:	30 e0       	ldi	r19, 0x00	; 0
    3554:	4a ef       	ldi	r20, 0xFA	; 250
    3556:	54 e4       	ldi	r21, 0x44	; 68
    3558:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    355c:	dc 01       	movw	r26, r24
    355e:	cb 01       	movw	r24, r22
    3560:	8f 83       	std	Y+7, r24	; 0x07
    3562:	98 87       	std	Y+8, r25	; 0x08
    3564:	a9 87       	std	Y+9, r26	; 0x09
    3566:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3568:	6f 81       	ldd	r22, Y+7	; 0x07
    356a:	78 85       	ldd	r23, Y+8	; 0x08
    356c:	89 85       	ldd	r24, Y+9	; 0x09
    356e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3570:	20 e0       	ldi	r18, 0x00	; 0
    3572:	30 e0       	ldi	r19, 0x00	; 0
    3574:	40 e8       	ldi	r20, 0x80	; 128
    3576:	5f e3       	ldi	r21, 0x3F	; 63
    3578:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    357c:	88 23       	and	r24, r24
    357e:	2c f4       	brge	.+10     	; 0x358a <LCD_DisplayChar+0x84c>
		__ticks = 1;
    3580:	81 e0       	ldi	r24, 0x01	; 1
    3582:	90 e0       	ldi	r25, 0x00	; 0
    3584:	9e 83       	std	Y+6, r25	; 0x06
    3586:	8d 83       	std	Y+5, r24	; 0x05
    3588:	3f c0       	rjmp	.+126    	; 0x3608 <LCD_DisplayChar+0x8ca>
	else if (__tmp > 65535)
    358a:	6f 81       	ldd	r22, Y+7	; 0x07
    358c:	78 85       	ldd	r23, Y+8	; 0x08
    358e:	89 85       	ldd	r24, Y+9	; 0x09
    3590:	9a 85       	ldd	r25, Y+10	; 0x0a
    3592:	20 e0       	ldi	r18, 0x00	; 0
    3594:	3f ef       	ldi	r19, 0xFF	; 255
    3596:	4f e7       	ldi	r20, 0x7F	; 127
    3598:	57 e4       	ldi	r21, 0x47	; 71
    359a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    359e:	18 16       	cp	r1, r24
    35a0:	4c f5       	brge	.+82     	; 0x35f4 <LCD_DisplayChar+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    35a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    35a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    35a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    35aa:	20 e0       	ldi	r18, 0x00	; 0
    35ac:	30 e0       	ldi	r19, 0x00	; 0
    35ae:	40 e2       	ldi	r20, 0x20	; 32
    35b0:	51 e4       	ldi	r21, 0x41	; 65
    35b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35b6:	dc 01       	movw	r26, r24
    35b8:	cb 01       	movw	r24, r22
    35ba:	bc 01       	movw	r22, r24
    35bc:	cd 01       	movw	r24, r26
    35be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35c2:	dc 01       	movw	r26, r24
    35c4:	cb 01       	movw	r24, r22
    35c6:	9e 83       	std	Y+6, r25	; 0x06
    35c8:	8d 83       	std	Y+5, r24	; 0x05
    35ca:	0f c0       	rjmp	.+30     	; 0x35ea <LCD_DisplayChar+0x8ac>
    35cc:	88 ec       	ldi	r24, 0xC8	; 200
    35ce:	90 e0       	ldi	r25, 0x00	; 0
    35d0:	9c 83       	std	Y+4, r25	; 0x04
    35d2:	8b 83       	std	Y+3, r24	; 0x03
    35d4:	8b 81       	ldd	r24, Y+3	; 0x03
    35d6:	9c 81       	ldd	r25, Y+4	; 0x04
    35d8:	01 97       	sbiw	r24, 0x01	; 1
    35da:	f1 f7       	brne	.-4      	; 0x35d8 <LCD_DisplayChar+0x89a>
    35dc:	9c 83       	std	Y+4, r25	; 0x04
    35de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35e0:	8d 81       	ldd	r24, Y+5	; 0x05
    35e2:	9e 81       	ldd	r25, Y+6	; 0x06
    35e4:	01 97       	sbiw	r24, 0x01	; 1
    35e6:	9e 83       	std	Y+6, r25	; 0x06
    35e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35ea:	8d 81       	ldd	r24, Y+5	; 0x05
    35ec:	9e 81       	ldd	r25, Y+6	; 0x06
    35ee:	00 97       	sbiw	r24, 0x00	; 0
    35f0:	69 f7       	brne	.-38     	; 0x35cc <LCD_DisplayChar+0x88e>
    35f2:	14 c0       	rjmp	.+40     	; 0x361c <LCD_DisplayChar+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35f4:	6f 81       	ldd	r22, Y+7	; 0x07
    35f6:	78 85       	ldd	r23, Y+8	; 0x08
    35f8:	89 85       	ldd	r24, Y+9	; 0x09
    35fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    35fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3600:	dc 01       	movw	r26, r24
    3602:	cb 01       	movw	r24, r22
    3604:	9e 83       	std	Y+6, r25	; 0x06
    3606:	8d 83       	std	Y+5, r24	; 0x05
    3608:	8d 81       	ldd	r24, Y+5	; 0x05
    360a:	9e 81       	ldd	r25, Y+6	; 0x06
    360c:	9a 83       	std	Y+2, r25	; 0x02
    360e:	89 83       	std	Y+1, r24	; 0x01
    3610:	89 81       	ldd	r24, Y+1	; 0x01
    3612:	9a 81       	ldd	r25, Y+2	; 0x02
    3614:	01 97       	sbiw	r24, 0x01	; 1
    3616:	f1 f7       	brne	.-4      	; 0x3614 <LCD_DisplayChar+0x8d6>
    3618:	9a 83       	std	Y+2, r25	; 0x02
    361a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

#endif
}
    361c:	cd 59       	subi	r28, 0x9D	; 157
    361e:	df 4f       	sbci	r29, 0xFF	; 255
    3620:	0f b6       	in	r0, 0x3f	; 63
    3622:	f8 94       	cli
    3624:	de bf       	out	0x3e, r29	; 62
    3626:	0f be       	out	0x3f, r0	; 63
    3628:	cd bf       	out	0x3d, r28	; 61
    362a:	cf 91       	pop	r28
    362c:	df 91       	pop	r29
    362e:	1f 91       	pop	r17
    3630:	0f 91       	pop	r16
    3632:	08 95       	ret

00003634 <LCD_DisplayString>:

/*DISPLAY*/

void LCD_DisplayString(const char *Str)
{
    3634:	df 93       	push	r29
    3636:	cf 93       	push	r28
    3638:	00 d0       	rcall	.+0      	; 0x363a <LCD_DisplayString+0x6>
    363a:	0f 92       	push	r0
    363c:	cd b7       	in	r28, 0x3d	; 61
    363e:	de b7       	in	r29, 0x3e	; 62
    3640:	9b 83       	std	Y+3, r25	; 0x03
    3642:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3644:	19 82       	std	Y+1, r1	; 0x01
    3646:	0e c0       	rjmp	.+28     	; 0x3664 <LCD_DisplayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_DisplayChar(Str[i]);
    3648:	89 81       	ldd	r24, Y+1	; 0x01
    364a:	28 2f       	mov	r18, r24
    364c:	30 e0       	ldi	r19, 0x00	; 0
    364e:	8a 81       	ldd	r24, Y+2	; 0x02
    3650:	9b 81       	ldd	r25, Y+3	; 0x03
    3652:	fc 01       	movw	r30, r24
    3654:	e2 0f       	add	r30, r18
    3656:	f3 1f       	adc	r31, r19
    3658:	80 81       	ld	r24, Z
    365a:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <LCD_DisplayChar>
		i++;
    365e:	89 81       	ldd	r24, Y+1	; 0x01
    3660:	8f 5f       	subi	r24, 0xFF	; 255
    3662:	89 83       	std	Y+1, r24	; 0x01
/*DISPLAY*/

void LCD_DisplayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3664:	89 81       	ldd	r24, Y+1	; 0x01
    3666:	28 2f       	mov	r18, r24
    3668:	30 e0       	ldi	r19, 0x00	; 0
    366a:	8a 81       	ldd	r24, Y+2	; 0x02
    366c:	9b 81       	ldd	r25, Y+3	; 0x03
    366e:	fc 01       	movw	r30, r24
    3670:	e2 0f       	add	r30, r18
    3672:	f3 1f       	adc	r31, r19
    3674:	80 81       	ld	r24, Z
    3676:	88 23       	and	r24, r24
    3678:	39 f7       	brne	.-50     	; 0x3648 <LCD_DisplayString+0x14>
	{
		LCD_DisplayChar(Str[i]);
		i++;
	}
}
    367a:	0f 90       	pop	r0
    367c:	0f 90       	pop	r0
    367e:	0f 90       	pop	r0
    3680:	cf 91       	pop	r28
    3682:	df 91       	pop	r29
    3684:	08 95       	ret

00003686 <LCD_moveCursor>:

/*WRITE IN IN SPECIFIC ROW*/

void LCD_moveCursor(uint8 row,uint8 col)
{
    3686:	df 93       	push	r29
    3688:	cf 93       	push	r28
    368a:	00 d0       	rcall	.+0      	; 0x368c <LCD_moveCursor+0x6>
    368c:	00 d0       	rcall	.+0      	; 0x368e <LCD_moveCursor+0x8>
    368e:	0f 92       	push	r0
    3690:	cd b7       	in	r28, 0x3d	; 61
    3692:	de b7       	in	r29, 0x3e	; 62
    3694:	8a 83       	std	Y+2, r24	; 0x02
    3696:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	switch(row)
    3698:	8a 81       	ldd	r24, Y+2	; 0x02
    369a:	28 2f       	mov	r18, r24
    369c:	30 e0       	ldi	r19, 0x00	; 0
    369e:	3d 83       	std	Y+5, r19	; 0x05
    36a0:	2c 83       	std	Y+4, r18	; 0x04
    36a2:	8c 81       	ldd	r24, Y+4	; 0x04
    36a4:	9d 81       	ldd	r25, Y+5	; 0x05
    36a6:	81 30       	cpi	r24, 0x01	; 1
    36a8:	91 05       	cpc	r25, r1
    36aa:	c1 f0       	breq	.+48     	; 0x36dc <LCD_moveCursor+0x56>
    36ac:	2c 81       	ldd	r18, Y+4	; 0x04
    36ae:	3d 81       	ldd	r19, Y+5	; 0x05
    36b0:	22 30       	cpi	r18, 0x02	; 2
    36b2:	31 05       	cpc	r19, r1
    36b4:	2c f4       	brge	.+10     	; 0x36c0 <LCD_moveCursor+0x3a>
    36b6:	8c 81       	ldd	r24, Y+4	; 0x04
    36b8:	9d 81       	ldd	r25, Y+5	; 0x05
    36ba:	00 97       	sbiw	r24, 0x00	; 0
    36bc:	61 f0       	breq	.+24     	; 0x36d6 <LCD_moveCursor+0x50>
    36be:	19 c0       	rjmp	.+50     	; 0x36f2 <LCD_moveCursor+0x6c>
    36c0:	2c 81       	ldd	r18, Y+4	; 0x04
    36c2:	3d 81       	ldd	r19, Y+5	; 0x05
    36c4:	22 30       	cpi	r18, 0x02	; 2
    36c6:	31 05       	cpc	r19, r1
    36c8:	69 f0       	breq	.+26     	; 0x36e4 <LCD_moveCursor+0x5e>
    36ca:	8c 81       	ldd	r24, Y+4	; 0x04
    36cc:	9d 81       	ldd	r25, Y+5	; 0x05
    36ce:	83 30       	cpi	r24, 0x03	; 3
    36d0:	91 05       	cpc	r25, r1
    36d2:	61 f0       	breq	.+24     	; 0x36ec <LCD_moveCursor+0x66>
    36d4:	0e c0       	rjmp	.+28     	; 0x36f2 <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address = col;
    36d6:	8b 81       	ldd	r24, Y+3	; 0x03
    36d8:	89 83       	std	Y+1, r24	; 0x01
    36da:	0b c0       	rjmp	.+22     	; 0x36f2 <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address = col+0x40;
    36dc:	8b 81       	ldd	r24, Y+3	; 0x03
    36de:	80 5c       	subi	r24, 0xC0	; 192
    36e0:	89 83       	std	Y+1, r24	; 0x01
    36e2:	07 c0       	rjmp	.+14     	; 0x36f2 <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address = col+0x10;
    36e4:	8b 81       	ldd	r24, Y+3	; 0x03
    36e6:	80 5f       	subi	r24, 0xF0	; 240
    36e8:	89 83       	std	Y+1, r24	; 0x01
    36ea:	03 c0       	rjmp	.+6      	; 0x36f2 <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address = col+0x50;
    36ec:	8b 81       	ldd	r24, Y+3	; 0x03
    36ee:	80 5b       	subi	r24, 0xB0	; 176
    36f0:	89 83       	std	Y+1, r24	; 0x01
		break;

	}
	LCD_SendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    36f2:	89 81       	ldd	r24, Y+1	; 0x01
    36f4:	80 68       	ori	r24, 0x80	; 128
    36f6:	0e 94 24 12 	call	0x2448	; 0x2448 <LCD_SendCommand>
}
    36fa:	0f 90       	pop	r0
    36fc:	0f 90       	pop	r0
    36fe:	0f 90       	pop	r0
    3700:	0f 90       	pop	r0
    3702:	0f 90       	pop	r0
    3704:	cf 91       	pop	r28
    3706:	df 91       	pop	r29
    3708:	08 95       	ret

0000370a <LCD_displayStringRowColumn>:

/*DISPLAY IN SPECIFIC ROW*/

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    370a:	df 93       	push	r29
    370c:	cf 93       	push	r28
    370e:	00 d0       	rcall	.+0      	; 0x3710 <LCD_displayStringRowColumn+0x6>
    3710:	00 d0       	rcall	.+0      	; 0x3712 <LCD_displayStringRowColumn+0x8>
    3712:	cd b7       	in	r28, 0x3d	; 61
    3714:	de b7       	in	r29, 0x3e	; 62
    3716:	89 83       	std	Y+1, r24	; 0x01
    3718:	6a 83       	std	Y+2, r22	; 0x02
    371a:	5c 83       	std	Y+4, r21	; 0x04
    371c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col);
    371e:	89 81       	ldd	r24, Y+1	; 0x01
    3720:	6a 81       	ldd	r22, Y+2	; 0x02
    3722:	0e 94 43 1b 	call	0x3686	; 0x3686 <LCD_moveCursor>
	LCD_DisplayString(Str);
    3726:	8b 81       	ldd	r24, Y+3	; 0x03
    3728:	9c 81       	ldd	r25, Y+4	; 0x04
    372a:	0e 94 1a 1b 	call	0x3634	; 0x3634 <LCD_DisplayString>
}
    372e:	0f 90       	pop	r0
    3730:	0f 90       	pop	r0
    3732:	0f 90       	pop	r0
    3734:	0f 90       	pop	r0
    3736:	cf 91       	pop	r28
    3738:	df 91       	pop	r29
    373a:	08 95       	ret

0000373c <LCD_intgerToString>:

/*NUMBERS*/

void LCD_intgerToString(int data)
{
    373c:	df 93       	push	r29
    373e:	cf 93       	push	r28
    3740:	cd b7       	in	r28, 0x3d	; 61
    3742:	de b7       	in	r29, 0x3e	; 62
    3744:	62 97       	sbiw	r28, 0x12	; 18
    3746:	0f b6       	in	r0, 0x3f	; 63
    3748:	f8 94       	cli
    374a:	de bf       	out	0x3e, r29	; 62
    374c:	0f be       	out	0x3f, r0	; 63
    374e:	cd bf       	out	0x3d, r28	; 61
    3750:	9a 8b       	std	Y+18, r25	; 0x12
    3752:	89 8b       	std	Y+17, r24	; 0x11
	char str[16];
	itoa(data,str,10); /* 10 for decimal */
    3754:	89 89       	ldd	r24, Y+17	; 0x11
    3756:	9a 89       	ldd	r25, Y+18	; 0x12
    3758:	9e 01       	movw	r18, r28
    375a:	2f 5f       	subi	r18, 0xFF	; 255
    375c:	3f 4f       	sbci	r19, 0xFF	; 255
    375e:	b9 01       	movw	r22, r18
    3760:	4a e0       	ldi	r20, 0x0A	; 10
    3762:	50 e0       	ldi	r21, 0x00	; 0
    3764:	0e 94 f0 25 	call	0x4be0	; 0x4be0 <itoa>
	LCD_DisplayString(str);
    3768:	ce 01       	movw	r24, r28
    376a:	01 96       	adiw	r24, 0x01	; 1
    376c:	0e 94 1a 1b 	call	0x3634	; 0x3634 <LCD_DisplayString>
}
    3770:	62 96       	adiw	r28, 0x12	; 18
    3772:	0f b6       	in	r0, 0x3f	; 63
    3774:	f8 94       	cli
    3776:	de bf       	out	0x3e, r29	; 62
    3778:	0f be       	out	0x3f, r0	; 63
    377a:	cd bf       	out	0x3d, r28	; 61
    377c:	cf 91       	pop	r28
    377e:	df 91       	pop	r29
    3780:	08 95       	ret

00003782 <LCD_clearScreen>:

/*CLEAR*/

void LCD_clearScreen(void)
{
    3782:	df 93       	push	r29
    3784:	cf 93       	push	r28
    3786:	cd b7       	in	r28, 0x3d	; 61
    3788:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCommand(LCD_CLEAR_COMMAND); /* CLEAR COMMAND */
    378a:	81 e0       	ldi	r24, 0x01	; 1
    378c:	0e 94 24 12 	call	0x2448	; 0x2448 <LCD_SendCommand>
}
    3790:	cf 91       	pop	r28
    3792:	df 91       	pop	r29
    3794:	08 95       	ret

00003796 <EEPROM_writeByte>:

#include "external_eeprom.h"
#include "../../MCAL/I2C/twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    3796:	df 93       	push	r29
    3798:	cf 93       	push	r28
    379a:	00 d0       	rcall	.+0      	; 0x379c <EEPROM_writeByte+0x6>
    379c:	00 d0       	rcall	.+0      	; 0x379e <EEPROM_writeByte+0x8>
    379e:	cd b7       	in	r28, 0x3d	; 61
    37a0:	de b7       	in	r29, 0x3e	; 62
    37a2:	9a 83       	std	Y+2, r25	; 0x02
    37a4:	89 83       	std	Y+1, r24	; 0x01
    37a6:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    37a8:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <TWI_start>
    if (TWI_getStatus() != TWI_START)
    37ac:	0e 94 a3 0b 	call	0x1746	; 0x1746 <TWI_getStatus>
    37b0:	88 30       	cpi	r24, 0x08	; 8
    37b2:	11 f0       	breq	.+4      	; 0x37b8 <EEPROM_writeByte+0x22>
        return ERROR;
    37b4:	1c 82       	std	Y+4, r1	; 0x04
    37b6:	28 c0       	rjmp	.+80     	; 0x3808 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    37b8:	89 81       	ldd	r24, Y+1	; 0x01
    37ba:	9a 81       	ldd	r25, Y+2	; 0x02
    37bc:	80 70       	andi	r24, 0x00	; 0
    37be:	97 70       	andi	r25, 0x07	; 7
    37c0:	88 0f       	add	r24, r24
    37c2:	89 2f       	mov	r24, r25
    37c4:	88 1f       	adc	r24, r24
    37c6:	99 0b       	sbc	r25, r25
    37c8:	91 95       	neg	r25
    37ca:	80 6a       	ori	r24, 0xA0	; 160
    37cc:	0e 94 66 0b 	call	0x16cc	; 0x16cc <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    37d0:	0e 94 a3 0b 	call	0x1746	; 0x1746 <TWI_getStatus>
    37d4:	88 31       	cpi	r24, 0x18	; 24
    37d6:	11 f0       	breq	.+4      	; 0x37dc <EEPROM_writeByte+0x46>
        return ERROR; 
    37d8:	1c 82       	std	Y+4, r1	; 0x04
    37da:	16 c0       	rjmp	.+44     	; 0x3808 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    37dc:	89 81       	ldd	r24, Y+1	; 0x01
    37de:	0e 94 66 0b 	call	0x16cc	; 0x16cc <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    37e2:	0e 94 a3 0b 	call	0x1746	; 0x1746 <TWI_getStatus>
    37e6:	88 32       	cpi	r24, 0x28	; 40
    37e8:	11 f0       	breq	.+4      	; 0x37ee <EEPROM_writeByte+0x58>
        return ERROR;
    37ea:	1c 82       	std	Y+4, r1	; 0x04
    37ec:	0d c0       	rjmp	.+26     	; 0x3808 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    37ee:	8b 81       	ldd	r24, Y+3	; 0x03
    37f0:	0e 94 66 0b 	call	0x16cc	; 0x16cc <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    37f4:	0e 94 a3 0b 	call	0x1746	; 0x1746 <TWI_getStatus>
    37f8:	88 32       	cpi	r24, 0x28	; 40
    37fa:	11 f0       	breq	.+4      	; 0x3800 <EEPROM_writeByte+0x6a>
        return ERROR;
    37fc:	1c 82       	std	Y+4, r1	; 0x04
    37fe:	04 c0       	rjmp	.+8      	; 0x3808 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    3800:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <TWI_stop>
	
    return SUCCESS;
    3804:	81 e0       	ldi	r24, 0x01	; 1
    3806:	8c 83       	std	Y+4, r24	; 0x04
    3808:	8c 81       	ldd	r24, Y+4	; 0x04
}
    380a:	0f 90       	pop	r0
    380c:	0f 90       	pop	r0
    380e:	0f 90       	pop	r0
    3810:	0f 90       	pop	r0
    3812:	cf 91       	pop	r28
    3814:	df 91       	pop	r29
    3816:	08 95       	ret

00003818 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    3818:	df 93       	push	r29
    381a:	cf 93       	push	r28
    381c:	00 d0       	rcall	.+0      	; 0x381e <EEPROM_readByte+0x6>
    381e:	00 d0       	rcall	.+0      	; 0x3820 <EEPROM_readByte+0x8>
    3820:	0f 92       	push	r0
    3822:	cd b7       	in	r28, 0x3d	; 61
    3824:	de b7       	in	r29, 0x3e	; 62
    3826:	9a 83       	std	Y+2, r25	; 0x02
    3828:	89 83       	std	Y+1, r24	; 0x01
    382a:	7c 83       	std	Y+4, r23	; 0x04
    382c:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    382e:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <TWI_start>
    if (TWI_getStatus() != TWI_START)
    3832:	0e 94 a3 0b 	call	0x1746	; 0x1746 <TWI_getStatus>
    3836:	88 30       	cpi	r24, 0x08	; 8
    3838:	11 f0       	breq	.+4      	; 0x383e <EEPROM_readByte+0x26>
        return ERROR;
    383a:	1d 82       	std	Y+5, r1	; 0x05
    383c:	44 c0       	rjmp	.+136    	; 0x38c6 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    383e:	89 81       	ldd	r24, Y+1	; 0x01
    3840:	9a 81       	ldd	r25, Y+2	; 0x02
    3842:	80 70       	andi	r24, 0x00	; 0
    3844:	97 70       	andi	r25, 0x07	; 7
    3846:	88 0f       	add	r24, r24
    3848:	89 2f       	mov	r24, r25
    384a:	88 1f       	adc	r24, r24
    384c:	99 0b       	sbc	r25, r25
    384e:	91 95       	neg	r25
    3850:	80 6a       	ori	r24, 0xA0	; 160
    3852:	0e 94 66 0b 	call	0x16cc	; 0x16cc <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    3856:	0e 94 a3 0b 	call	0x1746	; 0x1746 <TWI_getStatus>
    385a:	88 31       	cpi	r24, 0x18	; 24
    385c:	11 f0       	breq	.+4      	; 0x3862 <EEPROM_readByte+0x4a>
        return ERROR;
    385e:	1d 82       	std	Y+5, r1	; 0x05
    3860:	32 c0       	rjmp	.+100    	; 0x38c6 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    3862:	89 81       	ldd	r24, Y+1	; 0x01
    3864:	0e 94 66 0b 	call	0x16cc	; 0x16cc <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    3868:	0e 94 a3 0b 	call	0x1746	; 0x1746 <TWI_getStatus>
    386c:	88 32       	cpi	r24, 0x28	; 40
    386e:	11 f0       	breq	.+4      	; 0x3874 <EEPROM_readByte+0x5c>
        return ERROR;
    3870:	1d 82       	std	Y+5, r1	; 0x05
    3872:	29 c0       	rjmp	.+82     	; 0x38c6 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    3874:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    3878:	0e 94 a3 0b 	call	0x1746	; 0x1746 <TWI_getStatus>
    387c:	80 31       	cpi	r24, 0x10	; 16
    387e:	11 f0       	breq	.+4      	; 0x3884 <EEPROM_readByte+0x6c>
        return ERROR;
    3880:	1d 82       	std	Y+5, r1	; 0x05
    3882:	21 c0       	rjmp	.+66     	; 0x38c6 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    3884:	89 81       	ldd	r24, Y+1	; 0x01
    3886:	9a 81       	ldd	r25, Y+2	; 0x02
    3888:	80 70       	andi	r24, 0x00	; 0
    388a:	97 70       	andi	r25, 0x07	; 7
    388c:	88 0f       	add	r24, r24
    388e:	89 2f       	mov	r24, r25
    3890:	88 1f       	adc	r24, r24
    3892:	99 0b       	sbc	r25, r25
    3894:	91 95       	neg	r25
    3896:	81 6a       	ori	r24, 0xA1	; 161
    3898:	0e 94 66 0b 	call	0x16cc	; 0x16cc <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    389c:	0e 94 a3 0b 	call	0x1746	; 0x1746 <TWI_getStatus>
    38a0:	80 34       	cpi	r24, 0x40	; 64
    38a2:	11 f0       	breq	.+4      	; 0x38a8 <EEPROM_readByte+0x90>
        return ERROR;
    38a4:	1d 82       	std	Y+5, r1	; 0x05
    38a6:	0f c0       	rjmp	.+30     	; 0x38c6 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    38a8:	0e 94 90 0b 	call	0x1720	; 0x1720 <TWI_readByteWithNACK>
    38ac:	eb 81       	ldd	r30, Y+3	; 0x03
    38ae:	fc 81       	ldd	r31, Y+4	; 0x04
    38b0:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    38b2:	0e 94 a3 0b 	call	0x1746	; 0x1746 <TWI_getStatus>
    38b6:	88 35       	cpi	r24, 0x58	; 88
    38b8:	11 f0       	breq	.+4      	; 0x38be <EEPROM_readByte+0xa6>
        return ERROR;
    38ba:	1d 82       	std	Y+5, r1	; 0x05
    38bc:	04 c0       	rjmp	.+8      	; 0x38c6 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    38be:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <TWI_stop>

    return SUCCESS;
    38c2:	81 e0       	ldi	r24, 0x01	; 1
    38c4:	8d 83       	std	Y+5, r24	; 0x05
    38c6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    38c8:	0f 90       	pop	r0
    38ca:	0f 90       	pop	r0
    38cc:	0f 90       	pop	r0
    38ce:	0f 90       	pop	r0
    38d0:	0f 90       	pop	r0
    38d2:	cf 91       	pop	r28
    38d4:	df 91       	pop	r29
    38d6:	08 95       	ret

000038d8 <Buzzer_init>:
 * Setup the direction for the buzzer pin as output pin through the
 * GPIO driver.Turn off the buzzer through the GPIO.
 *
 */
void Buzzer_init()
{
    38d8:	df 93       	push	r29
    38da:	cf 93       	push	r28
    38dc:	cd b7       	in	r28, 0x3d	; 61
    38de:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
    38e0:	81 e0       	ldi	r24, 0x01	; 1
    38e2:	60 e0       	ldi	r22, 0x00	; 0
    38e4:	41 e0       	ldi	r20, 0x01	; 1
    38e6:	0e 94 b2 0b 	call	0x1764	; 0x1764 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    38ea:	81 e0       	ldi	r24, 0x01	; 1
    38ec:	60 e0       	ldi	r22, 0x00	; 0
    38ee:	40 e0       	ldi	r20, 0x00	; 0
    38f0:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>
}
    38f4:	cf 91       	pop	r28
    38f6:	df 91       	pop	r29
    38f8:	08 95       	ret

000038fa <Buzzer_on>:
/*
 * Function to enable the Buzzer through the GPIO.
 */
void Buzzer_on(void)
{
    38fa:	df 93       	push	r29
    38fc:	cf 93       	push	r28
    38fe:	cd b7       	in	r28, 0x3d	; 61
    3900:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
    3902:	81 e0       	ldi	r24, 0x01	; 1
    3904:	60 e0       	ldi	r22, 0x00	; 0
    3906:	41 e0       	ldi	r20, 0x01	; 1
    3908:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>

}
    390c:	cf 91       	pop	r28
    390e:	df 91       	pop	r29
    3910:	08 95       	ret

00003912 <Buzzer_off>:
/*
 * Function to disable the Buzzer through the GPIO.
 */
void Buzzer_off(void)
{
    3912:	df 93       	push	r29
    3914:	cf 93       	push	r28
    3916:	cd b7       	in	r28, 0x3d	; 61
    3918:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    391a:	81 e0       	ldi	r24, 0x01	; 1
    391c:	60 e0       	ldi	r22, 0x00	; 0
    391e:	40 e0       	ldi	r20, 0x00	; 0
    3920:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_writePin>

}
    3924:	cf 91       	pop	r28
    3926:	df 91       	pop	r29
    3928:	08 95       	ret

0000392a <start>:
#include <avr/io.h>

uint8 Pass_Save[SIZE],Pass_Recieved[SIZE],Pass_EEPROM[SIZE];
uint8 temp=0,distance=101;

void start(void) {
    392a:	df 93       	push	r29
    392c:	cf 93       	push	r28
    392e:	cd b7       	in	r28, 0x3d	; 61
    3930:	de b7       	in	r29, 0x3e	; 62
    3932:	2e 97       	sbiw	r28, 0x0e	; 14
    3934:	0f b6       	in	r0, 0x3f	; 63
    3936:	f8 94       	cli
    3938:	de bf       	out	0x3e, r29	; 62
    393a:	0f be       	out	0x3f, r0	; 63
    393c:	cd bf       	out	0x3d, r28	; 61
	UART_Config UARTconfig= { DISABLED, ONE, EIGHT, 9600 };
    393e:	ce 01       	movw	r24, r28
    3940:	01 96       	adiw	r24, 0x01	; 1
    3942:	9b 87       	std	Y+11, r25	; 0x0b
    3944:	8a 87       	std	Y+10, r24	; 0x0a
    3946:	e3 e7       	ldi	r30, 0x73	; 115
    3948:	f1 e0       	ldi	r31, 0x01	; 1
    394a:	fd 87       	std	Y+13, r31	; 0x0d
    394c:	ec 87       	std	Y+12, r30	; 0x0c
    394e:	f7 e0       	ldi	r31, 0x07	; 7
    3950:	fe 87       	std	Y+14, r31	; 0x0e
    3952:	ec 85       	ldd	r30, Y+12	; 0x0c
    3954:	fd 85       	ldd	r31, Y+13	; 0x0d
    3956:	00 80       	ld	r0, Z
    3958:	8c 85       	ldd	r24, Y+12	; 0x0c
    395a:	9d 85       	ldd	r25, Y+13	; 0x0d
    395c:	01 96       	adiw	r24, 0x01	; 1
    395e:	9d 87       	std	Y+13, r25	; 0x0d
    3960:	8c 87       	std	Y+12, r24	; 0x0c
    3962:	ea 85       	ldd	r30, Y+10	; 0x0a
    3964:	fb 85       	ldd	r31, Y+11	; 0x0b
    3966:	00 82       	st	Z, r0
    3968:	8a 85       	ldd	r24, Y+10	; 0x0a
    396a:	9b 85       	ldd	r25, Y+11	; 0x0b
    396c:	01 96       	adiw	r24, 0x01	; 1
    396e:	9b 87       	std	Y+11, r25	; 0x0b
    3970:	8a 87       	std	Y+10, r24	; 0x0a
    3972:	9e 85       	ldd	r25, Y+14	; 0x0e
    3974:	91 50       	subi	r25, 0x01	; 1
    3976:	9e 87       	std	Y+14, r25	; 0x0e
    3978:	ee 85       	ldd	r30, Y+14	; 0x0e
    397a:	ee 23       	and	r30, r30
    397c:	51 f7       	brne	.-44     	; 0x3952 <start+0x28>
	UART_init(&UARTconfig);
    397e:	ce 01       	movw	r24, r28
    3980:	01 96       	adiw	r24, 0x01	; 1
    3982:	0e 94 17 07 	call	0xe2e	; 0xe2e <UART_init>
	DcMotor_Init();
    3986:	0e 94 df 10 	call	0x21be	; 0x21be <DcMotor_Init>
	LCD_init();
    398a:	0e 94 72 11 	call	0x22e4	; 0x22e4 <LCD_init>
	AC_DcMotor_Init();
    398e:	0e 94 8c 10 	call	0x2118	; 0x2118 <AC_DcMotor_Init>
	ADC_ConfigType config = {F_CPU8,INTERNAL  };
    3992:	86 e0       	ldi	r24, 0x06	; 6
    3994:	88 87       	std	Y+8, r24	; 0x08
    3996:	80 ec       	ldi	r24, 0xC0	; 192
    3998:	89 87       	std	Y+9, r24	; 0x09
	ADC_init (&config);
    399a:	ce 01       	movw	r24, r28
    399c:	08 96       	adiw	r24, 0x08	; 8
    399e:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <ADC_init>
	Buzzer_init();
    39a2:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <Buzzer_init>
	Ultrasonic_init();
    39a6:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <Ultrasonic_init>
}
    39aa:	2e 96       	adiw	r28, 0x0e	; 14
    39ac:	0f b6       	in	r0, 0x3f	; 63
    39ae:	f8 94       	cli
    39b0:	de bf       	out	0x3e, r29	; 62
    39b2:	0f be       	out	0x3f, r0	; 63
    39b4:	cd bf       	out	0x3d, r28	; 61
    39b6:	cf 91       	pop	r28
    39b8:	df 91       	pop	r29
    39ba:	08 95       	ret

000039bc <receive_pass>:

void receive_pass(void) {
    39bc:	0f 93       	push	r16
    39be:	1f 93       	push	r17
    39c0:	df 93       	push	r29
    39c2:	cf 93       	push	r28
    39c4:	cd b7       	in	r28, 0x3d	; 61
    39c6:	de b7       	in	r29, 0x3e	; 62
    39c8:	6d 97       	sbiw	r28, 0x1d	; 29
    39ca:	0f b6       	in	r0, 0x3f	; 63
    39cc:	f8 94       	cli
    39ce:	de bf       	out	0x3e, r29	; 62
    39d0:	0f be       	out	0x3f, r0	; 63
    39d2:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	for (i = 0; i < SIZE; i++) {
    39d4:	1d 8e       	std	Y+29, r1	; 0x1d
    39d6:	7e c0       	rjmp	.+252    	; 0x3ad4 <receive_pass+0x118>
		Pass_Save[i] = UART_recieveByte();
    39d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    39da:	08 2f       	mov	r16, r24
    39dc:	10 e0       	ldi	r17, 0x00	; 0
    39de:	0e 94 be 07 	call	0xf7c	; 0xf7c <UART_recieveByte>
    39e2:	f8 01       	movw	r30, r16
    39e4:	e4 57       	subi	r30, 0x74	; 116
    39e6:	fe 4f       	sbci	r31, 0xFE	; 254
    39e8:	80 83       	st	Z, r24
    39ea:	80 e0       	ldi	r24, 0x00	; 0
    39ec:	90 e0       	ldi	r25, 0x00	; 0
    39ee:	a0 e2       	ldi	r26, 0x20	; 32
    39f0:	b1 e4       	ldi	r27, 0x41	; 65
    39f2:	89 8f       	std	Y+25, r24	; 0x19
    39f4:	9a 8f       	std	Y+26, r25	; 0x1a
    39f6:	ab 8f       	std	Y+27, r26	; 0x1b
    39f8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39fa:	69 8d       	ldd	r22, Y+25	; 0x19
    39fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a02:	20 e0       	ldi	r18, 0x00	; 0
    3a04:	30 e0       	ldi	r19, 0x00	; 0
    3a06:	4a ef       	ldi	r20, 0xFA	; 250
    3a08:	54 e4       	ldi	r21, 0x44	; 68
    3a0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a0e:	dc 01       	movw	r26, r24
    3a10:	cb 01       	movw	r24, r22
    3a12:	8d 8b       	std	Y+21, r24	; 0x15
    3a14:	9e 8b       	std	Y+22, r25	; 0x16
    3a16:	af 8b       	std	Y+23, r26	; 0x17
    3a18:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a1a:	6d 89       	ldd	r22, Y+21	; 0x15
    3a1c:	7e 89       	ldd	r23, Y+22	; 0x16
    3a1e:	8f 89       	ldd	r24, Y+23	; 0x17
    3a20:	98 8d       	ldd	r25, Y+24	; 0x18
    3a22:	20 e0       	ldi	r18, 0x00	; 0
    3a24:	30 e0       	ldi	r19, 0x00	; 0
    3a26:	40 e8       	ldi	r20, 0x80	; 128
    3a28:	5f e3       	ldi	r21, 0x3F	; 63
    3a2a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a2e:	88 23       	and	r24, r24
    3a30:	2c f4       	brge	.+10     	; 0x3a3c <receive_pass+0x80>
		__ticks = 1;
    3a32:	81 e0       	ldi	r24, 0x01	; 1
    3a34:	90 e0       	ldi	r25, 0x00	; 0
    3a36:	9c 8b       	std	Y+20, r25	; 0x14
    3a38:	8b 8b       	std	Y+19, r24	; 0x13
    3a3a:	3f c0       	rjmp	.+126    	; 0x3aba <receive_pass+0xfe>
	else if (__tmp > 65535)
    3a3c:	6d 89       	ldd	r22, Y+21	; 0x15
    3a3e:	7e 89       	ldd	r23, Y+22	; 0x16
    3a40:	8f 89       	ldd	r24, Y+23	; 0x17
    3a42:	98 8d       	ldd	r25, Y+24	; 0x18
    3a44:	20 e0       	ldi	r18, 0x00	; 0
    3a46:	3f ef       	ldi	r19, 0xFF	; 255
    3a48:	4f e7       	ldi	r20, 0x7F	; 127
    3a4a:	57 e4       	ldi	r21, 0x47	; 71
    3a4c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a50:	18 16       	cp	r1, r24
    3a52:	4c f5       	brge	.+82     	; 0x3aa6 <receive_pass+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a54:	69 8d       	ldd	r22, Y+25	; 0x19
    3a56:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a5c:	20 e0       	ldi	r18, 0x00	; 0
    3a5e:	30 e0       	ldi	r19, 0x00	; 0
    3a60:	40 e2       	ldi	r20, 0x20	; 32
    3a62:	51 e4       	ldi	r21, 0x41	; 65
    3a64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a68:	dc 01       	movw	r26, r24
    3a6a:	cb 01       	movw	r24, r22
    3a6c:	bc 01       	movw	r22, r24
    3a6e:	cd 01       	movw	r24, r26
    3a70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a74:	dc 01       	movw	r26, r24
    3a76:	cb 01       	movw	r24, r22
    3a78:	9c 8b       	std	Y+20, r25	; 0x14
    3a7a:	8b 8b       	std	Y+19, r24	; 0x13
    3a7c:	0f c0       	rjmp	.+30     	; 0x3a9c <receive_pass+0xe0>
    3a7e:	88 ec       	ldi	r24, 0xC8	; 200
    3a80:	90 e0       	ldi	r25, 0x00	; 0
    3a82:	9a 8b       	std	Y+18, r25	; 0x12
    3a84:	89 8b       	std	Y+17, r24	; 0x11
    3a86:	89 89       	ldd	r24, Y+17	; 0x11
    3a88:	9a 89       	ldd	r25, Y+18	; 0x12
    3a8a:	01 97       	sbiw	r24, 0x01	; 1
    3a8c:	f1 f7       	brne	.-4      	; 0x3a8a <receive_pass+0xce>
    3a8e:	9a 8b       	std	Y+18, r25	; 0x12
    3a90:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a92:	8b 89       	ldd	r24, Y+19	; 0x13
    3a94:	9c 89       	ldd	r25, Y+20	; 0x14
    3a96:	01 97       	sbiw	r24, 0x01	; 1
    3a98:	9c 8b       	std	Y+20, r25	; 0x14
    3a9a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a9c:	8b 89       	ldd	r24, Y+19	; 0x13
    3a9e:	9c 89       	ldd	r25, Y+20	; 0x14
    3aa0:	00 97       	sbiw	r24, 0x00	; 0
    3aa2:	69 f7       	brne	.-38     	; 0x3a7e <receive_pass+0xc2>
    3aa4:	14 c0       	rjmp	.+40     	; 0x3ace <receive_pass+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3aa6:	6d 89       	ldd	r22, Y+21	; 0x15
    3aa8:	7e 89       	ldd	r23, Y+22	; 0x16
    3aaa:	8f 89       	ldd	r24, Y+23	; 0x17
    3aac:	98 8d       	ldd	r25, Y+24	; 0x18
    3aae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ab2:	dc 01       	movw	r26, r24
    3ab4:	cb 01       	movw	r24, r22
    3ab6:	9c 8b       	std	Y+20, r25	; 0x14
    3ab8:	8b 8b       	std	Y+19, r24	; 0x13
    3aba:	8b 89       	ldd	r24, Y+19	; 0x13
    3abc:	9c 89       	ldd	r25, Y+20	; 0x14
    3abe:	98 8b       	std	Y+16, r25	; 0x10
    3ac0:	8f 87       	std	Y+15, r24	; 0x0f
    3ac2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ac4:	98 89       	ldd	r25, Y+16	; 0x10
    3ac6:	01 97       	sbiw	r24, 0x01	; 1
    3ac8:	f1 f7       	brne	.-4      	; 0x3ac6 <receive_pass+0x10a>
    3aca:	98 8b       	std	Y+16, r25	; 0x10
    3acc:	8f 87       	std	Y+15, r24	; 0x0f
	Ultrasonic_init();
}

void receive_pass(void) {
	uint8 i;
	for (i = 0; i < SIZE; i++) {
    3ace:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ad0:	8f 5f       	subi	r24, 0xFF	; 255
    3ad2:	8d 8f       	std	Y+29, r24	; 0x1d
    3ad4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ad6:	85 30       	cpi	r24, 0x05	; 5
    3ad8:	08 f4       	brcc	.+2      	; 0x3adc <receive_pass+0x120>
    3ada:	7e cf       	rjmp	.-260    	; 0x39d8 <receive_pass+0x1c>
		Pass_Save[i] = UART_recieveByte();
		_delay_ms(10);
	}
	for (i = 0; i < SIZE; i++) {
    3adc:	1d 8e       	std	Y+29, r1	; 0x1d
    3ade:	83 c0       	rjmp	.+262    	; 0x3be6 <receive_pass+0x22a>
		EEPROM_writeByte(i, Pass_Save[i]);
    3ae0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ae2:	48 2f       	mov	r20, r24
    3ae4:	50 e0       	ldi	r21, 0x00	; 0
    3ae6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ae8:	88 2f       	mov	r24, r24
    3aea:	90 e0       	ldi	r25, 0x00	; 0
    3aec:	fc 01       	movw	r30, r24
    3aee:	e4 57       	subi	r30, 0x74	; 116
    3af0:	fe 4f       	sbci	r31, 0xFE	; 254
    3af2:	20 81       	ld	r18, Z
    3af4:	ca 01       	movw	r24, r20
    3af6:	62 2f       	mov	r22, r18
    3af8:	0e 94 cb 1b 	call	0x3796	; 0x3796 <EEPROM_writeByte>
    3afc:	80 e0       	ldi	r24, 0x00	; 0
    3afe:	90 e0       	ldi	r25, 0x00	; 0
    3b00:	a0 e2       	ldi	r26, 0x20	; 32
    3b02:	b1 e4       	ldi	r27, 0x41	; 65
    3b04:	8b 87       	std	Y+11, r24	; 0x0b
    3b06:	9c 87       	std	Y+12, r25	; 0x0c
    3b08:	ad 87       	std	Y+13, r26	; 0x0d
    3b0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b10:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b12:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b14:	20 e0       	ldi	r18, 0x00	; 0
    3b16:	30 e0       	ldi	r19, 0x00	; 0
    3b18:	4a ef       	ldi	r20, 0xFA	; 250
    3b1a:	54 e4       	ldi	r21, 0x44	; 68
    3b1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b20:	dc 01       	movw	r26, r24
    3b22:	cb 01       	movw	r24, r22
    3b24:	8f 83       	std	Y+7, r24	; 0x07
    3b26:	98 87       	std	Y+8, r25	; 0x08
    3b28:	a9 87       	std	Y+9, r26	; 0x09
    3b2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b2c:	6f 81       	ldd	r22, Y+7	; 0x07
    3b2e:	78 85       	ldd	r23, Y+8	; 0x08
    3b30:	89 85       	ldd	r24, Y+9	; 0x09
    3b32:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b34:	20 e0       	ldi	r18, 0x00	; 0
    3b36:	30 e0       	ldi	r19, 0x00	; 0
    3b38:	40 e8       	ldi	r20, 0x80	; 128
    3b3a:	5f e3       	ldi	r21, 0x3F	; 63
    3b3c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b40:	88 23       	and	r24, r24
    3b42:	2c f4       	brge	.+10     	; 0x3b4e <receive_pass+0x192>
		__ticks = 1;
    3b44:	81 e0       	ldi	r24, 0x01	; 1
    3b46:	90 e0       	ldi	r25, 0x00	; 0
    3b48:	9e 83       	std	Y+6, r25	; 0x06
    3b4a:	8d 83       	std	Y+5, r24	; 0x05
    3b4c:	3f c0       	rjmp	.+126    	; 0x3bcc <receive_pass+0x210>
	else if (__tmp > 65535)
    3b4e:	6f 81       	ldd	r22, Y+7	; 0x07
    3b50:	78 85       	ldd	r23, Y+8	; 0x08
    3b52:	89 85       	ldd	r24, Y+9	; 0x09
    3b54:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b56:	20 e0       	ldi	r18, 0x00	; 0
    3b58:	3f ef       	ldi	r19, 0xFF	; 255
    3b5a:	4f e7       	ldi	r20, 0x7F	; 127
    3b5c:	57 e4       	ldi	r21, 0x47	; 71
    3b5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b62:	18 16       	cp	r1, r24
    3b64:	4c f5       	brge	.+82     	; 0x3bb8 <receive_pass+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b66:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b68:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b6e:	20 e0       	ldi	r18, 0x00	; 0
    3b70:	30 e0       	ldi	r19, 0x00	; 0
    3b72:	40 e2       	ldi	r20, 0x20	; 32
    3b74:	51 e4       	ldi	r21, 0x41	; 65
    3b76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b7a:	dc 01       	movw	r26, r24
    3b7c:	cb 01       	movw	r24, r22
    3b7e:	bc 01       	movw	r22, r24
    3b80:	cd 01       	movw	r24, r26
    3b82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b86:	dc 01       	movw	r26, r24
    3b88:	cb 01       	movw	r24, r22
    3b8a:	9e 83       	std	Y+6, r25	; 0x06
    3b8c:	8d 83       	std	Y+5, r24	; 0x05
    3b8e:	0f c0       	rjmp	.+30     	; 0x3bae <receive_pass+0x1f2>
    3b90:	88 ec       	ldi	r24, 0xC8	; 200
    3b92:	90 e0       	ldi	r25, 0x00	; 0
    3b94:	9c 83       	std	Y+4, r25	; 0x04
    3b96:	8b 83       	std	Y+3, r24	; 0x03
    3b98:	8b 81       	ldd	r24, Y+3	; 0x03
    3b9a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b9c:	01 97       	sbiw	r24, 0x01	; 1
    3b9e:	f1 f7       	brne	.-4      	; 0x3b9c <receive_pass+0x1e0>
    3ba0:	9c 83       	std	Y+4, r25	; 0x04
    3ba2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ba4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ba6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ba8:	01 97       	sbiw	r24, 0x01	; 1
    3baa:	9e 83       	std	Y+6, r25	; 0x06
    3bac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bae:	8d 81       	ldd	r24, Y+5	; 0x05
    3bb0:	9e 81       	ldd	r25, Y+6	; 0x06
    3bb2:	00 97       	sbiw	r24, 0x00	; 0
    3bb4:	69 f7       	brne	.-38     	; 0x3b90 <receive_pass+0x1d4>
    3bb6:	14 c0       	rjmp	.+40     	; 0x3be0 <receive_pass+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bb8:	6f 81       	ldd	r22, Y+7	; 0x07
    3bba:	78 85       	ldd	r23, Y+8	; 0x08
    3bbc:	89 85       	ldd	r24, Y+9	; 0x09
    3bbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bc4:	dc 01       	movw	r26, r24
    3bc6:	cb 01       	movw	r24, r22
    3bc8:	9e 83       	std	Y+6, r25	; 0x06
    3bca:	8d 83       	std	Y+5, r24	; 0x05
    3bcc:	8d 81       	ldd	r24, Y+5	; 0x05
    3bce:	9e 81       	ldd	r25, Y+6	; 0x06
    3bd0:	9a 83       	std	Y+2, r25	; 0x02
    3bd2:	89 83       	std	Y+1, r24	; 0x01
    3bd4:	89 81       	ldd	r24, Y+1	; 0x01
    3bd6:	9a 81       	ldd	r25, Y+2	; 0x02
    3bd8:	01 97       	sbiw	r24, 0x01	; 1
    3bda:	f1 f7       	brne	.-4      	; 0x3bd8 <receive_pass+0x21c>
    3bdc:	9a 83       	std	Y+2, r25	; 0x02
    3bde:	89 83       	std	Y+1, r24	; 0x01
	uint8 i;
	for (i = 0; i < SIZE; i++) {
		Pass_Save[i] = UART_recieveByte();
		_delay_ms(10);
	}
	for (i = 0; i < SIZE; i++) {
    3be0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3be2:	8f 5f       	subi	r24, 0xFF	; 255
    3be4:	8d 8f       	std	Y+29, r24	; 0x1d
    3be6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3be8:	85 30       	cpi	r24, 0x05	; 5
    3bea:	08 f4       	brcc	.+2      	; 0x3bee <receive_pass+0x232>
    3bec:	79 cf       	rjmp	.-270    	; 0x3ae0 <receive_pass+0x124>
		EEPROM_writeByte(i, Pass_Save[i]);
		_delay_ms(10);
	}
}
    3bee:	6d 96       	adiw	r28, 0x1d	; 29
    3bf0:	0f b6       	in	r0, 0x3f	; 63
    3bf2:	f8 94       	cli
    3bf4:	de bf       	out	0x3e, r29	; 62
    3bf6:	0f be       	out	0x3f, r0	; 63
    3bf8:	cd bf       	out	0x3d, r28	; 61
    3bfa:	cf 91       	pop	r28
    3bfc:	df 91       	pop	r29
    3bfe:	1f 91       	pop	r17
    3c00:	0f 91       	pop	r16
    3c02:	08 95       	ret

00003c04 <check_pass>:

void check_pass(void) {
    3c04:	0f 93       	push	r16
    3c06:	1f 93       	push	r17
    3c08:	df 93       	push	r29
    3c0a:	cf 93       	push	r28
    3c0c:	cd b7       	in	r28, 0x3d	; 61
    3c0e:	de b7       	in	r29, 0x3e	; 62
    3c10:	6e 97       	sbiw	r28, 0x1e	; 30
    3c12:	0f b6       	in	r0, 0x3f	; 63
    3c14:	f8 94       	cli
    3c16:	de bf       	out	0x3e, r29	; 62
    3c18:	0f be       	out	0x3f, r0	; 63
    3c1a:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	uint8 check=0;
    3c1c:	1d 8e       	std	Y+29, r1	; 0x1d

	for (i = 0; i < SIZE; i++) {
    3c1e:	1e 8e       	std	Y+30, r1	; 0x1e
    3c20:	7e c0       	rjmp	.+252    	; 0x3d1e <check_pass+0x11a>
		Pass_Recieved[i] = UART_recieveByte();
    3c22:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3c24:	08 2f       	mov	r16, r24
    3c26:	10 e0       	ldi	r17, 0x00	; 0
    3c28:	0e 94 be 07 	call	0xf7c	; 0xf7c <UART_recieveByte>
    3c2c:	f8 01       	movw	r30, r16
    3c2e:	ef 56       	subi	r30, 0x6F	; 111
    3c30:	fe 4f       	sbci	r31, 0xFE	; 254
    3c32:	80 83       	st	Z, r24
    3c34:	80 e0       	ldi	r24, 0x00	; 0
    3c36:	90 e0       	ldi	r25, 0x00	; 0
    3c38:	a0 e2       	ldi	r26, 0x20	; 32
    3c3a:	b1 e4       	ldi	r27, 0x41	; 65
    3c3c:	89 8f       	std	Y+25, r24	; 0x19
    3c3e:	9a 8f       	std	Y+26, r25	; 0x1a
    3c40:	ab 8f       	std	Y+27, r26	; 0x1b
    3c42:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c44:	69 8d       	ldd	r22, Y+25	; 0x19
    3c46:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c4c:	20 e0       	ldi	r18, 0x00	; 0
    3c4e:	30 e0       	ldi	r19, 0x00	; 0
    3c50:	4a ef       	ldi	r20, 0xFA	; 250
    3c52:	54 e4       	ldi	r21, 0x44	; 68
    3c54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c58:	dc 01       	movw	r26, r24
    3c5a:	cb 01       	movw	r24, r22
    3c5c:	8d 8b       	std	Y+21, r24	; 0x15
    3c5e:	9e 8b       	std	Y+22, r25	; 0x16
    3c60:	af 8b       	std	Y+23, r26	; 0x17
    3c62:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3c64:	6d 89       	ldd	r22, Y+21	; 0x15
    3c66:	7e 89       	ldd	r23, Y+22	; 0x16
    3c68:	8f 89       	ldd	r24, Y+23	; 0x17
    3c6a:	98 8d       	ldd	r25, Y+24	; 0x18
    3c6c:	20 e0       	ldi	r18, 0x00	; 0
    3c6e:	30 e0       	ldi	r19, 0x00	; 0
    3c70:	40 e8       	ldi	r20, 0x80	; 128
    3c72:	5f e3       	ldi	r21, 0x3F	; 63
    3c74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c78:	88 23       	and	r24, r24
    3c7a:	2c f4       	brge	.+10     	; 0x3c86 <check_pass+0x82>
		__ticks = 1;
    3c7c:	81 e0       	ldi	r24, 0x01	; 1
    3c7e:	90 e0       	ldi	r25, 0x00	; 0
    3c80:	9c 8b       	std	Y+20, r25	; 0x14
    3c82:	8b 8b       	std	Y+19, r24	; 0x13
    3c84:	3f c0       	rjmp	.+126    	; 0x3d04 <check_pass+0x100>
	else if (__tmp > 65535)
    3c86:	6d 89       	ldd	r22, Y+21	; 0x15
    3c88:	7e 89       	ldd	r23, Y+22	; 0x16
    3c8a:	8f 89       	ldd	r24, Y+23	; 0x17
    3c8c:	98 8d       	ldd	r25, Y+24	; 0x18
    3c8e:	20 e0       	ldi	r18, 0x00	; 0
    3c90:	3f ef       	ldi	r19, 0xFF	; 255
    3c92:	4f e7       	ldi	r20, 0x7F	; 127
    3c94:	57 e4       	ldi	r21, 0x47	; 71
    3c96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c9a:	18 16       	cp	r1, r24
    3c9c:	4c f5       	brge	.+82     	; 0x3cf0 <check_pass+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c9e:	69 8d       	ldd	r22, Y+25	; 0x19
    3ca0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ca2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ca4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ca6:	20 e0       	ldi	r18, 0x00	; 0
    3ca8:	30 e0       	ldi	r19, 0x00	; 0
    3caa:	40 e2       	ldi	r20, 0x20	; 32
    3cac:	51 e4       	ldi	r21, 0x41	; 65
    3cae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cb2:	dc 01       	movw	r26, r24
    3cb4:	cb 01       	movw	r24, r22
    3cb6:	bc 01       	movw	r22, r24
    3cb8:	cd 01       	movw	r24, r26
    3cba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cbe:	dc 01       	movw	r26, r24
    3cc0:	cb 01       	movw	r24, r22
    3cc2:	9c 8b       	std	Y+20, r25	; 0x14
    3cc4:	8b 8b       	std	Y+19, r24	; 0x13
    3cc6:	0f c0       	rjmp	.+30     	; 0x3ce6 <check_pass+0xe2>
    3cc8:	88 ec       	ldi	r24, 0xC8	; 200
    3cca:	90 e0       	ldi	r25, 0x00	; 0
    3ccc:	9a 8b       	std	Y+18, r25	; 0x12
    3cce:	89 8b       	std	Y+17, r24	; 0x11
    3cd0:	89 89       	ldd	r24, Y+17	; 0x11
    3cd2:	9a 89       	ldd	r25, Y+18	; 0x12
    3cd4:	01 97       	sbiw	r24, 0x01	; 1
    3cd6:	f1 f7       	brne	.-4      	; 0x3cd4 <check_pass+0xd0>
    3cd8:	9a 8b       	std	Y+18, r25	; 0x12
    3cda:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cdc:	8b 89       	ldd	r24, Y+19	; 0x13
    3cde:	9c 89       	ldd	r25, Y+20	; 0x14
    3ce0:	01 97       	sbiw	r24, 0x01	; 1
    3ce2:	9c 8b       	std	Y+20, r25	; 0x14
    3ce4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ce6:	8b 89       	ldd	r24, Y+19	; 0x13
    3ce8:	9c 89       	ldd	r25, Y+20	; 0x14
    3cea:	00 97       	sbiw	r24, 0x00	; 0
    3cec:	69 f7       	brne	.-38     	; 0x3cc8 <check_pass+0xc4>
    3cee:	14 c0       	rjmp	.+40     	; 0x3d18 <check_pass+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cf0:	6d 89       	ldd	r22, Y+21	; 0x15
    3cf2:	7e 89       	ldd	r23, Y+22	; 0x16
    3cf4:	8f 89       	ldd	r24, Y+23	; 0x17
    3cf6:	98 8d       	ldd	r25, Y+24	; 0x18
    3cf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cfc:	dc 01       	movw	r26, r24
    3cfe:	cb 01       	movw	r24, r22
    3d00:	9c 8b       	std	Y+20, r25	; 0x14
    3d02:	8b 8b       	std	Y+19, r24	; 0x13
    3d04:	8b 89       	ldd	r24, Y+19	; 0x13
    3d06:	9c 89       	ldd	r25, Y+20	; 0x14
    3d08:	98 8b       	std	Y+16, r25	; 0x10
    3d0a:	8f 87       	std	Y+15, r24	; 0x0f
    3d0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d0e:	98 89       	ldd	r25, Y+16	; 0x10
    3d10:	01 97       	sbiw	r24, 0x01	; 1
    3d12:	f1 f7       	brne	.-4      	; 0x3d10 <check_pass+0x10c>
    3d14:	98 8b       	std	Y+16, r25	; 0x10
    3d16:	8f 87       	std	Y+15, r24	; 0x0f

void check_pass(void) {
	uint8 i;
	uint8 check=0;

	for (i = 0; i < SIZE; i++) {
    3d18:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3d1a:	8f 5f       	subi	r24, 0xFF	; 255
    3d1c:	8e 8f       	std	Y+30, r24	; 0x1e
    3d1e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3d20:	85 30       	cpi	r24, 0x05	; 5
    3d22:	08 f4       	brcc	.+2      	; 0x3d26 <check_pass+0x122>
    3d24:	7e cf       	rjmp	.-260    	; 0x3c22 <check_pass+0x1e>
		Pass_Recieved[i] = UART_recieveByte();
		_delay_ms(10);
	}
	for (i = 0; i < SIZE; i++) {
    3d26:	1e 8e       	std	Y+30, r1	; 0x1e
    3d28:	82 c0       	rjmp	.+260    	; 0x3e2e <check_pass+0x22a>
		EEPROM_readByte(i, &Pass_EEPROM[i]);
    3d2a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3d2c:	48 2f       	mov	r20, r24
    3d2e:	50 e0       	ldi	r21, 0x00	; 0
    3d30:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3d32:	88 2f       	mov	r24, r24
    3d34:	90 e0       	ldi	r25, 0x00	; 0
    3d36:	9c 01       	movw	r18, r24
    3d38:	29 57       	subi	r18, 0x79	; 121
    3d3a:	3e 4f       	sbci	r19, 0xFE	; 254
    3d3c:	ca 01       	movw	r24, r20
    3d3e:	b9 01       	movw	r22, r18
    3d40:	0e 94 0c 1c 	call	0x3818	; 0x3818 <EEPROM_readByte>
    3d44:	80 e0       	ldi	r24, 0x00	; 0
    3d46:	90 e0       	ldi	r25, 0x00	; 0
    3d48:	a0 e2       	ldi	r26, 0x20	; 32
    3d4a:	b1 e4       	ldi	r27, 0x41	; 65
    3d4c:	8b 87       	std	Y+11, r24	; 0x0b
    3d4e:	9c 87       	std	Y+12, r25	; 0x0c
    3d50:	ad 87       	std	Y+13, r26	; 0x0d
    3d52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d54:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d56:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d58:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d5c:	20 e0       	ldi	r18, 0x00	; 0
    3d5e:	30 e0       	ldi	r19, 0x00	; 0
    3d60:	4a ef       	ldi	r20, 0xFA	; 250
    3d62:	54 e4       	ldi	r21, 0x44	; 68
    3d64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d68:	dc 01       	movw	r26, r24
    3d6a:	cb 01       	movw	r24, r22
    3d6c:	8f 83       	std	Y+7, r24	; 0x07
    3d6e:	98 87       	std	Y+8, r25	; 0x08
    3d70:	a9 87       	std	Y+9, r26	; 0x09
    3d72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d74:	6f 81       	ldd	r22, Y+7	; 0x07
    3d76:	78 85       	ldd	r23, Y+8	; 0x08
    3d78:	89 85       	ldd	r24, Y+9	; 0x09
    3d7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d7c:	20 e0       	ldi	r18, 0x00	; 0
    3d7e:	30 e0       	ldi	r19, 0x00	; 0
    3d80:	40 e8       	ldi	r20, 0x80	; 128
    3d82:	5f e3       	ldi	r21, 0x3F	; 63
    3d84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d88:	88 23       	and	r24, r24
    3d8a:	2c f4       	brge	.+10     	; 0x3d96 <check_pass+0x192>
		__ticks = 1;
    3d8c:	81 e0       	ldi	r24, 0x01	; 1
    3d8e:	90 e0       	ldi	r25, 0x00	; 0
    3d90:	9e 83       	std	Y+6, r25	; 0x06
    3d92:	8d 83       	std	Y+5, r24	; 0x05
    3d94:	3f c0       	rjmp	.+126    	; 0x3e14 <check_pass+0x210>
	else if (__tmp > 65535)
    3d96:	6f 81       	ldd	r22, Y+7	; 0x07
    3d98:	78 85       	ldd	r23, Y+8	; 0x08
    3d9a:	89 85       	ldd	r24, Y+9	; 0x09
    3d9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d9e:	20 e0       	ldi	r18, 0x00	; 0
    3da0:	3f ef       	ldi	r19, 0xFF	; 255
    3da2:	4f e7       	ldi	r20, 0x7F	; 127
    3da4:	57 e4       	ldi	r21, 0x47	; 71
    3da6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3daa:	18 16       	cp	r1, r24
    3dac:	4c f5       	brge	.+82     	; 0x3e00 <check_pass+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dae:	6b 85       	ldd	r22, Y+11	; 0x0b
    3db0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3db2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3db4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3db6:	20 e0       	ldi	r18, 0x00	; 0
    3db8:	30 e0       	ldi	r19, 0x00	; 0
    3dba:	40 e2       	ldi	r20, 0x20	; 32
    3dbc:	51 e4       	ldi	r21, 0x41	; 65
    3dbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dc2:	dc 01       	movw	r26, r24
    3dc4:	cb 01       	movw	r24, r22
    3dc6:	bc 01       	movw	r22, r24
    3dc8:	cd 01       	movw	r24, r26
    3dca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dce:	dc 01       	movw	r26, r24
    3dd0:	cb 01       	movw	r24, r22
    3dd2:	9e 83       	std	Y+6, r25	; 0x06
    3dd4:	8d 83       	std	Y+5, r24	; 0x05
    3dd6:	0f c0       	rjmp	.+30     	; 0x3df6 <check_pass+0x1f2>
    3dd8:	88 ec       	ldi	r24, 0xC8	; 200
    3dda:	90 e0       	ldi	r25, 0x00	; 0
    3ddc:	9c 83       	std	Y+4, r25	; 0x04
    3dde:	8b 83       	std	Y+3, r24	; 0x03
    3de0:	8b 81       	ldd	r24, Y+3	; 0x03
    3de2:	9c 81       	ldd	r25, Y+4	; 0x04
    3de4:	01 97       	sbiw	r24, 0x01	; 1
    3de6:	f1 f7       	brne	.-4      	; 0x3de4 <check_pass+0x1e0>
    3de8:	9c 83       	std	Y+4, r25	; 0x04
    3dea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dec:	8d 81       	ldd	r24, Y+5	; 0x05
    3dee:	9e 81       	ldd	r25, Y+6	; 0x06
    3df0:	01 97       	sbiw	r24, 0x01	; 1
    3df2:	9e 83       	std	Y+6, r25	; 0x06
    3df4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3df6:	8d 81       	ldd	r24, Y+5	; 0x05
    3df8:	9e 81       	ldd	r25, Y+6	; 0x06
    3dfa:	00 97       	sbiw	r24, 0x00	; 0
    3dfc:	69 f7       	brne	.-38     	; 0x3dd8 <check_pass+0x1d4>
    3dfe:	14 c0       	rjmp	.+40     	; 0x3e28 <check_pass+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e00:	6f 81       	ldd	r22, Y+7	; 0x07
    3e02:	78 85       	ldd	r23, Y+8	; 0x08
    3e04:	89 85       	ldd	r24, Y+9	; 0x09
    3e06:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e0c:	dc 01       	movw	r26, r24
    3e0e:	cb 01       	movw	r24, r22
    3e10:	9e 83       	std	Y+6, r25	; 0x06
    3e12:	8d 83       	std	Y+5, r24	; 0x05
    3e14:	8d 81       	ldd	r24, Y+5	; 0x05
    3e16:	9e 81       	ldd	r25, Y+6	; 0x06
    3e18:	9a 83       	std	Y+2, r25	; 0x02
    3e1a:	89 83       	std	Y+1, r24	; 0x01
    3e1c:	89 81       	ldd	r24, Y+1	; 0x01
    3e1e:	9a 81       	ldd	r25, Y+2	; 0x02
    3e20:	01 97       	sbiw	r24, 0x01	; 1
    3e22:	f1 f7       	brne	.-4      	; 0x3e20 <check_pass+0x21c>
    3e24:	9a 83       	std	Y+2, r25	; 0x02
    3e26:	89 83       	std	Y+1, r24	; 0x01

	for (i = 0; i < SIZE; i++) {
		Pass_Recieved[i] = UART_recieveByte();
		_delay_ms(10);
	}
	for (i = 0; i < SIZE; i++) {
    3e28:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3e2a:	8f 5f       	subi	r24, 0xFF	; 255
    3e2c:	8e 8f       	std	Y+30, r24	; 0x1e
    3e2e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3e30:	85 30       	cpi	r24, 0x05	; 5
    3e32:	08 f4       	brcc	.+2      	; 0x3e36 <check_pass+0x232>
    3e34:	7a cf       	rjmp	.-268    	; 0x3d2a <check_pass+0x126>
		EEPROM_readByte(i, &Pass_EEPROM[i]);
		_delay_ms(10);
	}
	for (i = 0; i < SIZE; i++){
    3e36:	1e 8e       	std	Y+30, r1	; 0x1e
    3e38:	16 c0       	rjmp	.+44     	; 0x3e66 <check_pass+0x262>
		if (Pass_Recieved[i]==Pass_EEPROM[i]){
    3e3a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3e3c:	88 2f       	mov	r24, r24
    3e3e:	90 e0       	ldi	r25, 0x00	; 0
    3e40:	fc 01       	movw	r30, r24
    3e42:	ef 56       	subi	r30, 0x6F	; 111
    3e44:	fe 4f       	sbci	r31, 0xFE	; 254
    3e46:	20 81       	ld	r18, Z
    3e48:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3e4a:	88 2f       	mov	r24, r24
    3e4c:	90 e0       	ldi	r25, 0x00	; 0
    3e4e:	fc 01       	movw	r30, r24
    3e50:	e9 57       	subi	r30, 0x79	; 121
    3e52:	fe 4f       	sbci	r31, 0xFE	; 254
    3e54:	80 81       	ld	r24, Z
    3e56:	28 17       	cp	r18, r24
    3e58:	19 f4       	brne	.+6      	; 0x3e60 <check_pass+0x25c>
			check++;
    3e5a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3e5c:	8f 5f       	subi	r24, 0xFF	; 255
    3e5e:	8d 8f       	std	Y+29, r24	; 0x1d
	}
	for (i = 0; i < SIZE; i++) {
		EEPROM_readByte(i, &Pass_EEPROM[i]);
		_delay_ms(10);
	}
	for (i = 0; i < SIZE; i++){
    3e60:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3e62:	8f 5f       	subi	r24, 0xFF	; 255
    3e64:	8e 8f       	std	Y+30, r24	; 0x1e
    3e66:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3e68:	85 30       	cpi	r24, 0x05	; 5
    3e6a:	38 f3       	brcs	.-50     	; 0x3e3a <check_pass+0x236>
		if (Pass_Recieved[i]==Pass_EEPROM[i]){
			check++;
		}

	}
	if (check==5) {
    3e6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3e6e:	85 30       	cpi	r24, 0x05	; 5
    3e70:	21 f4       	brne	.+8      	; 0x3e7a <check_pass+0x276>
		UART_sendByte(CORRECT);
    3e72:	84 e0       	ldi	r24, 0x04	; 4
    3e74:	0e 94 a7 07 	call	0xf4e	; 0xf4e <UART_sendByte>
    3e78:	03 c0       	rjmp	.+6      	; 0x3e80 <check_pass+0x27c>

	}
	else {
		UART_sendByte(WRONG);
    3e7a:	86 e0       	ldi	r24, 0x06	; 6
    3e7c:	0e 94 a7 07 	call	0xf4e	; 0xf4e <UART_sendByte>
	}
	check=0;
    3e80:	1d 8e       	std	Y+29, r1	; 0x1d
}
    3e82:	6e 96       	adiw	r28, 0x1e	; 30
    3e84:	0f b6       	in	r0, 0x3f	; 63
    3e86:	f8 94       	cli
    3e88:	de bf       	out	0x3e, r29	; 62
    3e8a:	0f be       	out	0x3f, r0	; 63
    3e8c:	cd bf       	out	0x3d, r28	; 61
    3e8e:	cf 91       	pop	r28
    3e90:	df 91       	pop	r29
    3e92:	1f 91       	pop	r17
    3e94:	0f 91       	pop	r16
    3e96:	08 95       	ret

00003e98 <tempERA>:

void tempERA(void){
    3e98:	0f 93       	push	r16
    3e9a:	1f 93       	push	r17
    3e9c:	df 93       	push	r29
    3e9e:	cf 93       	push	r28
    3ea0:	cd b7       	in	r28, 0x3d	; 61
    3ea2:	de b7       	in	r29, 0x3e	; 62
    3ea4:	c1 57       	subi	r28, 0x71	; 113
    3ea6:	d0 40       	sbci	r29, 0x00	; 0
    3ea8:	0f b6       	in	r0, 0x3f	; 63
    3eaa:	f8 94       	cli
    3eac:	de bf       	out	0x3e, r29	; 62
    3eae:	0f be       	out	0x3f, r0	; 63
    3eb0:	cd bf       	out	0x3d, r28	; 61
    3eb2:	fe 01       	movw	r30, r28
    3eb4:	e3 59       	subi	r30, 0x93	; 147
    3eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb8:	80 e0       	ldi	r24, 0x00	; 0
    3eba:	90 e0       	ldi	r25, 0x00	; 0
    3ebc:	a8 ec       	ldi	r26, 0xC8	; 200
    3ebe:	b2 e4       	ldi	r27, 0x42	; 66
    3ec0:	80 83       	st	Z, r24
    3ec2:	91 83       	std	Z+1, r25	; 0x01
    3ec4:	a2 83       	std	Z+2, r26	; 0x02
    3ec6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ec8:	8e 01       	movw	r16, r28
    3eca:	07 59       	subi	r16, 0x97	; 151
    3ecc:	1f 4f       	sbci	r17, 0xFF	; 255
    3ece:	fe 01       	movw	r30, r28
    3ed0:	e3 59       	subi	r30, 0x93	; 147
    3ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed4:	60 81       	ld	r22, Z
    3ed6:	71 81       	ldd	r23, Z+1	; 0x01
    3ed8:	82 81       	ldd	r24, Z+2	; 0x02
    3eda:	93 81       	ldd	r25, Z+3	; 0x03
    3edc:	20 e0       	ldi	r18, 0x00	; 0
    3ede:	30 e0       	ldi	r19, 0x00	; 0
    3ee0:	4a ef       	ldi	r20, 0xFA	; 250
    3ee2:	54 e4       	ldi	r21, 0x44	; 68
    3ee4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ee8:	dc 01       	movw	r26, r24
    3eea:	cb 01       	movw	r24, r22
    3eec:	f8 01       	movw	r30, r16
    3eee:	80 83       	st	Z, r24
    3ef0:	91 83       	std	Z+1, r25	; 0x01
    3ef2:	a2 83       	std	Z+2, r26	; 0x02
    3ef4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ef6:	fe 01       	movw	r30, r28
    3ef8:	e7 59       	subi	r30, 0x97	; 151
    3efa:	ff 4f       	sbci	r31, 0xFF	; 255
    3efc:	60 81       	ld	r22, Z
    3efe:	71 81       	ldd	r23, Z+1	; 0x01
    3f00:	82 81       	ldd	r24, Z+2	; 0x02
    3f02:	93 81       	ldd	r25, Z+3	; 0x03
    3f04:	20 e0       	ldi	r18, 0x00	; 0
    3f06:	30 e0       	ldi	r19, 0x00	; 0
    3f08:	40 e8       	ldi	r20, 0x80	; 128
    3f0a:	5f e3       	ldi	r21, 0x3F	; 63
    3f0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f10:	88 23       	and	r24, r24
    3f12:	44 f4       	brge	.+16     	; 0x3f24 <tempERA+0x8c>
		__ticks = 1;
    3f14:	fe 01       	movw	r30, r28
    3f16:	e9 59       	subi	r30, 0x99	; 153
    3f18:	ff 4f       	sbci	r31, 0xFF	; 255
    3f1a:	81 e0       	ldi	r24, 0x01	; 1
    3f1c:	90 e0       	ldi	r25, 0x00	; 0
    3f1e:	91 83       	std	Z+1, r25	; 0x01
    3f20:	80 83       	st	Z, r24
    3f22:	64 c0       	rjmp	.+200    	; 0x3fec <tempERA+0x154>
	else if (__tmp > 65535)
    3f24:	fe 01       	movw	r30, r28
    3f26:	e7 59       	subi	r30, 0x97	; 151
    3f28:	ff 4f       	sbci	r31, 0xFF	; 255
    3f2a:	60 81       	ld	r22, Z
    3f2c:	71 81       	ldd	r23, Z+1	; 0x01
    3f2e:	82 81       	ldd	r24, Z+2	; 0x02
    3f30:	93 81       	ldd	r25, Z+3	; 0x03
    3f32:	20 e0       	ldi	r18, 0x00	; 0
    3f34:	3f ef       	ldi	r19, 0xFF	; 255
    3f36:	4f e7       	ldi	r20, 0x7F	; 127
    3f38:	57 e4       	ldi	r21, 0x47	; 71
    3f3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f3e:	18 16       	cp	r1, r24
    3f40:	0c f0       	brlt	.+2      	; 0x3f44 <tempERA+0xac>
    3f42:	43 c0       	rjmp	.+134    	; 0x3fca <tempERA+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f44:	fe 01       	movw	r30, r28
    3f46:	e3 59       	subi	r30, 0x93	; 147
    3f48:	ff 4f       	sbci	r31, 0xFF	; 255
    3f4a:	60 81       	ld	r22, Z
    3f4c:	71 81       	ldd	r23, Z+1	; 0x01
    3f4e:	82 81       	ldd	r24, Z+2	; 0x02
    3f50:	93 81       	ldd	r25, Z+3	; 0x03
    3f52:	20 e0       	ldi	r18, 0x00	; 0
    3f54:	30 e0       	ldi	r19, 0x00	; 0
    3f56:	40 e2       	ldi	r20, 0x20	; 32
    3f58:	51 e4       	ldi	r21, 0x41	; 65
    3f5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f5e:	dc 01       	movw	r26, r24
    3f60:	cb 01       	movw	r24, r22
    3f62:	8e 01       	movw	r16, r28
    3f64:	09 59       	subi	r16, 0x99	; 153
    3f66:	1f 4f       	sbci	r17, 0xFF	; 255
    3f68:	bc 01       	movw	r22, r24
    3f6a:	cd 01       	movw	r24, r26
    3f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f70:	dc 01       	movw	r26, r24
    3f72:	cb 01       	movw	r24, r22
    3f74:	f8 01       	movw	r30, r16
    3f76:	91 83       	std	Z+1, r25	; 0x01
    3f78:	80 83       	st	Z, r24
    3f7a:	1f c0       	rjmp	.+62     	; 0x3fba <tempERA+0x122>
    3f7c:	fe 01       	movw	r30, r28
    3f7e:	eb 59       	subi	r30, 0x9B	; 155
    3f80:	ff 4f       	sbci	r31, 0xFF	; 255
    3f82:	88 ec       	ldi	r24, 0xC8	; 200
    3f84:	90 e0       	ldi	r25, 0x00	; 0
    3f86:	91 83       	std	Z+1, r25	; 0x01
    3f88:	80 83       	st	Z, r24
    3f8a:	fe 01       	movw	r30, r28
    3f8c:	eb 59       	subi	r30, 0x9B	; 155
    3f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f90:	80 81       	ld	r24, Z
    3f92:	91 81       	ldd	r25, Z+1	; 0x01
    3f94:	01 97       	sbiw	r24, 0x01	; 1
    3f96:	f1 f7       	brne	.-4      	; 0x3f94 <tempERA+0xfc>
    3f98:	fe 01       	movw	r30, r28
    3f9a:	eb 59       	subi	r30, 0x9B	; 155
    3f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f9e:	91 83       	std	Z+1, r25	; 0x01
    3fa0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fa2:	de 01       	movw	r26, r28
    3fa4:	a9 59       	subi	r26, 0x99	; 153
    3fa6:	bf 4f       	sbci	r27, 0xFF	; 255
    3fa8:	fe 01       	movw	r30, r28
    3faa:	e9 59       	subi	r30, 0x99	; 153
    3fac:	ff 4f       	sbci	r31, 0xFF	; 255
    3fae:	80 81       	ld	r24, Z
    3fb0:	91 81       	ldd	r25, Z+1	; 0x01
    3fb2:	01 97       	sbiw	r24, 0x01	; 1
    3fb4:	11 96       	adiw	r26, 0x01	; 1
    3fb6:	9c 93       	st	X, r25
    3fb8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fba:	fe 01       	movw	r30, r28
    3fbc:	e9 59       	subi	r30, 0x99	; 153
    3fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc0:	80 81       	ld	r24, Z
    3fc2:	91 81       	ldd	r25, Z+1	; 0x01
    3fc4:	00 97       	sbiw	r24, 0x00	; 0
    3fc6:	d1 f6       	brne	.-76     	; 0x3f7c <tempERA+0xe4>
    3fc8:	27 c0       	rjmp	.+78     	; 0x4018 <tempERA+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fca:	8e 01       	movw	r16, r28
    3fcc:	09 59       	subi	r16, 0x99	; 153
    3fce:	1f 4f       	sbci	r17, 0xFF	; 255
    3fd0:	fe 01       	movw	r30, r28
    3fd2:	e7 59       	subi	r30, 0x97	; 151
    3fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd6:	60 81       	ld	r22, Z
    3fd8:	71 81       	ldd	r23, Z+1	; 0x01
    3fda:	82 81       	ldd	r24, Z+2	; 0x02
    3fdc:	93 81       	ldd	r25, Z+3	; 0x03
    3fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fe2:	dc 01       	movw	r26, r24
    3fe4:	cb 01       	movw	r24, r22
    3fe6:	f8 01       	movw	r30, r16
    3fe8:	91 83       	std	Z+1, r25	; 0x01
    3fea:	80 83       	st	Z, r24
    3fec:	de 01       	movw	r26, r28
    3fee:	ad 59       	subi	r26, 0x9D	; 157
    3ff0:	bf 4f       	sbci	r27, 0xFF	; 255
    3ff2:	fe 01       	movw	r30, r28
    3ff4:	e9 59       	subi	r30, 0x99	; 153
    3ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff8:	80 81       	ld	r24, Z
    3ffa:	91 81       	ldd	r25, Z+1	; 0x01
    3ffc:	8d 93       	st	X+, r24
    3ffe:	9c 93       	st	X, r25
    4000:	fe 01       	movw	r30, r28
    4002:	ed 59       	subi	r30, 0x9D	; 157
    4004:	ff 4f       	sbci	r31, 0xFF	; 255
    4006:	80 81       	ld	r24, Z
    4008:	91 81       	ldd	r25, Z+1	; 0x01
    400a:	01 97       	sbiw	r24, 0x01	; 1
    400c:	f1 f7       	brne	.-4      	; 0x400a <tempERA+0x172>
    400e:	fe 01       	movw	r30, r28
    4010:	ed 59       	subi	r30, 0x9D	; 157
    4012:	ff 4f       	sbci	r31, 0xFF	; 255
    4014:	91 83       	std	Z+1, r25	; 0x01
    4016:	80 83       	st	Z, r24
	_delay_ms(100);
/*
	Timer0_ConfigType config0={0,0,TIMER0_NORMAL_MODE,timer0_PRESCALAR_CLK8};
	Timer0_init(&config0);
*/
	SREG |= (1<<7);
    4018:	af e5       	ldi	r26, 0x5F	; 95
    401a:	b0 e0       	ldi	r27, 0x00	; 0
    401c:	ef e5       	ldi	r30, 0x5F	; 95
    401e:	f0 e0       	ldi	r31, 0x00	; 0
    4020:	80 81       	ld	r24, Z
    4022:	80 68       	ori	r24, 0x80	; 128
    4024:	8c 93       	st	X, r24
	LCD_displayStringRowColumn (0,3, "TEMP is  ");
    4026:	20 e6       	ldi	r18, 0x60	; 96
    4028:	30 e0       	ldi	r19, 0x00	; 0
    402a:	80 e0       	ldi	r24, 0x00	; 0
    402c:	63 e0       	ldi	r22, 0x03	; 3
    402e:	a9 01       	movw	r20, r18
    4030:	0e 94 85 1b 	call	0x370a	; 0x370a <LCD_displayStringRowColumn>

	AC_STATE acstate;
	Buzzer_off();
    4034:	0e 94 89 1c 	call	0x3912	; 0x3912 <Buzzer_off>
	while(1){
		distance = Ultrasonic_readDistance();
    4038:	0e 94 48 10 	call	0x2090	; 0x2090 <Ultrasonic_readDistance>
    403c:	80 93 72 01 	sts	0x0172, r24

		temp = LM35_getTemperature();
    4040:	0e 94 2d 11 	call	0x225a	; 0x225a <LM35_getTemperature>
    4044:	80 93 80 01 	sts	0x0180, r24
    4048:	fe 01       	movw	r30, r28
    404a:	e1 5a       	subi	r30, 0xA1	; 161
    404c:	ff 4f       	sbci	r31, 0xFF	; 255
    404e:	80 e0       	ldi	r24, 0x00	; 0
    4050:	90 e0       	ldi	r25, 0x00	; 0
    4052:	a8 ec       	ldi	r26, 0xC8	; 200
    4054:	b2 e4       	ldi	r27, 0x42	; 66
    4056:	80 83       	st	Z, r24
    4058:	91 83       	std	Z+1, r25	; 0x01
    405a:	a2 83       	std	Z+2, r26	; 0x02
    405c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    405e:	8e 01       	movw	r16, r28
    4060:	05 5a       	subi	r16, 0xA5	; 165
    4062:	1f 4f       	sbci	r17, 0xFF	; 255
    4064:	fe 01       	movw	r30, r28
    4066:	e1 5a       	subi	r30, 0xA1	; 161
    4068:	ff 4f       	sbci	r31, 0xFF	; 255
    406a:	60 81       	ld	r22, Z
    406c:	71 81       	ldd	r23, Z+1	; 0x01
    406e:	82 81       	ldd	r24, Z+2	; 0x02
    4070:	93 81       	ldd	r25, Z+3	; 0x03
    4072:	20 e0       	ldi	r18, 0x00	; 0
    4074:	30 e0       	ldi	r19, 0x00	; 0
    4076:	4a ef       	ldi	r20, 0xFA	; 250
    4078:	54 e4       	ldi	r21, 0x44	; 68
    407a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    407e:	dc 01       	movw	r26, r24
    4080:	cb 01       	movw	r24, r22
    4082:	f8 01       	movw	r30, r16
    4084:	80 83       	st	Z, r24
    4086:	91 83       	std	Z+1, r25	; 0x01
    4088:	a2 83       	std	Z+2, r26	; 0x02
    408a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    408c:	fe 01       	movw	r30, r28
    408e:	e5 5a       	subi	r30, 0xA5	; 165
    4090:	ff 4f       	sbci	r31, 0xFF	; 255
    4092:	60 81       	ld	r22, Z
    4094:	71 81       	ldd	r23, Z+1	; 0x01
    4096:	82 81       	ldd	r24, Z+2	; 0x02
    4098:	93 81       	ldd	r25, Z+3	; 0x03
    409a:	20 e0       	ldi	r18, 0x00	; 0
    409c:	30 e0       	ldi	r19, 0x00	; 0
    409e:	40 e8       	ldi	r20, 0x80	; 128
    40a0:	5f e3       	ldi	r21, 0x3F	; 63
    40a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    40a6:	88 23       	and	r24, r24
    40a8:	44 f4       	brge	.+16     	; 0x40ba <tempERA+0x222>
		__ticks = 1;
    40aa:	fe 01       	movw	r30, r28
    40ac:	e7 5a       	subi	r30, 0xA7	; 167
    40ae:	ff 4f       	sbci	r31, 0xFF	; 255
    40b0:	81 e0       	ldi	r24, 0x01	; 1
    40b2:	90 e0       	ldi	r25, 0x00	; 0
    40b4:	91 83       	std	Z+1, r25	; 0x01
    40b6:	80 83       	st	Z, r24
    40b8:	64 c0       	rjmp	.+200    	; 0x4182 <tempERA+0x2ea>
	else if (__tmp > 65535)
    40ba:	fe 01       	movw	r30, r28
    40bc:	e5 5a       	subi	r30, 0xA5	; 165
    40be:	ff 4f       	sbci	r31, 0xFF	; 255
    40c0:	60 81       	ld	r22, Z
    40c2:	71 81       	ldd	r23, Z+1	; 0x01
    40c4:	82 81       	ldd	r24, Z+2	; 0x02
    40c6:	93 81       	ldd	r25, Z+3	; 0x03
    40c8:	20 e0       	ldi	r18, 0x00	; 0
    40ca:	3f ef       	ldi	r19, 0xFF	; 255
    40cc:	4f e7       	ldi	r20, 0x7F	; 127
    40ce:	57 e4       	ldi	r21, 0x47	; 71
    40d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40d4:	18 16       	cp	r1, r24
    40d6:	0c f0       	brlt	.+2      	; 0x40da <tempERA+0x242>
    40d8:	43 c0       	rjmp	.+134    	; 0x4160 <tempERA+0x2c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40da:	fe 01       	movw	r30, r28
    40dc:	e1 5a       	subi	r30, 0xA1	; 161
    40de:	ff 4f       	sbci	r31, 0xFF	; 255
    40e0:	60 81       	ld	r22, Z
    40e2:	71 81       	ldd	r23, Z+1	; 0x01
    40e4:	82 81       	ldd	r24, Z+2	; 0x02
    40e6:	93 81       	ldd	r25, Z+3	; 0x03
    40e8:	20 e0       	ldi	r18, 0x00	; 0
    40ea:	30 e0       	ldi	r19, 0x00	; 0
    40ec:	40 e2       	ldi	r20, 0x20	; 32
    40ee:	51 e4       	ldi	r21, 0x41	; 65
    40f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40f4:	dc 01       	movw	r26, r24
    40f6:	cb 01       	movw	r24, r22
    40f8:	8e 01       	movw	r16, r28
    40fa:	07 5a       	subi	r16, 0xA7	; 167
    40fc:	1f 4f       	sbci	r17, 0xFF	; 255
    40fe:	bc 01       	movw	r22, r24
    4100:	cd 01       	movw	r24, r26
    4102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4106:	dc 01       	movw	r26, r24
    4108:	cb 01       	movw	r24, r22
    410a:	f8 01       	movw	r30, r16
    410c:	91 83       	std	Z+1, r25	; 0x01
    410e:	80 83       	st	Z, r24
    4110:	1f c0       	rjmp	.+62     	; 0x4150 <tempERA+0x2b8>
    4112:	fe 01       	movw	r30, r28
    4114:	e9 5a       	subi	r30, 0xA9	; 169
    4116:	ff 4f       	sbci	r31, 0xFF	; 255
    4118:	88 ec       	ldi	r24, 0xC8	; 200
    411a:	90 e0       	ldi	r25, 0x00	; 0
    411c:	91 83       	std	Z+1, r25	; 0x01
    411e:	80 83       	st	Z, r24
    4120:	fe 01       	movw	r30, r28
    4122:	e9 5a       	subi	r30, 0xA9	; 169
    4124:	ff 4f       	sbci	r31, 0xFF	; 255
    4126:	80 81       	ld	r24, Z
    4128:	91 81       	ldd	r25, Z+1	; 0x01
    412a:	01 97       	sbiw	r24, 0x01	; 1
    412c:	f1 f7       	brne	.-4      	; 0x412a <tempERA+0x292>
    412e:	fe 01       	movw	r30, r28
    4130:	e9 5a       	subi	r30, 0xA9	; 169
    4132:	ff 4f       	sbci	r31, 0xFF	; 255
    4134:	91 83       	std	Z+1, r25	; 0x01
    4136:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4138:	de 01       	movw	r26, r28
    413a:	a7 5a       	subi	r26, 0xA7	; 167
    413c:	bf 4f       	sbci	r27, 0xFF	; 255
    413e:	fe 01       	movw	r30, r28
    4140:	e7 5a       	subi	r30, 0xA7	; 167
    4142:	ff 4f       	sbci	r31, 0xFF	; 255
    4144:	80 81       	ld	r24, Z
    4146:	91 81       	ldd	r25, Z+1	; 0x01
    4148:	01 97       	sbiw	r24, 0x01	; 1
    414a:	11 96       	adiw	r26, 0x01	; 1
    414c:	9c 93       	st	X, r25
    414e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4150:	fe 01       	movw	r30, r28
    4152:	e7 5a       	subi	r30, 0xA7	; 167
    4154:	ff 4f       	sbci	r31, 0xFF	; 255
    4156:	80 81       	ld	r24, Z
    4158:	91 81       	ldd	r25, Z+1	; 0x01
    415a:	00 97       	sbiw	r24, 0x00	; 0
    415c:	d1 f6       	brne	.-76     	; 0x4112 <tempERA+0x27a>
    415e:	28 c0       	rjmp	.+80     	; 0x41b0 <tempERA+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4160:	8e 01       	movw	r16, r28
    4162:	07 5a       	subi	r16, 0xA7	; 167
    4164:	1f 4f       	sbci	r17, 0xFF	; 255
    4166:	fe 01       	movw	r30, r28
    4168:	e5 5a       	subi	r30, 0xA5	; 165
    416a:	ff 4f       	sbci	r31, 0xFF	; 255
    416c:	60 81       	ld	r22, Z
    416e:	71 81       	ldd	r23, Z+1	; 0x01
    4170:	82 81       	ldd	r24, Z+2	; 0x02
    4172:	93 81       	ldd	r25, Z+3	; 0x03
    4174:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4178:	dc 01       	movw	r26, r24
    417a:	cb 01       	movw	r24, r22
    417c:	f8 01       	movw	r30, r16
    417e:	91 83       	std	Z+1, r25	; 0x01
    4180:	80 83       	st	Z, r24
    4182:	de 01       	movw	r26, r28
    4184:	ab 5a       	subi	r26, 0xAB	; 171
    4186:	bf 4f       	sbci	r27, 0xFF	; 255
    4188:	fe 01       	movw	r30, r28
    418a:	e7 5a       	subi	r30, 0xA7	; 167
    418c:	ff 4f       	sbci	r31, 0xFF	; 255
    418e:	80 81       	ld	r24, Z
    4190:	91 81       	ldd	r25, Z+1	; 0x01
    4192:	11 96       	adiw	r26, 0x01	; 1
    4194:	9c 93       	st	X, r25
    4196:	8e 93       	st	-X, r24
    4198:	fe 01       	movw	r30, r28
    419a:	eb 5a       	subi	r30, 0xAB	; 171
    419c:	ff 4f       	sbci	r31, 0xFF	; 255
    419e:	80 81       	ld	r24, Z
    41a0:	91 81       	ldd	r25, Z+1	; 0x01
    41a2:	01 97       	sbiw	r24, 0x01	; 1
    41a4:	f1 f7       	brne	.-4      	; 0x41a2 <tempERA+0x30a>
    41a6:	fe 01       	movw	r30, r28
    41a8:	eb 5a       	subi	r30, 0xAB	; 171
    41aa:	ff 4f       	sbci	r31, 0xFF	; 255
    41ac:	91 83       	std	Z+1, r25	; 0x01
    41ae:	80 83       	st	Z, r24
		_delay_ms(100);

		if (temp <= 25 && temp>=10 )
    41b0:	80 91 80 01 	lds	r24, 0x0180
    41b4:	8a 31       	cpi	r24, 0x1A	; 26
    41b6:	68 f4       	brcc	.+26     	; 0x41d2 <tempERA+0x33a>
    41b8:	80 91 80 01 	lds	r24, 0x0180
    41bc:	8a 30       	cpi	r24, 0x0A	; 10
    41be:	48 f0       	brcs	.+18     	; 0x41d2 <tempERA+0x33a>
		{
			acstate = OFF;
    41c0:	fe 01       	movw	r30, r28
    41c2:	ef 58       	subi	r30, 0x8F	; 143
    41c4:	ff 4f       	sbci	r31, 0xFF	; 255
    41c6:	10 82       	st	Z, r1
			AC_DcMotor_Rotate(STOP1,0);
    41c8:	80 e0       	ldi	r24, 0x00	; 0
    41ca:	60 e0       	ldi	r22, 0x00	; 0
    41cc:	0e 94 a7 10 	call	0x214e	; 0x214e <AC_DcMotor_Rotate>
    41d0:	1e c0       	rjmp	.+60     	; 0x420e <tempERA+0x376>
		}
		else if (temp < 10 )
    41d2:	80 91 80 01 	lds	r24, 0x0180
    41d6:	8a 30       	cpi	r24, 0x0A	; 10
    41d8:	50 f4       	brcc	.+20     	; 0x41ee <tempERA+0x356>
		{
			acstate = ON;
    41da:	fe 01       	movw	r30, r28
    41dc:	ef 58       	subi	r30, 0x8F	; 143
    41de:	ff 4f       	sbci	r31, 0xFF	; 255
    41e0:	81 e0       	ldi	r24, 0x01	; 1
    41e2:	80 83       	st	Z, r24
			AC_DcMotor_Rotate(ANTICLOCKWISE1,100);
    41e4:	82 e0       	ldi	r24, 0x02	; 2
    41e6:	64 e6       	ldi	r22, 0x64	; 100
    41e8:	0e 94 a7 10 	call	0x214e	; 0x214e <AC_DcMotor_Rotate>
    41ec:	10 c0       	rjmp	.+32     	; 0x420e <tempERA+0x376>
		}

		else if (temp >25)
    41ee:	80 91 80 01 	lds	r24, 0x0180
    41f2:	8a 31       	cpi	r24, 0x1A	; 26
    41f4:	60 f0       	brcs	.+24     	; 0x420e <tempERA+0x376>
		{
			acstate = ON;
    41f6:	fe 01       	movw	r30, r28
    41f8:	ef 58       	subi	r30, 0x8F	; 143
    41fa:	ff 4f       	sbci	r31, 0xFF	; 255
    41fc:	81 e0       	ldi	r24, 0x01	; 1
    41fe:	80 83       	st	Z, r24
			LCD_DisplayChar(' ');
    4200:	80 e2       	ldi	r24, 0x20	; 32
    4202:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <LCD_DisplayChar>
			AC_DcMotor_Rotate(CLOCKWISE1,100);
    4206:	81 e0       	ldi	r24, 0x01	; 1
    4208:	64 e6       	ldi	r22, 0x64	; 100
    420a:	0e 94 a7 10 	call	0x214e	; 0x214e <AC_DcMotor_Rotate>
		}

		if((distance < 100 )&& (distance > 70 ))
    420e:	80 91 72 01 	lds	r24, 0x0172
    4212:	84 36       	cpi	r24, 0x64	; 100
    4214:	08 f0       	brcs	.+2      	; 0x4218 <tempERA+0x380>
    4216:	42 c1       	rjmp	.+644    	; 0x449c <tempERA+0x604>
    4218:	80 91 72 01 	lds	r24, 0x0172
    421c:	87 34       	cpi	r24, 0x47	; 71
    421e:	08 f4       	brcc	.+2      	; 0x4222 <tempERA+0x38a>
    4220:	3d c1       	rjmp	.+634    	; 0x449c <tempERA+0x604>
		{

			Buzzer_on();
    4222:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <Buzzer_on>
    4226:	fe 01       	movw	r30, r28
    4228:	ef 5a       	subi	r30, 0xAF	; 175
    422a:	ff 4f       	sbci	r31, 0xFF	; 255
    422c:	80 e0       	ldi	r24, 0x00	; 0
    422e:	90 e0       	ldi	r25, 0x00	; 0
    4230:	a8 ec       	ldi	r26, 0xC8	; 200
    4232:	b3 e4       	ldi	r27, 0x43	; 67
    4234:	80 83       	st	Z, r24
    4236:	91 83       	std	Z+1, r25	; 0x01
    4238:	a2 83       	std	Z+2, r26	; 0x02
    423a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    423c:	8e 01       	movw	r16, r28
    423e:	03 5b       	subi	r16, 0xB3	; 179
    4240:	1f 4f       	sbci	r17, 0xFF	; 255
    4242:	fe 01       	movw	r30, r28
    4244:	ef 5a       	subi	r30, 0xAF	; 175
    4246:	ff 4f       	sbci	r31, 0xFF	; 255
    4248:	60 81       	ld	r22, Z
    424a:	71 81       	ldd	r23, Z+1	; 0x01
    424c:	82 81       	ldd	r24, Z+2	; 0x02
    424e:	93 81       	ldd	r25, Z+3	; 0x03
    4250:	20 e0       	ldi	r18, 0x00	; 0
    4252:	30 e0       	ldi	r19, 0x00	; 0
    4254:	4a ef       	ldi	r20, 0xFA	; 250
    4256:	54 e4       	ldi	r21, 0x44	; 68
    4258:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    425c:	dc 01       	movw	r26, r24
    425e:	cb 01       	movw	r24, r22
    4260:	f8 01       	movw	r30, r16
    4262:	80 83       	st	Z, r24
    4264:	91 83       	std	Z+1, r25	; 0x01
    4266:	a2 83       	std	Z+2, r26	; 0x02
    4268:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    426a:	fe 01       	movw	r30, r28
    426c:	e3 5b       	subi	r30, 0xB3	; 179
    426e:	ff 4f       	sbci	r31, 0xFF	; 255
    4270:	60 81       	ld	r22, Z
    4272:	71 81       	ldd	r23, Z+1	; 0x01
    4274:	82 81       	ldd	r24, Z+2	; 0x02
    4276:	93 81       	ldd	r25, Z+3	; 0x03
    4278:	20 e0       	ldi	r18, 0x00	; 0
    427a:	30 e0       	ldi	r19, 0x00	; 0
    427c:	40 e8       	ldi	r20, 0x80	; 128
    427e:	5f e3       	ldi	r21, 0x3F	; 63
    4280:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4284:	88 23       	and	r24, r24
    4286:	44 f4       	brge	.+16     	; 0x4298 <tempERA+0x400>
		__ticks = 1;
    4288:	fe 01       	movw	r30, r28
    428a:	e5 5b       	subi	r30, 0xB5	; 181
    428c:	ff 4f       	sbci	r31, 0xFF	; 255
    428e:	81 e0       	ldi	r24, 0x01	; 1
    4290:	90 e0       	ldi	r25, 0x00	; 0
    4292:	91 83       	std	Z+1, r25	; 0x01
    4294:	80 83       	st	Z, r24
    4296:	64 c0       	rjmp	.+200    	; 0x4360 <tempERA+0x4c8>
	else if (__tmp > 65535)
    4298:	fe 01       	movw	r30, r28
    429a:	e3 5b       	subi	r30, 0xB3	; 179
    429c:	ff 4f       	sbci	r31, 0xFF	; 255
    429e:	60 81       	ld	r22, Z
    42a0:	71 81       	ldd	r23, Z+1	; 0x01
    42a2:	82 81       	ldd	r24, Z+2	; 0x02
    42a4:	93 81       	ldd	r25, Z+3	; 0x03
    42a6:	20 e0       	ldi	r18, 0x00	; 0
    42a8:	3f ef       	ldi	r19, 0xFF	; 255
    42aa:	4f e7       	ldi	r20, 0x7F	; 127
    42ac:	57 e4       	ldi	r21, 0x47	; 71
    42ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42b2:	18 16       	cp	r1, r24
    42b4:	0c f0       	brlt	.+2      	; 0x42b8 <tempERA+0x420>
    42b6:	43 c0       	rjmp	.+134    	; 0x433e <tempERA+0x4a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42b8:	fe 01       	movw	r30, r28
    42ba:	ef 5a       	subi	r30, 0xAF	; 175
    42bc:	ff 4f       	sbci	r31, 0xFF	; 255
    42be:	60 81       	ld	r22, Z
    42c0:	71 81       	ldd	r23, Z+1	; 0x01
    42c2:	82 81       	ldd	r24, Z+2	; 0x02
    42c4:	93 81       	ldd	r25, Z+3	; 0x03
    42c6:	20 e0       	ldi	r18, 0x00	; 0
    42c8:	30 e0       	ldi	r19, 0x00	; 0
    42ca:	40 e2       	ldi	r20, 0x20	; 32
    42cc:	51 e4       	ldi	r21, 0x41	; 65
    42ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42d2:	dc 01       	movw	r26, r24
    42d4:	cb 01       	movw	r24, r22
    42d6:	8e 01       	movw	r16, r28
    42d8:	05 5b       	subi	r16, 0xB5	; 181
    42da:	1f 4f       	sbci	r17, 0xFF	; 255
    42dc:	bc 01       	movw	r22, r24
    42de:	cd 01       	movw	r24, r26
    42e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42e4:	dc 01       	movw	r26, r24
    42e6:	cb 01       	movw	r24, r22
    42e8:	f8 01       	movw	r30, r16
    42ea:	91 83       	std	Z+1, r25	; 0x01
    42ec:	80 83       	st	Z, r24
    42ee:	1f c0       	rjmp	.+62     	; 0x432e <tempERA+0x496>
    42f0:	fe 01       	movw	r30, r28
    42f2:	e7 5b       	subi	r30, 0xB7	; 183
    42f4:	ff 4f       	sbci	r31, 0xFF	; 255
    42f6:	88 ec       	ldi	r24, 0xC8	; 200
    42f8:	90 e0       	ldi	r25, 0x00	; 0
    42fa:	91 83       	std	Z+1, r25	; 0x01
    42fc:	80 83       	st	Z, r24
    42fe:	fe 01       	movw	r30, r28
    4300:	e7 5b       	subi	r30, 0xB7	; 183
    4302:	ff 4f       	sbci	r31, 0xFF	; 255
    4304:	80 81       	ld	r24, Z
    4306:	91 81       	ldd	r25, Z+1	; 0x01
    4308:	01 97       	sbiw	r24, 0x01	; 1
    430a:	f1 f7       	brne	.-4      	; 0x4308 <tempERA+0x470>
    430c:	fe 01       	movw	r30, r28
    430e:	e7 5b       	subi	r30, 0xB7	; 183
    4310:	ff 4f       	sbci	r31, 0xFF	; 255
    4312:	91 83       	std	Z+1, r25	; 0x01
    4314:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4316:	de 01       	movw	r26, r28
    4318:	a5 5b       	subi	r26, 0xB5	; 181
    431a:	bf 4f       	sbci	r27, 0xFF	; 255
    431c:	fe 01       	movw	r30, r28
    431e:	e5 5b       	subi	r30, 0xB5	; 181
    4320:	ff 4f       	sbci	r31, 0xFF	; 255
    4322:	80 81       	ld	r24, Z
    4324:	91 81       	ldd	r25, Z+1	; 0x01
    4326:	01 97       	sbiw	r24, 0x01	; 1
    4328:	11 96       	adiw	r26, 0x01	; 1
    432a:	9c 93       	st	X, r25
    432c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    432e:	fe 01       	movw	r30, r28
    4330:	e5 5b       	subi	r30, 0xB5	; 181
    4332:	ff 4f       	sbci	r31, 0xFF	; 255
    4334:	80 81       	ld	r24, Z
    4336:	91 81       	ldd	r25, Z+1	; 0x01
    4338:	00 97       	sbiw	r24, 0x00	; 0
    433a:	d1 f6       	brne	.-76     	; 0x42f0 <tempERA+0x458>
    433c:	27 c0       	rjmp	.+78     	; 0x438c <tempERA+0x4f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    433e:	8e 01       	movw	r16, r28
    4340:	05 5b       	subi	r16, 0xB5	; 181
    4342:	1f 4f       	sbci	r17, 0xFF	; 255
    4344:	fe 01       	movw	r30, r28
    4346:	e3 5b       	subi	r30, 0xB3	; 179
    4348:	ff 4f       	sbci	r31, 0xFF	; 255
    434a:	60 81       	ld	r22, Z
    434c:	71 81       	ldd	r23, Z+1	; 0x01
    434e:	82 81       	ldd	r24, Z+2	; 0x02
    4350:	93 81       	ldd	r25, Z+3	; 0x03
    4352:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4356:	dc 01       	movw	r26, r24
    4358:	cb 01       	movw	r24, r22
    435a:	f8 01       	movw	r30, r16
    435c:	91 83       	std	Z+1, r25	; 0x01
    435e:	80 83       	st	Z, r24
    4360:	de 01       	movw	r26, r28
    4362:	a9 5b       	subi	r26, 0xB9	; 185
    4364:	bf 4f       	sbci	r27, 0xFF	; 255
    4366:	fe 01       	movw	r30, r28
    4368:	e5 5b       	subi	r30, 0xB5	; 181
    436a:	ff 4f       	sbci	r31, 0xFF	; 255
    436c:	80 81       	ld	r24, Z
    436e:	91 81       	ldd	r25, Z+1	; 0x01
    4370:	8d 93       	st	X+, r24
    4372:	9c 93       	st	X, r25
    4374:	fe 01       	movw	r30, r28
    4376:	e9 5b       	subi	r30, 0xB9	; 185
    4378:	ff 4f       	sbci	r31, 0xFF	; 255
    437a:	80 81       	ld	r24, Z
    437c:	91 81       	ldd	r25, Z+1	; 0x01
    437e:	01 97       	sbiw	r24, 0x01	; 1
    4380:	f1 f7       	brne	.-4      	; 0x437e <tempERA+0x4e6>
    4382:	fe 01       	movw	r30, r28
    4384:	e9 5b       	subi	r30, 0xB9	; 185
    4386:	ff 4f       	sbci	r31, 0xFF	; 255
    4388:	91 83       	std	Z+1, r25	; 0x01
    438a:	80 83       	st	Z, r24
			_delay_ms(400);
			Buzzer_off();
    438c:	0e 94 89 1c 	call	0x3912	; 0x3912 <Buzzer_off>
    4390:	fe 01       	movw	r30, r28
    4392:	ed 5b       	subi	r30, 0xBD	; 189
    4394:	ff 4f       	sbci	r31, 0xFF	; 255
    4396:	80 e0       	ldi	r24, 0x00	; 0
    4398:	90 e0       	ldi	r25, 0x00	; 0
    439a:	aa ef       	ldi	r26, 0xFA	; 250
    439c:	b3 e4       	ldi	r27, 0x43	; 67
    439e:	80 83       	st	Z, r24
    43a0:	91 83       	std	Z+1, r25	; 0x01
    43a2:	a2 83       	std	Z+2, r26	; 0x02
    43a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43a6:	8e 01       	movw	r16, r28
    43a8:	01 5c       	subi	r16, 0xC1	; 193
    43aa:	1f 4f       	sbci	r17, 0xFF	; 255
    43ac:	fe 01       	movw	r30, r28
    43ae:	ed 5b       	subi	r30, 0xBD	; 189
    43b0:	ff 4f       	sbci	r31, 0xFF	; 255
    43b2:	60 81       	ld	r22, Z
    43b4:	71 81       	ldd	r23, Z+1	; 0x01
    43b6:	82 81       	ldd	r24, Z+2	; 0x02
    43b8:	93 81       	ldd	r25, Z+3	; 0x03
    43ba:	20 e0       	ldi	r18, 0x00	; 0
    43bc:	30 e0       	ldi	r19, 0x00	; 0
    43be:	4a ef       	ldi	r20, 0xFA	; 250
    43c0:	54 e4       	ldi	r21, 0x44	; 68
    43c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43c6:	dc 01       	movw	r26, r24
    43c8:	cb 01       	movw	r24, r22
    43ca:	f8 01       	movw	r30, r16
    43cc:	80 83       	st	Z, r24
    43ce:	91 83       	std	Z+1, r25	; 0x01
    43d0:	a2 83       	std	Z+2, r26	; 0x02
    43d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    43d4:	fe 01       	movw	r30, r28
    43d6:	ff 96       	adiw	r30, 0x3f	; 63
    43d8:	60 81       	ld	r22, Z
    43da:	71 81       	ldd	r23, Z+1	; 0x01
    43dc:	82 81       	ldd	r24, Z+2	; 0x02
    43de:	93 81       	ldd	r25, Z+3	; 0x03
    43e0:	20 e0       	ldi	r18, 0x00	; 0
    43e2:	30 e0       	ldi	r19, 0x00	; 0
    43e4:	40 e8       	ldi	r20, 0x80	; 128
    43e6:	5f e3       	ldi	r21, 0x3F	; 63
    43e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43ec:	88 23       	and	r24, r24
    43ee:	2c f4       	brge	.+10     	; 0x43fa <tempERA+0x562>
		__ticks = 1;
    43f0:	81 e0       	ldi	r24, 0x01	; 1
    43f2:	90 e0       	ldi	r25, 0x00	; 0
    43f4:	9e af       	std	Y+62, r25	; 0x3e
    43f6:	8d af       	std	Y+61, r24	; 0x3d
    43f8:	46 c0       	rjmp	.+140    	; 0x4486 <tempERA+0x5ee>
	else if (__tmp > 65535)
    43fa:	fe 01       	movw	r30, r28
    43fc:	ff 96       	adiw	r30, 0x3f	; 63
    43fe:	60 81       	ld	r22, Z
    4400:	71 81       	ldd	r23, Z+1	; 0x01
    4402:	82 81       	ldd	r24, Z+2	; 0x02
    4404:	93 81       	ldd	r25, Z+3	; 0x03
    4406:	20 e0       	ldi	r18, 0x00	; 0
    4408:	3f ef       	ldi	r19, 0xFF	; 255
    440a:	4f e7       	ldi	r20, 0x7F	; 127
    440c:	57 e4       	ldi	r21, 0x47	; 71
    440e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4412:	18 16       	cp	r1, r24
    4414:	64 f5       	brge	.+88     	; 0x446e <tempERA+0x5d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4416:	fe 01       	movw	r30, r28
    4418:	ed 5b       	subi	r30, 0xBD	; 189
    441a:	ff 4f       	sbci	r31, 0xFF	; 255
    441c:	60 81       	ld	r22, Z
    441e:	71 81       	ldd	r23, Z+1	; 0x01
    4420:	82 81       	ldd	r24, Z+2	; 0x02
    4422:	93 81       	ldd	r25, Z+3	; 0x03
    4424:	20 e0       	ldi	r18, 0x00	; 0
    4426:	30 e0       	ldi	r19, 0x00	; 0
    4428:	40 e2       	ldi	r20, 0x20	; 32
    442a:	51 e4       	ldi	r21, 0x41	; 65
    442c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4430:	dc 01       	movw	r26, r24
    4432:	cb 01       	movw	r24, r22
    4434:	bc 01       	movw	r22, r24
    4436:	cd 01       	movw	r24, r26
    4438:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    443c:	dc 01       	movw	r26, r24
    443e:	cb 01       	movw	r24, r22
    4440:	9e af       	std	Y+62, r25	; 0x3e
    4442:	8d af       	std	Y+61, r24	; 0x3d
    4444:	0f c0       	rjmp	.+30     	; 0x4464 <tempERA+0x5cc>
    4446:	88 ec       	ldi	r24, 0xC8	; 200
    4448:	90 e0       	ldi	r25, 0x00	; 0
    444a:	9c af       	std	Y+60, r25	; 0x3c
    444c:	8b af       	std	Y+59, r24	; 0x3b
    444e:	8b ad       	ldd	r24, Y+59	; 0x3b
    4450:	9c ad       	ldd	r25, Y+60	; 0x3c
    4452:	01 97       	sbiw	r24, 0x01	; 1
    4454:	f1 f7       	brne	.-4      	; 0x4452 <tempERA+0x5ba>
    4456:	9c af       	std	Y+60, r25	; 0x3c
    4458:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    445a:	8d ad       	ldd	r24, Y+61	; 0x3d
    445c:	9e ad       	ldd	r25, Y+62	; 0x3e
    445e:	01 97       	sbiw	r24, 0x01	; 1
    4460:	9e af       	std	Y+62, r25	; 0x3e
    4462:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4464:	8d ad       	ldd	r24, Y+61	; 0x3d
    4466:	9e ad       	ldd	r25, Y+62	; 0x3e
    4468:	00 97       	sbiw	r24, 0x00	; 0
    446a:	69 f7       	brne	.-38     	; 0x4446 <tempERA+0x5ae>
    446c:	03 c2       	rjmp	.+1030   	; 0x4874 <tempERA+0x9dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    446e:	fe 01       	movw	r30, r28
    4470:	ff 96       	adiw	r30, 0x3f	; 63
    4472:	60 81       	ld	r22, Z
    4474:	71 81       	ldd	r23, Z+1	; 0x01
    4476:	82 81       	ldd	r24, Z+2	; 0x02
    4478:	93 81       	ldd	r25, Z+3	; 0x03
    447a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    447e:	dc 01       	movw	r26, r24
    4480:	cb 01       	movw	r24, r22
    4482:	9e af       	std	Y+62, r25	; 0x3e
    4484:	8d af       	std	Y+61, r24	; 0x3d
    4486:	8d ad       	ldd	r24, Y+61	; 0x3d
    4488:	9e ad       	ldd	r25, Y+62	; 0x3e
    448a:	9a af       	std	Y+58, r25	; 0x3a
    448c:	89 af       	std	Y+57, r24	; 0x39
    448e:	89 ad       	ldd	r24, Y+57	; 0x39
    4490:	9a ad       	ldd	r25, Y+58	; 0x3a
    4492:	01 97       	sbiw	r24, 0x01	; 1
    4494:	f1 f7       	brne	.-4      	; 0x4492 <tempERA+0x5fa>
    4496:	9a af       	std	Y+58, r25	; 0x3a
    4498:	89 af       	std	Y+57, r24	; 0x39
    449a:	ec c1       	rjmp	.+984    	; 0x4874 <tempERA+0x9dc>
			_delay_ms(500);
		}
		else if((distance < 70 )&& (distance > 40 ))
    449c:	80 91 72 01 	lds	r24, 0x0172
    44a0:	86 34       	cpi	r24, 0x46	; 70
    44a2:	08 f0       	brcs	.+2      	; 0x44a6 <tempERA+0x60e>
    44a4:	ee c0       	rjmp	.+476    	; 0x4682 <tempERA+0x7ea>
    44a6:	80 91 72 01 	lds	r24, 0x0172
    44aa:	89 32       	cpi	r24, 0x29	; 41
    44ac:	08 f4       	brcc	.+2      	; 0x44b0 <tempERA+0x618>
    44ae:	e9 c0       	rjmp	.+466    	; 0x4682 <tempERA+0x7ea>
		{

			Buzzer_on();
    44b0:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <Buzzer_on>
    44b4:	80 e0       	ldi	r24, 0x00	; 0
    44b6:	90 e0       	ldi	r25, 0x00	; 0
    44b8:	a6 e9       	ldi	r26, 0x96	; 150
    44ba:	b3 e4       	ldi	r27, 0x43	; 67
    44bc:	8d ab       	std	Y+53, r24	; 0x35
    44be:	9e ab       	std	Y+54, r25	; 0x36
    44c0:	af ab       	std	Y+55, r26	; 0x37
    44c2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44c4:	6d a9       	ldd	r22, Y+53	; 0x35
    44c6:	7e a9       	ldd	r23, Y+54	; 0x36
    44c8:	8f a9       	ldd	r24, Y+55	; 0x37
    44ca:	98 ad       	ldd	r25, Y+56	; 0x38
    44cc:	20 e0       	ldi	r18, 0x00	; 0
    44ce:	30 e0       	ldi	r19, 0x00	; 0
    44d0:	4a ef       	ldi	r20, 0xFA	; 250
    44d2:	54 e4       	ldi	r21, 0x44	; 68
    44d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44d8:	dc 01       	movw	r26, r24
    44da:	cb 01       	movw	r24, r22
    44dc:	89 ab       	std	Y+49, r24	; 0x31
    44de:	9a ab       	std	Y+50, r25	; 0x32
    44e0:	ab ab       	std	Y+51, r26	; 0x33
    44e2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    44e4:	69 a9       	ldd	r22, Y+49	; 0x31
    44e6:	7a a9       	ldd	r23, Y+50	; 0x32
    44e8:	8b a9       	ldd	r24, Y+51	; 0x33
    44ea:	9c a9       	ldd	r25, Y+52	; 0x34
    44ec:	20 e0       	ldi	r18, 0x00	; 0
    44ee:	30 e0       	ldi	r19, 0x00	; 0
    44f0:	40 e8       	ldi	r20, 0x80	; 128
    44f2:	5f e3       	ldi	r21, 0x3F	; 63
    44f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    44f8:	88 23       	and	r24, r24
    44fa:	2c f4       	brge	.+10     	; 0x4506 <tempERA+0x66e>
		__ticks = 1;
    44fc:	81 e0       	ldi	r24, 0x01	; 1
    44fe:	90 e0       	ldi	r25, 0x00	; 0
    4500:	98 ab       	std	Y+48, r25	; 0x30
    4502:	8f a7       	std	Y+47, r24	; 0x2f
    4504:	3f c0       	rjmp	.+126    	; 0x4584 <tempERA+0x6ec>
	else if (__tmp > 65535)
    4506:	69 a9       	ldd	r22, Y+49	; 0x31
    4508:	7a a9       	ldd	r23, Y+50	; 0x32
    450a:	8b a9       	ldd	r24, Y+51	; 0x33
    450c:	9c a9       	ldd	r25, Y+52	; 0x34
    450e:	20 e0       	ldi	r18, 0x00	; 0
    4510:	3f ef       	ldi	r19, 0xFF	; 255
    4512:	4f e7       	ldi	r20, 0x7F	; 127
    4514:	57 e4       	ldi	r21, 0x47	; 71
    4516:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    451a:	18 16       	cp	r1, r24
    451c:	4c f5       	brge	.+82     	; 0x4570 <tempERA+0x6d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    451e:	6d a9       	ldd	r22, Y+53	; 0x35
    4520:	7e a9       	ldd	r23, Y+54	; 0x36
    4522:	8f a9       	ldd	r24, Y+55	; 0x37
    4524:	98 ad       	ldd	r25, Y+56	; 0x38
    4526:	20 e0       	ldi	r18, 0x00	; 0
    4528:	30 e0       	ldi	r19, 0x00	; 0
    452a:	40 e2       	ldi	r20, 0x20	; 32
    452c:	51 e4       	ldi	r21, 0x41	; 65
    452e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4532:	dc 01       	movw	r26, r24
    4534:	cb 01       	movw	r24, r22
    4536:	bc 01       	movw	r22, r24
    4538:	cd 01       	movw	r24, r26
    453a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    453e:	dc 01       	movw	r26, r24
    4540:	cb 01       	movw	r24, r22
    4542:	98 ab       	std	Y+48, r25	; 0x30
    4544:	8f a7       	std	Y+47, r24	; 0x2f
    4546:	0f c0       	rjmp	.+30     	; 0x4566 <tempERA+0x6ce>
    4548:	88 ec       	ldi	r24, 0xC8	; 200
    454a:	90 e0       	ldi	r25, 0x00	; 0
    454c:	9e a7       	std	Y+46, r25	; 0x2e
    454e:	8d a7       	std	Y+45, r24	; 0x2d
    4550:	8d a5       	ldd	r24, Y+45	; 0x2d
    4552:	9e a5       	ldd	r25, Y+46	; 0x2e
    4554:	01 97       	sbiw	r24, 0x01	; 1
    4556:	f1 f7       	brne	.-4      	; 0x4554 <tempERA+0x6bc>
    4558:	9e a7       	std	Y+46, r25	; 0x2e
    455a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    455c:	8f a5       	ldd	r24, Y+47	; 0x2f
    455e:	98 a9       	ldd	r25, Y+48	; 0x30
    4560:	01 97       	sbiw	r24, 0x01	; 1
    4562:	98 ab       	std	Y+48, r25	; 0x30
    4564:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4566:	8f a5       	ldd	r24, Y+47	; 0x2f
    4568:	98 a9       	ldd	r25, Y+48	; 0x30
    456a:	00 97       	sbiw	r24, 0x00	; 0
    456c:	69 f7       	brne	.-38     	; 0x4548 <tempERA+0x6b0>
    456e:	14 c0       	rjmp	.+40     	; 0x4598 <tempERA+0x700>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4570:	69 a9       	ldd	r22, Y+49	; 0x31
    4572:	7a a9       	ldd	r23, Y+50	; 0x32
    4574:	8b a9       	ldd	r24, Y+51	; 0x33
    4576:	9c a9       	ldd	r25, Y+52	; 0x34
    4578:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    457c:	dc 01       	movw	r26, r24
    457e:	cb 01       	movw	r24, r22
    4580:	98 ab       	std	Y+48, r25	; 0x30
    4582:	8f a7       	std	Y+47, r24	; 0x2f
    4584:	8f a5       	ldd	r24, Y+47	; 0x2f
    4586:	98 a9       	ldd	r25, Y+48	; 0x30
    4588:	9c a7       	std	Y+44, r25	; 0x2c
    458a:	8b a7       	std	Y+43, r24	; 0x2b
    458c:	8b a5       	ldd	r24, Y+43	; 0x2b
    458e:	9c a5       	ldd	r25, Y+44	; 0x2c
    4590:	01 97       	sbiw	r24, 0x01	; 1
    4592:	f1 f7       	brne	.-4      	; 0x4590 <tempERA+0x6f8>
    4594:	9c a7       	std	Y+44, r25	; 0x2c
    4596:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(300);
			Buzzer_off();
    4598:	0e 94 89 1c 	call	0x3912	; 0x3912 <Buzzer_off>
    459c:	80 e0       	ldi	r24, 0x00	; 0
    459e:	90 e0       	ldi	r25, 0x00	; 0
    45a0:	a8 ec       	ldi	r26, 0xC8	; 200
    45a2:	b3 e4       	ldi	r27, 0x43	; 67
    45a4:	8f a3       	std	Y+39, r24	; 0x27
    45a6:	98 a7       	std	Y+40, r25	; 0x28
    45a8:	a9 a7       	std	Y+41, r26	; 0x29
    45aa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45ac:	6f a1       	ldd	r22, Y+39	; 0x27
    45ae:	78 a5       	ldd	r23, Y+40	; 0x28
    45b0:	89 a5       	ldd	r24, Y+41	; 0x29
    45b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    45b4:	20 e0       	ldi	r18, 0x00	; 0
    45b6:	30 e0       	ldi	r19, 0x00	; 0
    45b8:	4a ef       	ldi	r20, 0xFA	; 250
    45ba:	54 e4       	ldi	r21, 0x44	; 68
    45bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45c0:	dc 01       	movw	r26, r24
    45c2:	cb 01       	movw	r24, r22
    45c4:	8b a3       	std	Y+35, r24	; 0x23
    45c6:	9c a3       	std	Y+36, r25	; 0x24
    45c8:	ad a3       	std	Y+37, r26	; 0x25
    45ca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    45cc:	6b a1       	ldd	r22, Y+35	; 0x23
    45ce:	7c a1       	ldd	r23, Y+36	; 0x24
    45d0:	8d a1       	ldd	r24, Y+37	; 0x25
    45d2:	9e a1       	ldd	r25, Y+38	; 0x26
    45d4:	20 e0       	ldi	r18, 0x00	; 0
    45d6:	30 e0       	ldi	r19, 0x00	; 0
    45d8:	40 e8       	ldi	r20, 0x80	; 128
    45da:	5f e3       	ldi	r21, 0x3F	; 63
    45dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    45e0:	88 23       	and	r24, r24
    45e2:	2c f4       	brge	.+10     	; 0x45ee <tempERA+0x756>
		__ticks = 1;
    45e4:	81 e0       	ldi	r24, 0x01	; 1
    45e6:	90 e0       	ldi	r25, 0x00	; 0
    45e8:	9a a3       	std	Y+34, r25	; 0x22
    45ea:	89 a3       	std	Y+33, r24	; 0x21
    45ec:	3f c0       	rjmp	.+126    	; 0x466c <tempERA+0x7d4>
	else if (__tmp > 65535)
    45ee:	6b a1       	ldd	r22, Y+35	; 0x23
    45f0:	7c a1       	ldd	r23, Y+36	; 0x24
    45f2:	8d a1       	ldd	r24, Y+37	; 0x25
    45f4:	9e a1       	ldd	r25, Y+38	; 0x26
    45f6:	20 e0       	ldi	r18, 0x00	; 0
    45f8:	3f ef       	ldi	r19, 0xFF	; 255
    45fa:	4f e7       	ldi	r20, 0x7F	; 127
    45fc:	57 e4       	ldi	r21, 0x47	; 71
    45fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4602:	18 16       	cp	r1, r24
    4604:	4c f5       	brge	.+82     	; 0x4658 <tempERA+0x7c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4606:	6f a1       	ldd	r22, Y+39	; 0x27
    4608:	78 a5       	ldd	r23, Y+40	; 0x28
    460a:	89 a5       	ldd	r24, Y+41	; 0x29
    460c:	9a a5       	ldd	r25, Y+42	; 0x2a
    460e:	20 e0       	ldi	r18, 0x00	; 0
    4610:	30 e0       	ldi	r19, 0x00	; 0
    4612:	40 e2       	ldi	r20, 0x20	; 32
    4614:	51 e4       	ldi	r21, 0x41	; 65
    4616:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    461a:	dc 01       	movw	r26, r24
    461c:	cb 01       	movw	r24, r22
    461e:	bc 01       	movw	r22, r24
    4620:	cd 01       	movw	r24, r26
    4622:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4626:	dc 01       	movw	r26, r24
    4628:	cb 01       	movw	r24, r22
    462a:	9a a3       	std	Y+34, r25	; 0x22
    462c:	89 a3       	std	Y+33, r24	; 0x21
    462e:	0f c0       	rjmp	.+30     	; 0x464e <tempERA+0x7b6>
    4630:	88 ec       	ldi	r24, 0xC8	; 200
    4632:	90 e0       	ldi	r25, 0x00	; 0
    4634:	98 a3       	std	Y+32, r25	; 0x20
    4636:	8f 8f       	std	Y+31, r24	; 0x1f
    4638:	8f 8d       	ldd	r24, Y+31	; 0x1f
    463a:	98 a1       	ldd	r25, Y+32	; 0x20
    463c:	01 97       	sbiw	r24, 0x01	; 1
    463e:	f1 f7       	brne	.-4      	; 0x463c <tempERA+0x7a4>
    4640:	98 a3       	std	Y+32, r25	; 0x20
    4642:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4644:	89 a1       	ldd	r24, Y+33	; 0x21
    4646:	9a a1       	ldd	r25, Y+34	; 0x22
    4648:	01 97       	sbiw	r24, 0x01	; 1
    464a:	9a a3       	std	Y+34, r25	; 0x22
    464c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    464e:	89 a1       	ldd	r24, Y+33	; 0x21
    4650:	9a a1       	ldd	r25, Y+34	; 0x22
    4652:	00 97       	sbiw	r24, 0x00	; 0
    4654:	69 f7       	brne	.-38     	; 0x4630 <tempERA+0x798>
    4656:	0e c1       	rjmp	.+540    	; 0x4874 <tempERA+0x9dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4658:	6b a1       	ldd	r22, Y+35	; 0x23
    465a:	7c a1       	ldd	r23, Y+36	; 0x24
    465c:	8d a1       	ldd	r24, Y+37	; 0x25
    465e:	9e a1       	ldd	r25, Y+38	; 0x26
    4660:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4664:	dc 01       	movw	r26, r24
    4666:	cb 01       	movw	r24, r22
    4668:	9a a3       	std	Y+34, r25	; 0x22
    466a:	89 a3       	std	Y+33, r24	; 0x21
    466c:	89 a1       	ldd	r24, Y+33	; 0x21
    466e:	9a a1       	ldd	r25, Y+34	; 0x22
    4670:	9e 8f       	std	Y+30, r25	; 0x1e
    4672:	8d 8f       	std	Y+29, r24	; 0x1d
    4674:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4676:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4678:	01 97       	sbiw	r24, 0x01	; 1
    467a:	f1 f7       	brne	.-4      	; 0x4678 <tempERA+0x7e0>
    467c:	9e 8f       	std	Y+30, r25	; 0x1e
    467e:	8d 8f       	std	Y+29, r24	; 0x1d
    4680:	f9 c0       	rjmp	.+498    	; 0x4874 <tempERA+0x9dc>
			_delay_ms(400);
		}
		else if((distance <= 40 )&& (distance > 10 ))
    4682:	80 91 72 01 	lds	r24, 0x0172
    4686:	89 32       	cpi	r24, 0x29	; 41
    4688:	08 f0       	brcs	.+2      	; 0x468c <tempERA+0x7f4>
    468a:	ee c0       	rjmp	.+476    	; 0x4868 <tempERA+0x9d0>
    468c:	80 91 72 01 	lds	r24, 0x0172
    4690:	8b 30       	cpi	r24, 0x0B	; 11
    4692:	08 f4       	brcc	.+2      	; 0x4696 <tempERA+0x7fe>
    4694:	e9 c0       	rjmp	.+466    	; 0x4868 <tempERA+0x9d0>
		{

			Buzzer_on();
    4696:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <Buzzer_on>
    469a:	80 e0       	ldi	r24, 0x00	; 0
    469c:	90 e0       	ldi	r25, 0x00	; 0
    469e:	a8 ec       	ldi	r26, 0xC8	; 200
    46a0:	b2 e4       	ldi	r27, 0x42	; 66
    46a2:	89 8f       	std	Y+25, r24	; 0x19
    46a4:	9a 8f       	std	Y+26, r25	; 0x1a
    46a6:	ab 8f       	std	Y+27, r26	; 0x1b
    46a8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46aa:	69 8d       	ldd	r22, Y+25	; 0x19
    46ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    46ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    46b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    46b2:	20 e0       	ldi	r18, 0x00	; 0
    46b4:	30 e0       	ldi	r19, 0x00	; 0
    46b6:	4a ef       	ldi	r20, 0xFA	; 250
    46b8:	54 e4       	ldi	r21, 0x44	; 68
    46ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46be:	dc 01       	movw	r26, r24
    46c0:	cb 01       	movw	r24, r22
    46c2:	8d 8b       	std	Y+21, r24	; 0x15
    46c4:	9e 8b       	std	Y+22, r25	; 0x16
    46c6:	af 8b       	std	Y+23, r26	; 0x17
    46c8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    46ca:	6d 89       	ldd	r22, Y+21	; 0x15
    46cc:	7e 89       	ldd	r23, Y+22	; 0x16
    46ce:	8f 89       	ldd	r24, Y+23	; 0x17
    46d0:	98 8d       	ldd	r25, Y+24	; 0x18
    46d2:	20 e0       	ldi	r18, 0x00	; 0
    46d4:	30 e0       	ldi	r19, 0x00	; 0
    46d6:	40 e8       	ldi	r20, 0x80	; 128
    46d8:	5f e3       	ldi	r21, 0x3F	; 63
    46da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    46de:	88 23       	and	r24, r24
    46e0:	2c f4       	brge	.+10     	; 0x46ec <tempERA+0x854>
		__ticks = 1;
    46e2:	81 e0       	ldi	r24, 0x01	; 1
    46e4:	90 e0       	ldi	r25, 0x00	; 0
    46e6:	9c 8b       	std	Y+20, r25	; 0x14
    46e8:	8b 8b       	std	Y+19, r24	; 0x13
    46ea:	3f c0       	rjmp	.+126    	; 0x476a <tempERA+0x8d2>
	else if (__tmp > 65535)
    46ec:	6d 89       	ldd	r22, Y+21	; 0x15
    46ee:	7e 89       	ldd	r23, Y+22	; 0x16
    46f0:	8f 89       	ldd	r24, Y+23	; 0x17
    46f2:	98 8d       	ldd	r25, Y+24	; 0x18
    46f4:	20 e0       	ldi	r18, 0x00	; 0
    46f6:	3f ef       	ldi	r19, 0xFF	; 255
    46f8:	4f e7       	ldi	r20, 0x7F	; 127
    46fa:	57 e4       	ldi	r21, 0x47	; 71
    46fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4700:	18 16       	cp	r1, r24
    4702:	4c f5       	brge	.+82     	; 0x4756 <tempERA+0x8be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4704:	69 8d       	ldd	r22, Y+25	; 0x19
    4706:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4708:	8b 8d       	ldd	r24, Y+27	; 0x1b
    470a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    470c:	20 e0       	ldi	r18, 0x00	; 0
    470e:	30 e0       	ldi	r19, 0x00	; 0
    4710:	40 e2       	ldi	r20, 0x20	; 32
    4712:	51 e4       	ldi	r21, 0x41	; 65
    4714:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4718:	dc 01       	movw	r26, r24
    471a:	cb 01       	movw	r24, r22
    471c:	bc 01       	movw	r22, r24
    471e:	cd 01       	movw	r24, r26
    4720:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4724:	dc 01       	movw	r26, r24
    4726:	cb 01       	movw	r24, r22
    4728:	9c 8b       	std	Y+20, r25	; 0x14
    472a:	8b 8b       	std	Y+19, r24	; 0x13
    472c:	0f c0       	rjmp	.+30     	; 0x474c <tempERA+0x8b4>
    472e:	88 ec       	ldi	r24, 0xC8	; 200
    4730:	90 e0       	ldi	r25, 0x00	; 0
    4732:	9a 8b       	std	Y+18, r25	; 0x12
    4734:	89 8b       	std	Y+17, r24	; 0x11
    4736:	89 89       	ldd	r24, Y+17	; 0x11
    4738:	9a 89       	ldd	r25, Y+18	; 0x12
    473a:	01 97       	sbiw	r24, 0x01	; 1
    473c:	f1 f7       	brne	.-4      	; 0x473a <tempERA+0x8a2>
    473e:	9a 8b       	std	Y+18, r25	; 0x12
    4740:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4742:	8b 89       	ldd	r24, Y+19	; 0x13
    4744:	9c 89       	ldd	r25, Y+20	; 0x14
    4746:	01 97       	sbiw	r24, 0x01	; 1
    4748:	9c 8b       	std	Y+20, r25	; 0x14
    474a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    474c:	8b 89       	ldd	r24, Y+19	; 0x13
    474e:	9c 89       	ldd	r25, Y+20	; 0x14
    4750:	00 97       	sbiw	r24, 0x00	; 0
    4752:	69 f7       	brne	.-38     	; 0x472e <tempERA+0x896>
    4754:	14 c0       	rjmp	.+40     	; 0x477e <tempERA+0x8e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4756:	6d 89       	ldd	r22, Y+21	; 0x15
    4758:	7e 89       	ldd	r23, Y+22	; 0x16
    475a:	8f 89       	ldd	r24, Y+23	; 0x17
    475c:	98 8d       	ldd	r25, Y+24	; 0x18
    475e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4762:	dc 01       	movw	r26, r24
    4764:	cb 01       	movw	r24, r22
    4766:	9c 8b       	std	Y+20, r25	; 0x14
    4768:	8b 8b       	std	Y+19, r24	; 0x13
    476a:	8b 89       	ldd	r24, Y+19	; 0x13
    476c:	9c 89       	ldd	r25, Y+20	; 0x14
    476e:	98 8b       	std	Y+16, r25	; 0x10
    4770:	8f 87       	std	Y+15, r24	; 0x0f
    4772:	8f 85       	ldd	r24, Y+15	; 0x0f
    4774:	98 89       	ldd	r25, Y+16	; 0x10
    4776:	01 97       	sbiw	r24, 0x01	; 1
    4778:	f1 f7       	brne	.-4      	; 0x4776 <tempERA+0x8de>
    477a:	98 8b       	std	Y+16, r25	; 0x10
    477c:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(100);
			Buzzer_off();
    477e:	0e 94 89 1c 	call	0x3912	; 0x3912 <Buzzer_off>
    4782:	80 e0       	ldi	r24, 0x00	; 0
    4784:	90 e0       	ldi	r25, 0x00	; 0
    4786:	a8 ec       	ldi	r26, 0xC8	; 200
    4788:	b2 e4       	ldi	r27, 0x42	; 66
    478a:	8b 87       	std	Y+11, r24	; 0x0b
    478c:	9c 87       	std	Y+12, r25	; 0x0c
    478e:	ad 87       	std	Y+13, r26	; 0x0d
    4790:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4792:	6b 85       	ldd	r22, Y+11	; 0x0b
    4794:	7c 85       	ldd	r23, Y+12	; 0x0c
    4796:	8d 85       	ldd	r24, Y+13	; 0x0d
    4798:	9e 85       	ldd	r25, Y+14	; 0x0e
    479a:	20 e0       	ldi	r18, 0x00	; 0
    479c:	30 e0       	ldi	r19, 0x00	; 0
    479e:	4a ef       	ldi	r20, 0xFA	; 250
    47a0:	54 e4       	ldi	r21, 0x44	; 68
    47a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47a6:	dc 01       	movw	r26, r24
    47a8:	cb 01       	movw	r24, r22
    47aa:	8f 83       	std	Y+7, r24	; 0x07
    47ac:	98 87       	std	Y+8, r25	; 0x08
    47ae:	a9 87       	std	Y+9, r26	; 0x09
    47b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    47b2:	6f 81       	ldd	r22, Y+7	; 0x07
    47b4:	78 85       	ldd	r23, Y+8	; 0x08
    47b6:	89 85       	ldd	r24, Y+9	; 0x09
    47b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    47ba:	20 e0       	ldi	r18, 0x00	; 0
    47bc:	30 e0       	ldi	r19, 0x00	; 0
    47be:	40 e8       	ldi	r20, 0x80	; 128
    47c0:	5f e3       	ldi	r21, 0x3F	; 63
    47c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    47c6:	88 23       	and	r24, r24
    47c8:	2c f4       	brge	.+10     	; 0x47d4 <tempERA+0x93c>
		__ticks = 1;
    47ca:	81 e0       	ldi	r24, 0x01	; 1
    47cc:	90 e0       	ldi	r25, 0x00	; 0
    47ce:	9e 83       	std	Y+6, r25	; 0x06
    47d0:	8d 83       	std	Y+5, r24	; 0x05
    47d2:	3f c0       	rjmp	.+126    	; 0x4852 <tempERA+0x9ba>
	else if (__tmp > 65535)
    47d4:	6f 81       	ldd	r22, Y+7	; 0x07
    47d6:	78 85       	ldd	r23, Y+8	; 0x08
    47d8:	89 85       	ldd	r24, Y+9	; 0x09
    47da:	9a 85       	ldd	r25, Y+10	; 0x0a
    47dc:	20 e0       	ldi	r18, 0x00	; 0
    47de:	3f ef       	ldi	r19, 0xFF	; 255
    47e0:	4f e7       	ldi	r20, 0x7F	; 127
    47e2:	57 e4       	ldi	r21, 0x47	; 71
    47e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    47e8:	18 16       	cp	r1, r24
    47ea:	4c f5       	brge	.+82     	; 0x483e <tempERA+0x9a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    47ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    47f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    47f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    47f4:	20 e0       	ldi	r18, 0x00	; 0
    47f6:	30 e0       	ldi	r19, 0x00	; 0
    47f8:	40 e2       	ldi	r20, 0x20	; 32
    47fa:	51 e4       	ldi	r21, 0x41	; 65
    47fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4800:	dc 01       	movw	r26, r24
    4802:	cb 01       	movw	r24, r22
    4804:	bc 01       	movw	r22, r24
    4806:	cd 01       	movw	r24, r26
    4808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    480c:	dc 01       	movw	r26, r24
    480e:	cb 01       	movw	r24, r22
    4810:	9e 83       	std	Y+6, r25	; 0x06
    4812:	8d 83       	std	Y+5, r24	; 0x05
    4814:	0f c0       	rjmp	.+30     	; 0x4834 <tempERA+0x99c>
    4816:	88 ec       	ldi	r24, 0xC8	; 200
    4818:	90 e0       	ldi	r25, 0x00	; 0
    481a:	9c 83       	std	Y+4, r25	; 0x04
    481c:	8b 83       	std	Y+3, r24	; 0x03
    481e:	8b 81       	ldd	r24, Y+3	; 0x03
    4820:	9c 81       	ldd	r25, Y+4	; 0x04
    4822:	01 97       	sbiw	r24, 0x01	; 1
    4824:	f1 f7       	brne	.-4      	; 0x4822 <tempERA+0x98a>
    4826:	9c 83       	std	Y+4, r25	; 0x04
    4828:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    482a:	8d 81       	ldd	r24, Y+5	; 0x05
    482c:	9e 81       	ldd	r25, Y+6	; 0x06
    482e:	01 97       	sbiw	r24, 0x01	; 1
    4830:	9e 83       	std	Y+6, r25	; 0x06
    4832:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4834:	8d 81       	ldd	r24, Y+5	; 0x05
    4836:	9e 81       	ldd	r25, Y+6	; 0x06
    4838:	00 97       	sbiw	r24, 0x00	; 0
    483a:	69 f7       	brne	.-38     	; 0x4816 <tempERA+0x97e>
    483c:	1b c0       	rjmp	.+54     	; 0x4874 <tempERA+0x9dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    483e:	6f 81       	ldd	r22, Y+7	; 0x07
    4840:	78 85       	ldd	r23, Y+8	; 0x08
    4842:	89 85       	ldd	r24, Y+9	; 0x09
    4844:	9a 85       	ldd	r25, Y+10	; 0x0a
    4846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    484a:	dc 01       	movw	r26, r24
    484c:	cb 01       	movw	r24, r22
    484e:	9e 83       	std	Y+6, r25	; 0x06
    4850:	8d 83       	std	Y+5, r24	; 0x05
    4852:	8d 81       	ldd	r24, Y+5	; 0x05
    4854:	9e 81       	ldd	r25, Y+6	; 0x06
    4856:	9a 83       	std	Y+2, r25	; 0x02
    4858:	89 83       	std	Y+1, r24	; 0x01
    485a:	89 81       	ldd	r24, Y+1	; 0x01
    485c:	9a 81       	ldd	r25, Y+2	; 0x02
    485e:	01 97       	sbiw	r24, 0x01	; 1
    4860:	f1 f7       	brne	.-4      	; 0x485e <tempERA+0x9c6>
    4862:	9a 83       	std	Y+2, r25	; 0x02
    4864:	89 83       	std	Y+1, r24	; 0x01
    4866:	06 c0       	rjmp	.+12     	; 0x4874 <tempERA+0x9dc>
			_delay_ms(100);
		}
		else if((distance <= 10 )&& (distance >=0 ))
    4868:	80 91 72 01 	lds	r24, 0x0172
    486c:	8b 30       	cpi	r24, 0x0B	; 11
    486e:	10 f4       	brcc	.+4      	; 0x4874 <tempERA+0x9dc>
		{

			Buzzer_on();
    4870:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <Buzzer_on>
		}


		LCD_moveCursor(0, 11);
    4874:	80 e0       	ldi	r24, 0x00	; 0
    4876:	6b e0       	ldi	r22, 0x0B	; 11
    4878:	0e 94 43 1b 	call	0x3686	; 0x3686 <LCD_moveCursor>
		LCD_intgerToString(temp);
    487c:	80 91 80 01 	lds	r24, 0x0180
    4880:	88 2f       	mov	r24, r24
    4882:	90 e0       	ldi	r25, 0x00	; 0
    4884:	0e 94 9e 1b 	call	0x373c	; 0x373c <LCD_intgerToString>
		LCD_DisplayChar(' ');
    4888:	80 e2       	ldi	r24, 0x20	; 32
    488a:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <LCD_DisplayChar>
    488e:	d4 cb       	rjmp	.-2136   	; 0x4038 <tempERA+0x1a0>

00004890 <main>:

#include "APP/control.h"



int main(void){
    4890:	df 93       	push	r29
    4892:	cf 93       	push	r28
    4894:	cd b7       	in	r28, 0x3d	; 61
    4896:	de b7       	in	r29, 0x3e	; 62
    4898:	a0 97       	sbiw	r28, 0x20	; 32
    489a:	0f b6       	in	r0, 0x3f	; 63
    489c:	f8 94       	cli
    489e:	de bf       	out	0x3e, r29	; 62
    48a0:	0f be       	out	0x3f, r0	; 63
    48a2:	cd bf       	out	0x3d, r28	; 61
	start();
    48a4:	0e 94 95 1c 	call	0x392a	; 0x392a <start>
    48a8:	80 e0       	ldi	r24, 0x00	; 0
    48aa:	90 e0       	ldi	r25, 0x00	; 0
    48ac:	a8 e4       	ldi	r26, 0x48	; 72
    48ae:	b2 e4       	ldi	r27, 0x42	; 66
    48b0:	89 8f       	std	Y+25, r24	; 0x19
    48b2:	9a 8f       	std	Y+26, r25	; 0x1a
    48b4:	ab 8f       	std	Y+27, r26	; 0x1b
    48b6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48b8:	69 8d       	ldd	r22, Y+25	; 0x19
    48ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    48bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    48be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    48c0:	20 e0       	ldi	r18, 0x00	; 0
    48c2:	30 e0       	ldi	r19, 0x00	; 0
    48c4:	4a ef       	ldi	r20, 0xFA	; 250
    48c6:	54 e4       	ldi	r21, 0x44	; 68
    48c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48cc:	dc 01       	movw	r26, r24
    48ce:	cb 01       	movw	r24, r22
    48d0:	8d 8b       	std	Y+21, r24	; 0x15
    48d2:	9e 8b       	std	Y+22, r25	; 0x16
    48d4:	af 8b       	std	Y+23, r26	; 0x17
    48d6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    48d8:	6d 89       	ldd	r22, Y+21	; 0x15
    48da:	7e 89       	ldd	r23, Y+22	; 0x16
    48dc:	8f 89       	ldd	r24, Y+23	; 0x17
    48de:	98 8d       	ldd	r25, Y+24	; 0x18
    48e0:	20 e0       	ldi	r18, 0x00	; 0
    48e2:	30 e0       	ldi	r19, 0x00	; 0
    48e4:	40 e8       	ldi	r20, 0x80	; 128
    48e6:	5f e3       	ldi	r21, 0x3F	; 63
    48e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    48ec:	88 23       	and	r24, r24
    48ee:	2c f4       	brge	.+10     	; 0x48fa <main+0x6a>
		__ticks = 1;
    48f0:	81 e0       	ldi	r24, 0x01	; 1
    48f2:	90 e0       	ldi	r25, 0x00	; 0
    48f4:	9c 8b       	std	Y+20, r25	; 0x14
    48f6:	8b 8b       	std	Y+19, r24	; 0x13
    48f8:	3f c0       	rjmp	.+126    	; 0x4978 <main+0xe8>
	else if (__tmp > 65535)
    48fa:	6d 89       	ldd	r22, Y+21	; 0x15
    48fc:	7e 89       	ldd	r23, Y+22	; 0x16
    48fe:	8f 89       	ldd	r24, Y+23	; 0x17
    4900:	98 8d       	ldd	r25, Y+24	; 0x18
    4902:	20 e0       	ldi	r18, 0x00	; 0
    4904:	3f ef       	ldi	r19, 0xFF	; 255
    4906:	4f e7       	ldi	r20, 0x7F	; 127
    4908:	57 e4       	ldi	r21, 0x47	; 71
    490a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    490e:	18 16       	cp	r1, r24
    4910:	4c f5       	brge	.+82     	; 0x4964 <main+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4912:	69 8d       	ldd	r22, Y+25	; 0x19
    4914:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4916:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4918:	9c 8d       	ldd	r25, Y+28	; 0x1c
    491a:	20 e0       	ldi	r18, 0x00	; 0
    491c:	30 e0       	ldi	r19, 0x00	; 0
    491e:	40 e2       	ldi	r20, 0x20	; 32
    4920:	51 e4       	ldi	r21, 0x41	; 65
    4922:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4926:	dc 01       	movw	r26, r24
    4928:	cb 01       	movw	r24, r22
    492a:	bc 01       	movw	r22, r24
    492c:	cd 01       	movw	r24, r26
    492e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4932:	dc 01       	movw	r26, r24
    4934:	cb 01       	movw	r24, r22
    4936:	9c 8b       	std	Y+20, r25	; 0x14
    4938:	8b 8b       	std	Y+19, r24	; 0x13
    493a:	0f c0       	rjmp	.+30     	; 0x495a <main+0xca>
    493c:	88 ec       	ldi	r24, 0xC8	; 200
    493e:	90 e0       	ldi	r25, 0x00	; 0
    4940:	9a 8b       	std	Y+18, r25	; 0x12
    4942:	89 8b       	std	Y+17, r24	; 0x11
    4944:	89 89       	ldd	r24, Y+17	; 0x11
    4946:	9a 89       	ldd	r25, Y+18	; 0x12
    4948:	01 97       	sbiw	r24, 0x01	; 1
    494a:	f1 f7       	brne	.-4      	; 0x4948 <main+0xb8>
    494c:	9a 8b       	std	Y+18, r25	; 0x12
    494e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4950:	8b 89       	ldd	r24, Y+19	; 0x13
    4952:	9c 89       	ldd	r25, Y+20	; 0x14
    4954:	01 97       	sbiw	r24, 0x01	; 1
    4956:	9c 8b       	std	Y+20, r25	; 0x14
    4958:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    495a:	8b 89       	ldd	r24, Y+19	; 0x13
    495c:	9c 89       	ldd	r25, Y+20	; 0x14
    495e:	00 97       	sbiw	r24, 0x00	; 0
    4960:	69 f7       	brne	.-38     	; 0x493c <main+0xac>
    4962:	14 c0       	rjmp	.+40     	; 0x498c <main+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4964:	6d 89       	ldd	r22, Y+21	; 0x15
    4966:	7e 89       	ldd	r23, Y+22	; 0x16
    4968:	8f 89       	ldd	r24, Y+23	; 0x17
    496a:	98 8d       	ldd	r25, Y+24	; 0x18
    496c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4970:	dc 01       	movw	r26, r24
    4972:	cb 01       	movw	r24, r22
    4974:	9c 8b       	std	Y+20, r25	; 0x14
    4976:	8b 8b       	std	Y+19, r24	; 0x13
    4978:	8b 89       	ldd	r24, Y+19	; 0x13
    497a:	9c 89       	ldd	r25, Y+20	; 0x14
    497c:	98 8b       	std	Y+16, r25	; 0x10
    497e:	8f 87       	std	Y+15, r24	; 0x0f
    4980:	8f 85       	ldd	r24, Y+15	; 0x0f
    4982:	98 89       	ldd	r25, Y+16	; 0x10
    4984:	01 97       	sbiw	r24, 0x01	; 1
    4986:	f1 f7       	brne	.-4      	; 0x4984 <main+0xf4>
    4988:	98 8b       	std	Y+16, r25	; 0x10
    498a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);
	while(1){
		switch (UART_recieveByte()){
    498c:	0e 94 be 07 	call	0xf7c	; 0xf7c <UART_recieveByte>
    4990:	28 2f       	mov	r18, r24
    4992:	30 e0       	ldi	r19, 0x00	; 0
    4994:	38 a3       	std	Y+32, r19	; 0x20
    4996:	2f 8f       	std	Y+31, r18	; 0x1f
    4998:	8f 8d       	ldd	r24, Y+31	; 0x1f
    499a:	98 a1       	ldd	r25, Y+32	; 0x20
    499c:	82 30       	cpi	r24, 0x02	; 2
    499e:	91 05       	cpc	r25, r1
    49a0:	c9 f0       	breq	.+50     	; 0x49d4 <main+0x144>
    49a2:	2f 8d       	ldd	r18, Y+31	; 0x1f
    49a4:	38 a1       	ldd	r19, Y+32	; 0x20
    49a6:	23 30       	cpi	r18, 0x03	; 3
    49a8:	31 05       	cpc	r19, r1
    49aa:	34 f4       	brge	.+12     	; 0x49b8 <main+0x128>
    49ac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    49ae:	98 a1       	ldd	r25, Y+32	; 0x20
    49b0:	81 30       	cpi	r24, 0x01	; 1
    49b2:	91 05       	cpc	r25, r1
    49b4:	61 f0       	breq	.+24     	; 0x49ce <main+0x13e>
    49b6:	ea cf       	rjmp	.-44     	; 0x498c <main+0xfc>
    49b8:	2f 8d       	ldd	r18, Y+31	; 0x1f
    49ba:	38 a1       	ldd	r19, Y+32	; 0x20
    49bc:	23 30       	cpi	r18, 0x03	; 3
    49be:	31 05       	cpc	r19, r1
    49c0:	61 f0       	breq	.+24     	; 0x49da <main+0x14a>
    49c2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    49c4:	98 a1       	ldd	r25, Y+32	; 0x20
    49c6:	87 30       	cpi	r24, 0x07	; 7
    49c8:	91 05       	cpc	r25, r1
    49ca:	69 f0       	breq	.+26     	; 0x49e6 <main+0x156>
    49cc:	df cf       	rjmp	.-66     	; 0x498c <main+0xfc>

		case RECEIVEPASS:
			receive_pass();
    49ce:	0e 94 de 1c 	call	0x39bc	; 0x39bc <receive_pass>
    49d2:	dc cf       	rjmp	.-72     	; 0x498c <main+0xfc>
			break;

		case CHECK_PASS:
			check_pass();
    49d4:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <check_pass>
    49d8:	d9 cf       	rjmp	.-78     	; 0x498c <main+0xfc>
			break;

		case OPENENGINE:
			DcMotor_Rotate(CLOCKWISE);
    49da:	81 e0       	ldi	r24, 0x01	; 1
    49dc:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <DcMotor_Rotate>
			tempERA();
    49e0:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <tempERA>
    49e4:	d3 cf       	rjmp	.-90     	; 0x498c <main+0xfc>
			break;

		case BUZZERON:
			Buzzer_on();
    49e6:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <Buzzer_on>
			for (int var = 0; var < 15; var++) {
    49ea:	1e 8e       	std	Y+30, r1	; 0x1e
    49ec:	1d 8e       	std	Y+29, r1	; 0x1d
    49ee:	77 c0       	rjmp	.+238    	; 0x4ade <main+0x24e>
    49f0:	80 e0       	ldi	r24, 0x00	; 0
    49f2:	90 e0       	ldi	r25, 0x00	; 0
    49f4:	aa e7       	ldi	r26, 0x7A	; 122
    49f6:	b4 e4       	ldi	r27, 0x44	; 68
    49f8:	8b 87       	std	Y+11, r24	; 0x0b
    49fa:	9c 87       	std	Y+12, r25	; 0x0c
    49fc:	ad 87       	std	Y+13, r26	; 0x0d
    49fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a00:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a02:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a04:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a06:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a08:	20 e0       	ldi	r18, 0x00	; 0
    4a0a:	30 e0       	ldi	r19, 0x00	; 0
    4a0c:	4a ef       	ldi	r20, 0xFA	; 250
    4a0e:	54 e4       	ldi	r21, 0x44	; 68
    4a10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a14:	dc 01       	movw	r26, r24
    4a16:	cb 01       	movw	r24, r22
    4a18:	8f 83       	std	Y+7, r24	; 0x07
    4a1a:	98 87       	std	Y+8, r25	; 0x08
    4a1c:	a9 87       	std	Y+9, r26	; 0x09
    4a1e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4a20:	6f 81       	ldd	r22, Y+7	; 0x07
    4a22:	78 85       	ldd	r23, Y+8	; 0x08
    4a24:	89 85       	ldd	r24, Y+9	; 0x09
    4a26:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a28:	20 e0       	ldi	r18, 0x00	; 0
    4a2a:	30 e0       	ldi	r19, 0x00	; 0
    4a2c:	40 e8       	ldi	r20, 0x80	; 128
    4a2e:	5f e3       	ldi	r21, 0x3F	; 63
    4a30:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a34:	88 23       	and	r24, r24
    4a36:	2c f4       	brge	.+10     	; 0x4a42 <main+0x1b2>
		__ticks = 1;
    4a38:	81 e0       	ldi	r24, 0x01	; 1
    4a3a:	90 e0       	ldi	r25, 0x00	; 0
    4a3c:	9e 83       	std	Y+6, r25	; 0x06
    4a3e:	8d 83       	std	Y+5, r24	; 0x05
    4a40:	3f c0       	rjmp	.+126    	; 0x4ac0 <main+0x230>
	else if (__tmp > 65535)
    4a42:	6f 81       	ldd	r22, Y+7	; 0x07
    4a44:	78 85       	ldd	r23, Y+8	; 0x08
    4a46:	89 85       	ldd	r24, Y+9	; 0x09
    4a48:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a4a:	20 e0       	ldi	r18, 0x00	; 0
    4a4c:	3f ef       	ldi	r19, 0xFF	; 255
    4a4e:	4f e7       	ldi	r20, 0x7F	; 127
    4a50:	57 e4       	ldi	r21, 0x47	; 71
    4a52:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a56:	18 16       	cp	r1, r24
    4a58:	4c f5       	brge	.+82     	; 0x4aac <main+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a60:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a62:	20 e0       	ldi	r18, 0x00	; 0
    4a64:	30 e0       	ldi	r19, 0x00	; 0
    4a66:	40 e2       	ldi	r20, 0x20	; 32
    4a68:	51 e4       	ldi	r21, 0x41	; 65
    4a6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a6e:	dc 01       	movw	r26, r24
    4a70:	cb 01       	movw	r24, r22
    4a72:	bc 01       	movw	r22, r24
    4a74:	cd 01       	movw	r24, r26
    4a76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a7a:	dc 01       	movw	r26, r24
    4a7c:	cb 01       	movw	r24, r22
    4a7e:	9e 83       	std	Y+6, r25	; 0x06
    4a80:	8d 83       	std	Y+5, r24	; 0x05
    4a82:	0f c0       	rjmp	.+30     	; 0x4aa2 <main+0x212>
    4a84:	88 ec       	ldi	r24, 0xC8	; 200
    4a86:	90 e0       	ldi	r25, 0x00	; 0
    4a88:	9c 83       	std	Y+4, r25	; 0x04
    4a8a:	8b 83       	std	Y+3, r24	; 0x03
    4a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    4a8e:	9c 81       	ldd	r25, Y+4	; 0x04
    4a90:	01 97       	sbiw	r24, 0x01	; 1
    4a92:	f1 f7       	brne	.-4      	; 0x4a90 <main+0x200>
    4a94:	9c 83       	std	Y+4, r25	; 0x04
    4a96:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a98:	8d 81       	ldd	r24, Y+5	; 0x05
    4a9a:	9e 81       	ldd	r25, Y+6	; 0x06
    4a9c:	01 97       	sbiw	r24, 0x01	; 1
    4a9e:	9e 83       	std	Y+6, r25	; 0x06
    4aa0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4aa2:	8d 81       	ldd	r24, Y+5	; 0x05
    4aa4:	9e 81       	ldd	r25, Y+6	; 0x06
    4aa6:	00 97       	sbiw	r24, 0x00	; 0
    4aa8:	69 f7       	brne	.-38     	; 0x4a84 <main+0x1f4>
    4aaa:	14 c0       	rjmp	.+40     	; 0x4ad4 <main+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4aac:	6f 81       	ldd	r22, Y+7	; 0x07
    4aae:	78 85       	ldd	r23, Y+8	; 0x08
    4ab0:	89 85       	ldd	r24, Y+9	; 0x09
    4ab2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ab4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ab8:	dc 01       	movw	r26, r24
    4aba:	cb 01       	movw	r24, r22
    4abc:	9e 83       	std	Y+6, r25	; 0x06
    4abe:	8d 83       	std	Y+5, r24	; 0x05
    4ac0:	8d 81       	ldd	r24, Y+5	; 0x05
    4ac2:	9e 81       	ldd	r25, Y+6	; 0x06
    4ac4:	9a 83       	std	Y+2, r25	; 0x02
    4ac6:	89 83       	std	Y+1, r24	; 0x01
    4ac8:	89 81       	ldd	r24, Y+1	; 0x01
    4aca:	9a 81       	ldd	r25, Y+2	; 0x02
    4acc:	01 97       	sbiw	r24, 0x01	; 1
    4ace:	f1 f7       	brne	.-4      	; 0x4acc <main+0x23c>
    4ad0:	9a 83       	std	Y+2, r25	; 0x02
    4ad2:	89 83       	std	Y+1, r24	; 0x01
    4ad4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4ad6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4ad8:	01 96       	adiw	r24, 0x01	; 1
    4ada:	9e 8f       	std	Y+30, r25	; 0x1e
    4adc:	8d 8f       	std	Y+29, r24	; 0x1d
    4ade:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4ae0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4ae2:	8f 30       	cpi	r24, 0x0F	; 15
    4ae4:	91 05       	cpc	r25, r1
    4ae6:	0c f4       	brge	.+2      	; 0x4aea <main+0x25a>
    4ae8:	83 cf       	rjmp	.-250    	; 0x49f0 <main+0x160>
				_delay_ms(1000);
			}
			Buzzer_off();
    4aea:	0e 94 89 1c 	call	0x3912	; 0x3912 <Buzzer_off>
    4aee:	4e cf       	rjmp	.-356    	; 0x498c <main+0xfc>

00004af0 <__mulsi3>:
    4af0:	62 9f       	mul	r22, r18
    4af2:	d0 01       	movw	r26, r0
    4af4:	73 9f       	mul	r23, r19
    4af6:	f0 01       	movw	r30, r0
    4af8:	82 9f       	mul	r24, r18
    4afa:	e0 0d       	add	r30, r0
    4afc:	f1 1d       	adc	r31, r1
    4afe:	64 9f       	mul	r22, r20
    4b00:	e0 0d       	add	r30, r0
    4b02:	f1 1d       	adc	r31, r1
    4b04:	92 9f       	mul	r25, r18
    4b06:	f0 0d       	add	r31, r0
    4b08:	83 9f       	mul	r24, r19
    4b0a:	f0 0d       	add	r31, r0
    4b0c:	74 9f       	mul	r23, r20
    4b0e:	f0 0d       	add	r31, r0
    4b10:	65 9f       	mul	r22, r21
    4b12:	f0 0d       	add	r31, r0
    4b14:	99 27       	eor	r25, r25
    4b16:	72 9f       	mul	r23, r18
    4b18:	b0 0d       	add	r27, r0
    4b1a:	e1 1d       	adc	r30, r1
    4b1c:	f9 1f       	adc	r31, r25
    4b1e:	63 9f       	mul	r22, r19
    4b20:	b0 0d       	add	r27, r0
    4b22:	e1 1d       	adc	r30, r1
    4b24:	f9 1f       	adc	r31, r25
    4b26:	bd 01       	movw	r22, r26
    4b28:	cf 01       	movw	r24, r30
    4b2a:	11 24       	eor	r1, r1
    4b2c:	08 95       	ret

00004b2e <__udivmodsi4>:
    4b2e:	a1 e2       	ldi	r26, 0x21	; 33
    4b30:	1a 2e       	mov	r1, r26
    4b32:	aa 1b       	sub	r26, r26
    4b34:	bb 1b       	sub	r27, r27
    4b36:	fd 01       	movw	r30, r26
    4b38:	0d c0       	rjmp	.+26     	; 0x4b54 <__udivmodsi4_ep>

00004b3a <__udivmodsi4_loop>:
    4b3a:	aa 1f       	adc	r26, r26
    4b3c:	bb 1f       	adc	r27, r27
    4b3e:	ee 1f       	adc	r30, r30
    4b40:	ff 1f       	adc	r31, r31
    4b42:	a2 17       	cp	r26, r18
    4b44:	b3 07       	cpc	r27, r19
    4b46:	e4 07       	cpc	r30, r20
    4b48:	f5 07       	cpc	r31, r21
    4b4a:	20 f0       	brcs	.+8      	; 0x4b54 <__udivmodsi4_ep>
    4b4c:	a2 1b       	sub	r26, r18
    4b4e:	b3 0b       	sbc	r27, r19
    4b50:	e4 0b       	sbc	r30, r20
    4b52:	f5 0b       	sbc	r31, r21

00004b54 <__udivmodsi4_ep>:
    4b54:	66 1f       	adc	r22, r22
    4b56:	77 1f       	adc	r23, r23
    4b58:	88 1f       	adc	r24, r24
    4b5a:	99 1f       	adc	r25, r25
    4b5c:	1a 94       	dec	r1
    4b5e:	69 f7       	brne	.-38     	; 0x4b3a <__udivmodsi4_loop>
    4b60:	60 95       	com	r22
    4b62:	70 95       	com	r23
    4b64:	80 95       	com	r24
    4b66:	90 95       	com	r25
    4b68:	9b 01       	movw	r18, r22
    4b6a:	ac 01       	movw	r20, r24
    4b6c:	bd 01       	movw	r22, r26
    4b6e:	cf 01       	movw	r24, r30
    4b70:	08 95       	ret

00004b72 <__prologue_saves__>:
    4b72:	2f 92       	push	r2
    4b74:	3f 92       	push	r3
    4b76:	4f 92       	push	r4
    4b78:	5f 92       	push	r5
    4b7a:	6f 92       	push	r6
    4b7c:	7f 92       	push	r7
    4b7e:	8f 92       	push	r8
    4b80:	9f 92       	push	r9
    4b82:	af 92       	push	r10
    4b84:	bf 92       	push	r11
    4b86:	cf 92       	push	r12
    4b88:	df 92       	push	r13
    4b8a:	ef 92       	push	r14
    4b8c:	ff 92       	push	r15
    4b8e:	0f 93       	push	r16
    4b90:	1f 93       	push	r17
    4b92:	cf 93       	push	r28
    4b94:	df 93       	push	r29
    4b96:	cd b7       	in	r28, 0x3d	; 61
    4b98:	de b7       	in	r29, 0x3e	; 62
    4b9a:	ca 1b       	sub	r28, r26
    4b9c:	db 0b       	sbc	r29, r27
    4b9e:	0f b6       	in	r0, 0x3f	; 63
    4ba0:	f8 94       	cli
    4ba2:	de bf       	out	0x3e, r29	; 62
    4ba4:	0f be       	out	0x3f, r0	; 63
    4ba6:	cd bf       	out	0x3d, r28	; 61
    4ba8:	09 94       	ijmp

00004baa <__epilogue_restores__>:
    4baa:	2a 88       	ldd	r2, Y+18	; 0x12
    4bac:	39 88       	ldd	r3, Y+17	; 0x11
    4bae:	48 88       	ldd	r4, Y+16	; 0x10
    4bb0:	5f 84       	ldd	r5, Y+15	; 0x0f
    4bb2:	6e 84       	ldd	r6, Y+14	; 0x0e
    4bb4:	7d 84       	ldd	r7, Y+13	; 0x0d
    4bb6:	8c 84       	ldd	r8, Y+12	; 0x0c
    4bb8:	9b 84       	ldd	r9, Y+11	; 0x0b
    4bba:	aa 84       	ldd	r10, Y+10	; 0x0a
    4bbc:	b9 84       	ldd	r11, Y+9	; 0x09
    4bbe:	c8 84       	ldd	r12, Y+8	; 0x08
    4bc0:	df 80       	ldd	r13, Y+7	; 0x07
    4bc2:	ee 80       	ldd	r14, Y+6	; 0x06
    4bc4:	fd 80       	ldd	r15, Y+5	; 0x05
    4bc6:	0c 81       	ldd	r16, Y+4	; 0x04
    4bc8:	1b 81       	ldd	r17, Y+3	; 0x03
    4bca:	aa 81       	ldd	r26, Y+2	; 0x02
    4bcc:	b9 81       	ldd	r27, Y+1	; 0x01
    4bce:	ce 0f       	add	r28, r30
    4bd0:	d1 1d       	adc	r29, r1
    4bd2:	0f b6       	in	r0, 0x3f	; 63
    4bd4:	f8 94       	cli
    4bd6:	de bf       	out	0x3e, r29	; 62
    4bd8:	0f be       	out	0x3f, r0	; 63
    4bda:	cd bf       	out	0x3d, r28	; 61
    4bdc:	ed 01       	movw	r28, r26
    4bde:	08 95       	ret

00004be0 <itoa>:
    4be0:	fb 01       	movw	r30, r22
    4be2:	9f 01       	movw	r18, r30
    4be4:	e8 94       	clt
    4be6:	42 30       	cpi	r20, 0x02	; 2
    4be8:	c4 f0       	brlt	.+48     	; 0x4c1a <itoa+0x3a>
    4bea:	45 32       	cpi	r20, 0x25	; 37
    4bec:	b4 f4       	brge	.+44     	; 0x4c1a <itoa+0x3a>
    4bee:	4a 30       	cpi	r20, 0x0A	; 10
    4bf0:	29 f4       	brne	.+10     	; 0x4bfc <itoa+0x1c>
    4bf2:	97 fb       	bst	r25, 7
    4bf4:	1e f4       	brtc	.+6      	; 0x4bfc <itoa+0x1c>
    4bf6:	90 95       	com	r25
    4bf8:	81 95       	neg	r24
    4bfa:	9f 4f       	sbci	r25, 0xFF	; 255
    4bfc:	64 2f       	mov	r22, r20
    4bfe:	77 27       	eor	r23, r23
    4c00:	0e 94 21 26 	call	0x4c42	; 0x4c42 <__udivmodhi4>
    4c04:	80 5d       	subi	r24, 0xD0	; 208
    4c06:	8a 33       	cpi	r24, 0x3A	; 58
    4c08:	0c f0       	brlt	.+2      	; 0x4c0c <itoa+0x2c>
    4c0a:	89 5d       	subi	r24, 0xD9	; 217
    4c0c:	81 93       	st	Z+, r24
    4c0e:	cb 01       	movw	r24, r22
    4c10:	00 97       	sbiw	r24, 0x00	; 0
    4c12:	a1 f7       	brne	.-24     	; 0x4bfc <itoa+0x1c>
    4c14:	16 f4       	brtc	.+4      	; 0x4c1a <itoa+0x3a>
    4c16:	5d e2       	ldi	r21, 0x2D	; 45
    4c18:	51 93       	st	Z+, r21
    4c1a:	10 82       	st	Z, r1
    4c1c:	c9 01       	movw	r24, r18
    4c1e:	0c 94 11 26 	jmp	0x4c22	; 0x4c22 <strrev>

00004c22 <strrev>:
    4c22:	dc 01       	movw	r26, r24
    4c24:	fc 01       	movw	r30, r24
    4c26:	67 2f       	mov	r22, r23
    4c28:	71 91       	ld	r23, Z+
    4c2a:	77 23       	and	r23, r23
    4c2c:	e1 f7       	brne	.-8      	; 0x4c26 <strrev+0x4>
    4c2e:	32 97       	sbiw	r30, 0x02	; 2
    4c30:	04 c0       	rjmp	.+8      	; 0x4c3a <strrev+0x18>
    4c32:	7c 91       	ld	r23, X
    4c34:	6d 93       	st	X+, r22
    4c36:	70 83       	st	Z, r23
    4c38:	62 91       	ld	r22, -Z
    4c3a:	ae 17       	cp	r26, r30
    4c3c:	bf 07       	cpc	r27, r31
    4c3e:	c8 f3       	brcs	.-14     	; 0x4c32 <strrev+0x10>
    4c40:	08 95       	ret

00004c42 <__udivmodhi4>:
    4c42:	aa 1b       	sub	r26, r26
    4c44:	bb 1b       	sub	r27, r27
    4c46:	51 e1       	ldi	r21, 0x11	; 17
    4c48:	07 c0       	rjmp	.+14     	; 0x4c58 <__udivmodhi4_ep>

00004c4a <__udivmodhi4_loop>:
    4c4a:	aa 1f       	adc	r26, r26
    4c4c:	bb 1f       	adc	r27, r27
    4c4e:	a6 17       	cp	r26, r22
    4c50:	b7 07       	cpc	r27, r23
    4c52:	10 f0       	brcs	.+4      	; 0x4c58 <__udivmodhi4_ep>
    4c54:	a6 1b       	sub	r26, r22
    4c56:	b7 0b       	sbc	r27, r23

00004c58 <__udivmodhi4_ep>:
    4c58:	88 1f       	adc	r24, r24
    4c5a:	99 1f       	adc	r25, r25
    4c5c:	5a 95       	dec	r21
    4c5e:	a9 f7       	brne	.-22     	; 0x4c4a <__udivmodhi4_loop>
    4c60:	80 95       	com	r24
    4c62:	90 95       	com	r25
    4c64:	bc 01       	movw	r22, r24
    4c66:	cd 01       	movw	r24, r26
    4c68:	08 95       	ret

00004c6a <_exit>:
    4c6a:	f8 94       	cli

00004c6c <__stop_program>:
    4c6c:	ff cf       	rjmp	.-2      	; 0x4c6c <__stop_program>
