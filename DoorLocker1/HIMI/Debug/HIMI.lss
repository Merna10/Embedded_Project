
HIMI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000037ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007c  00800060  000037ce  00003862  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  008000dc  008000dc  000038de  2**0
                  ALLOC
  3 .stab         000036c0  00000000  00000000  000038e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001812  00000000  00000000  00006fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000087b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000088f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008a62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a6ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b596  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c344  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c4a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c731  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ceff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 d6 05 	jmp	0xbac	; 0xbac <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ec       	ldi	r30, 0xCE	; 206
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3d       	cpi	r26, 0xDC	; 220
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac ed       	ldi	r26, 0xDC	; 220
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3e       	cpi	r26, 0xEF	; 239
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c4 1a 	call	0x3588	; 0x3588 <main>
      8a:	0c 94 e5 1b 	jmp	0x37ca	; 0x37ca <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 69 1b 	jmp	0x36d2	; 0x36d2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 ec       	ldi	r26, 0xC7	; 199
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 85 1b 	jmp	0x370a	; 0x370a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 75 1b 	jmp	0x36ea	; 0x36ea <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 91 1b 	jmp	0x3722	; 0x3722 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 75 1b 	jmp	0x36ea	; 0x36ea <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 91 1b 	jmp	0x3722	; 0x3722 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 69 1b 	jmp	0x36d2	; 0x36d2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 ec       	ldi	r24, 0xC7	; 199
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 85 1b 	jmp	0x370a	; 0x370a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 75 1b 	jmp	0x36ea	; 0x36ea <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 91 1b 	jmp	0x3722	; 0x3722 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 75 1b 	jmp	0x36ea	; 0x36ea <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 91 1b 	jmp	0x3722	; 0x3722 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 75 1b 	jmp	0x36ea	; 0x36ea <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 91 1b 	jmp	0x3722	; 0x3722 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 79 1b 	jmp	0x36f2	; 0x36f2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 95 1b 	jmp	0x372a	; 0x372a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_9>:
#include <avr/io.h>
#include <avr/interrupt.h>

static void (*g_callBackPtr)(void) = NULL_PTR;

ISR(TIMER1_OVF_vect) {
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	2f 93       	push	r18
     b52:	3f 93       	push	r19
     b54:	4f 93       	push	r20
     b56:	5f 93       	push	r21
     b58:	6f 93       	push	r22
     b5a:	7f 93       	push	r23
     b5c:	8f 93       	push	r24
     b5e:	9f 93       	push	r25
     b60:	af 93       	push	r26
     b62:	bf 93       	push	r27
     b64:	ef 93       	push	r30
     b66:	ff 93       	push	r31
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR) {
     b70:	80 91 dc 00 	lds	r24, 0x00DC
     b74:	90 91 dd 00 	lds	r25, 0x00DD
     b78:	00 97       	sbiw	r24, 0x00	; 0
     b7a:	29 f0       	breq	.+10     	; 0xb86 <__vector_9+0x40>
		(*g_callBackPtr)();
     b7c:	e0 91 dc 00 	lds	r30, 0x00DC
     b80:	f0 91 dd 00 	lds	r31, 0x00DD
     b84:	09 95       	icall
	}
}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	ff 91       	pop	r31
     b8c:	ef 91       	pop	r30
     b8e:	bf 91       	pop	r27
     b90:	af 91       	pop	r26
     b92:	9f 91       	pop	r25
     b94:	8f 91       	pop	r24
     b96:	7f 91       	pop	r23
     b98:	6f 91       	pop	r22
     b9a:	5f 91       	pop	r21
     b9c:	4f 91       	pop	r20
     b9e:	3f 91       	pop	r19
     ba0:	2f 91       	pop	r18
     ba2:	0f 90       	pop	r0
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	0f 90       	pop	r0
     ba8:	1f 90       	pop	r1
     baa:	18 95       	reti

00000bac <__vector_7>:

ISR(TIMER1_COMPA_vect) {
     bac:	1f 92       	push	r1
     bae:	0f 92       	push	r0
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	0f 92       	push	r0
     bb4:	11 24       	eor	r1, r1
     bb6:	2f 93       	push	r18
     bb8:	3f 93       	push	r19
     bba:	4f 93       	push	r20
     bbc:	5f 93       	push	r21
     bbe:	6f 93       	push	r22
     bc0:	7f 93       	push	r23
     bc2:	8f 93       	push	r24
     bc4:	9f 93       	push	r25
     bc6:	af 93       	push	r26
     bc8:	bf 93       	push	r27
     bca:	ef 93       	push	r30
     bcc:	ff 93       	push	r31
     bce:	df 93       	push	r29
     bd0:	cf 93       	push	r28
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR) {
     bd6:	80 91 dc 00 	lds	r24, 0x00DC
     bda:	90 91 dd 00 	lds	r25, 0x00DD
     bde:	00 97       	sbiw	r24, 0x00	; 0
     be0:	29 f0       	breq	.+10     	; 0xbec <__vector_7+0x40>
		(*g_callBackPtr)();
     be2:	e0 91 dc 00 	lds	r30, 0x00DC
     be6:	f0 91 dd 00 	lds	r31, 0x00DD
     bea:	09 95       	icall
	}
}
     bec:	cf 91       	pop	r28
     bee:	df 91       	pop	r29
     bf0:	ff 91       	pop	r31
     bf2:	ef 91       	pop	r30
     bf4:	bf 91       	pop	r27
     bf6:	af 91       	pop	r26
     bf8:	9f 91       	pop	r25
     bfa:	8f 91       	pop	r24
     bfc:	7f 91       	pop	r23
     bfe:	6f 91       	pop	r22
     c00:	5f 91       	pop	r21
     c02:	4f 91       	pop	r20
     c04:	3f 91       	pop	r19
     c06:	2f 91       	pop	r18
     c08:	0f 90       	pop	r0
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	0f 90       	pop	r0
     c0e:	1f 90       	pop	r1
     c10:	18 95       	reti

00000c12 <Timer1_init>:

void Timer1_init(const Timer_config *Config_Ptr) {
     c12:	df 93       	push	r29
     c14:	cf 93       	push	r28
     c16:	00 d0       	rcall	.+0      	; 0xc18 <Timer1_init+0x6>
     c18:	cd b7       	in	r28, 0x3d	; 61
     c1a:	de b7       	in	r29, 0x3e	; 62
     c1c:	9a 83       	std	Y+2, r25	; 0x02
     c1e:	89 83       	std	Y+1, r24	; 0x01

	SET_BIT(TCCR1A, FOC1A);
     c20:	af e4       	ldi	r26, 0x4F	; 79
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	ef e4       	ldi	r30, 0x4F	; 79
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	88 60       	ori	r24, 0x08	; 8
     c2c:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,FOC1B);
     c2e:	af e4       	ldi	r26, 0x4F	; 79
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	ef e4       	ldi	r30, 0x4F	; 79
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	84 60       	ori	r24, 0x04	; 4
     c3a:	8c 93       	st	X, r24
	TCCR1A |= Config_Ptr->prescaler;
     c3c:	af e4       	ldi	r26, 0x4F	; 79
     c3e:	b0 e0       	ldi	r27, 0x00	; 0
     c40:	ef e4       	ldi	r30, 0x4F	; 79
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	90 81       	ld	r25, Z
     c46:	e9 81       	ldd	r30, Y+1	; 0x01
     c48:	fa 81       	ldd	r31, Y+2	; 0x02
     c4a:	81 81       	ldd	r24, Z+1	; 0x01
     c4c:	89 2b       	or	r24, r25
     c4e:	8c 93       	st	X, r24
	TCCR1B = Config_Ptr->prescaler;
     c50:	ae e4       	ldi	r26, 0x4E	; 78
     c52:	b0 e0       	ldi	r27, 0x00	; 0
     c54:	e9 81       	ldd	r30, Y+1	; 0x01
     c56:	fa 81       	ldd	r31, Y+2	; 0x02
     c58:	81 81       	ldd	r24, Z+1	; 0x01
     c5a:	8c 93       	st	X, r24
	TCNT1 = Config_Ptr->Initial_value;
     c5c:	ac e4       	ldi	r26, 0x4C	; 76
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	e9 81       	ldd	r30, Y+1	; 0x01
     c62:	fa 81       	ldd	r31, Y+2	; 0x02
     c64:	82 81       	ldd	r24, Z+2	; 0x02
     c66:	88 2f       	mov	r24, r24
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	11 96       	adiw	r26, 0x01	; 1
     c6c:	9c 93       	st	X, r25
     c6e:	8e 93       	st	-X, r24
	if (Config_Ptr->mode == NORMAL) {
     c70:	e9 81       	ldd	r30, Y+1	; 0x01
     c72:	fa 81       	ldd	r31, Y+2	; 0x02
     c74:	80 81       	ld	r24, Z
     c76:	88 23       	and	r24, r24
     c78:	79 f4       	brne	.+30     	; 0xc98 <Timer1_init+0x86>
		SET_BIT(TIMSK, TOIE1);
     c7a:	a9 e5       	ldi	r26, 0x59	; 89
     c7c:	b0 e0       	ldi	r27, 0x00	; 0
     c7e:	e9 e5       	ldi	r30, 0x59	; 89
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	80 81       	ld	r24, Z
     c84:	84 60       	ori	r24, 0x04	; 4
     c86:	8c 93       	st	X, r24
		SET_BIT(TIFR,TOV1);
     c88:	a8 e5       	ldi	r26, 0x58	; 88
     c8a:	b0 e0       	ldi	r27, 0x00	; 0
     c8c:	e8 e5       	ldi	r30, 0x58	; 88
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	84 60       	ori	r24, 0x04	; 4
     c94:	8c 93       	st	X, r24
     c96:	23 c0       	rjmp	.+70     	; 0xcde <Timer1_init+0xcc>
	} else if (Config_Ptr->mode == CTC) {
     c98:	e9 81       	ldd	r30, Y+1	; 0x01
     c9a:	fa 81       	ldd	r31, Y+2	; 0x02
     c9c:	80 81       	ld	r24, Z
     c9e:	84 30       	cpi	r24, 0x04	; 4
     ca0:	f1 f4       	brne	.+60     	; 0xcde <Timer1_init+0xcc>
		SET_BIT(TCCR1B,WGM12);
     ca2:	ae e4       	ldi	r26, 0x4E	; 78
     ca4:	b0 e0       	ldi	r27, 0x00	; 0
     ca6:	ee e4       	ldi	r30, 0x4E	; 78
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	88 60       	ori	r24, 0x08	; 8
     cae:	8c 93       	st	X, r24
		OCR1A=Config_Ptr->Compare_value;
     cb0:	aa e4       	ldi	r26, 0x4A	; 74
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	e9 81       	ldd	r30, Y+1	; 0x01
     cb6:	fa 81       	ldd	r31, Y+2	; 0x02
     cb8:	83 81       	ldd	r24, Z+3	; 0x03
     cba:	94 81       	ldd	r25, Z+4	; 0x04
     cbc:	11 96       	adiw	r26, 0x01	; 1
     cbe:	9c 93       	st	X, r25
     cc0:	8e 93       	st	-X, r24
		SET_BIT(TIMSK,OCIE1A);
     cc2:	a9 e5       	ldi	r26, 0x59	; 89
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e9 e5       	ldi	r30, 0x59	; 89
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	80 61       	ori	r24, 0x10	; 16
     cce:	8c 93       	st	X, r24
		SET_BIT(TIFR,OCF1A);
     cd0:	a8 e5       	ldi	r26, 0x58	; 88
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e8 e5       	ldi	r30, 0x58	; 88
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	80 61       	ori	r24, 0x10	; 16
     cdc:	8c 93       	st	X, r24

	}
}
     cde:	0f 90       	pop	r0
     ce0:	0f 90       	pop	r0
     ce2:	cf 91       	pop	r28
     ce4:	df 91       	pop	r29
     ce6:	08 95       	ret

00000ce8 <Timer1_DeInit>:

void Timer1_DeInit(void) {
     ce8:	df 93       	push	r29
     cea:	cf 93       	push	r28
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
     cf0:	ef e4       	ldi	r30, 0x4F	; 79
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	10 82       	st	Z, r1
	TCCR1B = 0;
     cf6:	ee e4       	ldi	r30, 0x4E	; 78
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	10 82       	st	Z, r1
	TCNT1 =  0;
     cfc:	ec e4       	ldi	r30, 0x4C	; 76
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	11 82       	std	Z+1, r1	; 0x01
     d02:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,TOIE1);
     d04:	a9 e5       	ldi	r26, 0x59	; 89
     d06:	b0 e0       	ldi	r27, 0x00	; 0
     d08:	e9 e5       	ldi	r30, 0x59	; 89
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	8b 7f       	andi	r24, 0xFB	; 251
     d10:	8c 93       	st	X, r24
	CLEAR_BIT(TIFR,TOV1);
     d12:	a8 e5       	ldi	r26, 0x58	; 88
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	e8 e5       	ldi	r30, 0x58	; 88
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	8b 7f       	andi	r24, 0xFB	; 251
     d1e:	8c 93       	st	X, r24
	OCR1A = 0;
     d20:	ea e4       	ldi	r30, 0x4A	; 74
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	11 82       	std	Z+1, r1	; 0x01
     d26:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,OCIE1A);
     d28:	a9 e5       	ldi	r26, 0x59	; 89
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e9 e5       	ldi	r30, 0x59	; 89
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	8f 7e       	andi	r24, 0xEF	; 239
     d34:	8c 93       	st	X, r24
	CLEAR_BIT(TIFR,OCF1A);
     d36:	a8 e5       	ldi	r26, 0x58	; 88
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e8 e5       	ldi	r30, 0x58	; 88
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	8f 7e       	andi	r24, 0xEF	; 239
     d42:	8c 93       	st	X, r24

}
     d44:	cf 91       	pop	r28
     d46:	df 91       	pop	r29
     d48:	08 95       	ret

00000d4a <Timer1_setCallBack>:
			TIFR |= (1 << OCF1A);
		}
	}
}*/

void Timer1_setCallBack(void (*a_ptr)(void)) {
     d4a:	df 93       	push	r29
     d4c:	cf 93       	push	r28
     d4e:	00 d0       	rcall	.+0      	; 0xd50 <Timer1_setCallBack+0x6>
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
     d54:	9a 83       	std	Y+2, r25	; 0x02
     d56:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
     d58:	89 81       	ldd	r24, Y+1	; 0x01
     d5a:	9a 81       	ldd	r25, Y+2	; 0x02
     d5c:	90 93 dd 00 	sts	0x00DD, r25
     d60:	80 93 dc 00 	sts	0x00DC, r24
}
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	cf 91       	pop	r28
     d6a:	df 91       	pop	r29
     d6c:	08 95       	ret

00000d6e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	00 d0       	rcall	.+0      	; 0xd74 <GPIO_setupPinDirection+0x6>
     d74:	00 d0       	rcall	.+0      	; 0xd76 <GPIO_setupPinDirection+0x8>
     d76:	0f 92       	push	r0
     d78:	cd b7       	in	r28, 0x3d	; 61
     d7a:	de b7       	in	r29, 0x3e	; 62
     d7c:	89 83       	std	Y+1, r24	; 0x01
     d7e:	6a 83       	std	Y+2, r22	; 0x02
     d80:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num >= NUM_OF_PORTS)||(pin_num >= NUM_OF_PINS_PER_PORT))
     d82:	89 81       	ldd	r24, Y+1	; 0x01
     d84:	84 30       	cpi	r24, 0x04	; 4
     d86:	08 f0       	brcs	.+2      	; 0xd8a <GPIO_setupPinDirection+0x1c>
     d88:	d5 c0       	rjmp	.+426    	; 0xf34 <GPIO_setupPinDirection+0x1c6>
     d8a:	8a 81       	ldd	r24, Y+2	; 0x02
     d8c:	88 30       	cpi	r24, 0x08	; 8
     d8e:	08 f0       	brcs	.+2      	; 0xd92 <GPIO_setupPinDirection+0x24>
     d90:	d1 c0       	rjmp	.+418    	; 0xf34 <GPIO_setupPinDirection+0x1c6>
	{
		/* nothing */
	}
	else
	{
		switch(port_num)
     d92:	89 81       	ldd	r24, Y+1	; 0x01
     d94:	28 2f       	mov	r18, r24
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	3d 83       	std	Y+5, r19	; 0x05
     d9a:	2c 83       	std	Y+4, r18	; 0x04
     d9c:	8c 81       	ldd	r24, Y+4	; 0x04
     d9e:	9d 81       	ldd	r25, Y+5	; 0x05
     da0:	81 30       	cpi	r24, 0x01	; 1
     da2:	91 05       	cpc	r25, r1
     da4:	09 f4       	brne	.+2      	; 0xda8 <GPIO_setupPinDirection+0x3a>
     da6:	43 c0       	rjmp	.+134    	; 0xe2e <GPIO_setupPinDirection+0xc0>
     da8:	2c 81       	ldd	r18, Y+4	; 0x04
     daa:	3d 81       	ldd	r19, Y+5	; 0x05
     dac:	22 30       	cpi	r18, 0x02	; 2
     dae:	31 05       	cpc	r19, r1
     db0:	2c f4       	brge	.+10     	; 0xdbc <GPIO_setupPinDirection+0x4e>
     db2:	8c 81       	ldd	r24, Y+4	; 0x04
     db4:	9d 81       	ldd	r25, Y+5	; 0x05
     db6:	00 97       	sbiw	r24, 0x00	; 0
     db8:	71 f0       	breq	.+28     	; 0xdd6 <GPIO_setupPinDirection+0x68>
     dba:	bc c0       	rjmp	.+376    	; 0xf34 <GPIO_setupPinDirection+0x1c6>
     dbc:	2c 81       	ldd	r18, Y+4	; 0x04
     dbe:	3d 81       	ldd	r19, Y+5	; 0x05
     dc0:	22 30       	cpi	r18, 0x02	; 2
     dc2:	31 05       	cpc	r19, r1
     dc4:	09 f4       	brne	.+2      	; 0xdc8 <GPIO_setupPinDirection+0x5a>
     dc6:	5f c0       	rjmp	.+190    	; 0xe86 <GPIO_setupPinDirection+0x118>
     dc8:	8c 81       	ldd	r24, Y+4	; 0x04
     dca:	9d 81       	ldd	r25, Y+5	; 0x05
     dcc:	83 30       	cpi	r24, 0x03	; 3
     dce:	91 05       	cpc	r25, r1
     dd0:	09 f4       	brne	.+2      	; 0xdd4 <GPIO_setupPinDirection+0x66>
     dd2:	85 c0       	rjmp	.+266    	; 0xede <GPIO_setupPinDirection+0x170>
     dd4:	af c0       	rjmp	.+350    	; 0xf34 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     dd6:	8b 81       	ldd	r24, Y+3	; 0x03
     dd8:	81 30       	cpi	r24, 0x01	; 1
     dda:	a1 f4       	brne	.+40     	; 0xe04 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     ddc:	aa e3       	ldi	r26, 0x3A	; 58
     dde:	b0 e0       	ldi	r27, 0x00	; 0
     de0:	ea e3       	ldi	r30, 0x3A	; 58
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	48 2f       	mov	r20, r24
     de8:	8a 81       	ldd	r24, Y+2	; 0x02
     dea:	28 2f       	mov	r18, r24
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	02 2e       	mov	r0, r18
     df4:	02 c0       	rjmp	.+4      	; 0xdfa <GPIO_setupPinDirection+0x8c>
     df6:	88 0f       	add	r24, r24
     df8:	99 1f       	adc	r25, r25
     dfa:	0a 94       	dec	r0
     dfc:	e2 f7       	brpl	.-8      	; 0xdf6 <GPIO_setupPinDirection+0x88>
     dfe:	84 2b       	or	r24, r20
     e00:	8c 93       	st	X, r24
     e02:	98 c0       	rjmp	.+304    	; 0xf34 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     e04:	aa e3       	ldi	r26, 0x3A	; 58
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	ea e3       	ldi	r30, 0x3A	; 58
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	48 2f       	mov	r20, r24
     e10:	8a 81       	ldd	r24, Y+2	; 0x02
     e12:	28 2f       	mov	r18, r24
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	02 2e       	mov	r0, r18
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <GPIO_setupPinDirection+0xb4>
     e1e:	88 0f       	add	r24, r24
     e20:	99 1f       	adc	r25, r25
     e22:	0a 94       	dec	r0
     e24:	e2 f7       	brpl	.-8      	; 0xe1e <GPIO_setupPinDirection+0xb0>
     e26:	80 95       	com	r24
     e28:	84 23       	and	r24, r20
     e2a:	8c 93       	st	X, r24
     e2c:	83 c0       	rjmp	.+262    	; 0xf34 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     e2e:	8b 81       	ldd	r24, Y+3	; 0x03
     e30:	81 30       	cpi	r24, 0x01	; 1
     e32:	a1 f4       	brne	.+40     	; 0xe5c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     e34:	a7 e3       	ldi	r26, 0x37	; 55
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e7 e3       	ldi	r30, 0x37	; 55
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	48 2f       	mov	r20, r24
     e40:	8a 81       	ldd	r24, Y+2	; 0x02
     e42:	28 2f       	mov	r18, r24
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	02 2e       	mov	r0, r18
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <GPIO_setupPinDirection+0xe4>
     e4e:	88 0f       	add	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	0a 94       	dec	r0
     e54:	e2 f7       	brpl	.-8      	; 0xe4e <GPIO_setupPinDirection+0xe0>
     e56:	84 2b       	or	r24, r20
     e58:	8c 93       	st	X, r24
     e5a:	6c c0       	rjmp	.+216    	; 0xf34 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     e5c:	a7 e3       	ldi	r26, 0x37	; 55
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	e7 e3       	ldi	r30, 0x37	; 55
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	48 2f       	mov	r20, r24
     e68:	8a 81       	ldd	r24, Y+2	; 0x02
     e6a:	28 2f       	mov	r18, r24
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	02 2e       	mov	r0, r18
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <GPIO_setupPinDirection+0x10c>
     e76:	88 0f       	add	r24, r24
     e78:	99 1f       	adc	r25, r25
     e7a:	0a 94       	dec	r0
     e7c:	e2 f7       	brpl	.-8      	; 0xe76 <GPIO_setupPinDirection+0x108>
     e7e:	80 95       	com	r24
     e80:	84 23       	and	r24, r20
     e82:	8c 93       	st	X, r24
     e84:	57 c0       	rjmp	.+174    	; 0xf34 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     e86:	8b 81       	ldd	r24, Y+3	; 0x03
     e88:	81 30       	cpi	r24, 0x01	; 1
     e8a:	a1 f4       	brne	.+40     	; 0xeb4 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     e8c:	a4 e3       	ldi	r26, 0x34	; 52
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e4 e3       	ldi	r30, 0x34	; 52
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	48 2f       	mov	r20, r24
     e98:	8a 81       	ldd	r24, Y+2	; 0x02
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	02 2e       	mov	r0, r18
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <GPIO_setupPinDirection+0x13c>
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	0a 94       	dec	r0
     eac:	e2 f7       	brpl	.-8      	; 0xea6 <GPIO_setupPinDirection+0x138>
     eae:	84 2b       	or	r24, r20
     eb0:	8c 93       	st	X, r24
     eb2:	40 c0       	rjmp	.+128    	; 0xf34 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     eb4:	a4 e3       	ldi	r26, 0x34	; 52
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	e4 e3       	ldi	r30, 0x34	; 52
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	48 2f       	mov	r20, r24
     ec0:	8a 81       	ldd	r24, Y+2	; 0x02
     ec2:	28 2f       	mov	r18, r24
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	02 2e       	mov	r0, r18
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <GPIO_setupPinDirection+0x164>
     ece:	88 0f       	add	r24, r24
     ed0:	99 1f       	adc	r25, r25
     ed2:	0a 94       	dec	r0
     ed4:	e2 f7       	brpl	.-8      	; 0xece <GPIO_setupPinDirection+0x160>
     ed6:	80 95       	com	r24
     ed8:	84 23       	and	r24, r20
     eda:	8c 93       	st	X, r24
     edc:	2b c0       	rjmp	.+86     	; 0xf34 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	81 30       	cpi	r24, 0x01	; 1
     ee2:	a1 f4       	brne	.+40     	; 0xf0c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     ee4:	a1 e3       	ldi	r26, 0x31	; 49
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e1 e3       	ldi	r30, 0x31	; 49
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	48 2f       	mov	r20, r24
     ef0:	8a 81       	ldd	r24, Y+2	; 0x02
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	02 2e       	mov	r0, r18
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <GPIO_setupPinDirection+0x194>
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	0a 94       	dec	r0
     f04:	e2 f7       	brpl	.-8      	; 0xefe <GPIO_setupPinDirection+0x190>
     f06:	84 2b       	or	r24, r20
     f08:	8c 93       	st	X, r24
     f0a:	14 c0       	rjmp	.+40     	; 0xf34 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     f0c:	a1 e3       	ldi	r26, 0x31	; 49
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e1 e3       	ldi	r30, 0x31	; 49
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	48 2f       	mov	r20, r24
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	28 2f       	mov	r18, r24
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	02 2e       	mov	r0, r18
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <GPIO_setupPinDirection+0x1bc>
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	0a 94       	dec	r0
     f2c:	e2 f7       	brpl	.-8      	; 0xf26 <GPIO_setupPinDirection+0x1b8>
     f2e:	80 95       	com	r24
     f30:	84 23       	and	r24, r20
     f32:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     f34:	0f 90       	pop	r0
     f36:	0f 90       	pop	r0
     f38:	0f 90       	pop	r0
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
     f3e:	cf 91       	pop	r28
     f40:	df 91       	pop	r29
     f42:	08 95       	ret

00000f44 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     f44:	df 93       	push	r29
     f46:	cf 93       	push	r28
     f48:	00 d0       	rcall	.+0      	; 0xf4a <GPIO_writePin+0x6>
     f4a:	00 d0       	rcall	.+0      	; 0xf4c <GPIO_writePin+0x8>
     f4c:	0f 92       	push	r0
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
     f52:	89 83       	std	Y+1, r24	; 0x01
     f54:	6a 83       	std	Y+2, r22	; 0x02
     f56:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT))
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	84 30       	cpi	r24, 0x04	; 4
     f5c:	08 f0       	brcs	.+2      	; 0xf60 <GPIO_writePin+0x1c>
     f5e:	d5 c0       	rjmp	.+426    	; 0x110a <GPIO_writePin+0x1c6>
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	88 30       	cpi	r24, 0x08	; 8
     f64:	08 f0       	brcs	.+2      	; 0xf68 <GPIO_writePin+0x24>
     f66:	d1 c0       	rjmp	.+418    	; 0x110a <GPIO_writePin+0x1c6>
	{
		/* nothing */
	}
	else
	{
		switch(port_num)
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	28 2f       	mov	r18, r24
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	3d 83       	std	Y+5, r19	; 0x05
     f70:	2c 83       	std	Y+4, r18	; 0x04
     f72:	8c 81       	ldd	r24, Y+4	; 0x04
     f74:	9d 81       	ldd	r25, Y+5	; 0x05
     f76:	81 30       	cpi	r24, 0x01	; 1
     f78:	91 05       	cpc	r25, r1
     f7a:	09 f4       	brne	.+2      	; 0xf7e <GPIO_writePin+0x3a>
     f7c:	43 c0       	rjmp	.+134    	; 0x1004 <GPIO_writePin+0xc0>
     f7e:	2c 81       	ldd	r18, Y+4	; 0x04
     f80:	3d 81       	ldd	r19, Y+5	; 0x05
     f82:	22 30       	cpi	r18, 0x02	; 2
     f84:	31 05       	cpc	r19, r1
     f86:	2c f4       	brge	.+10     	; 0xf92 <GPIO_writePin+0x4e>
     f88:	8c 81       	ldd	r24, Y+4	; 0x04
     f8a:	9d 81       	ldd	r25, Y+5	; 0x05
     f8c:	00 97       	sbiw	r24, 0x00	; 0
     f8e:	71 f0       	breq	.+28     	; 0xfac <GPIO_writePin+0x68>
     f90:	bc c0       	rjmp	.+376    	; 0x110a <GPIO_writePin+0x1c6>
     f92:	2c 81       	ldd	r18, Y+4	; 0x04
     f94:	3d 81       	ldd	r19, Y+5	; 0x05
     f96:	22 30       	cpi	r18, 0x02	; 2
     f98:	31 05       	cpc	r19, r1
     f9a:	09 f4       	brne	.+2      	; 0xf9e <GPIO_writePin+0x5a>
     f9c:	5f c0       	rjmp	.+190    	; 0x105c <GPIO_writePin+0x118>
     f9e:	8c 81       	ldd	r24, Y+4	; 0x04
     fa0:	9d 81       	ldd	r25, Y+5	; 0x05
     fa2:	83 30       	cpi	r24, 0x03	; 3
     fa4:	91 05       	cpc	r25, r1
     fa6:	09 f4       	brne	.+2      	; 0xfaa <GPIO_writePin+0x66>
     fa8:	85 c0       	rjmp	.+266    	; 0x10b4 <GPIO_writePin+0x170>
     faa:	af c0       	rjmp	.+350    	; 0x110a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     fac:	8b 81       	ldd	r24, Y+3	; 0x03
     fae:	81 30       	cpi	r24, 0x01	; 1
     fb0:	a1 f4       	brne	.+40     	; 0xfda <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     fb2:	ab e3       	ldi	r26, 0x3B	; 59
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	eb e3       	ldi	r30, 0x3B	; 59
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	48 2f       	mov	r20, r24
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	02 2e       	mov	r0, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <GPIO_writePin+0x8c>
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	0a 94       	dec	r0
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <GPIO_writePin+0x88>
     fd4:	84 2b       	or	r24, r20
     fd6:	8c 93       	st	X, r24
     fd8:	98 c0       	rjmp	.+304    	; 0x110a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     fda:	ab e3       	ldi	r26, 0x3B	; 59
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	eb e3       	ldi	r30, 0x3B	; 59
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	48 2f       	mov	r20, r24
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	02 2e       	mov	r0, r18
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <GPIO_writePin+0xb4>
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	0a 94       	dec	r0
     ffa:	e2 f7       	brpl	.-8      	; 0xff4 <GPIO_writePin+0xb0>
     ffc:	80 95       	com	r24
     ffe:	84 23       	and	r24, r20
    1000:	8c 93       	st	X, r24
    1002:	83 c0       	rjmp	.+262    	; 0x110a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	81 30       	cpi	r24, 0x01	; 1
    1008:	a1 f4       	brne	.+40     	; 0x1032 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    100a:	a8 e3       	ldi	r26, 0x38	; 56
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e8 e3       	ldi	r30, 0x38	; 56
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	48 2f       	mov	r20, r24
    1016:	8a 81       	ldd	r24, Y+2	; 0x02
    1018:	28 2f       	mov	r18, r24
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	02 2e       	mov	r0, r18
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <GPIO_writePin+0xe4>
    1024:	88 0f       	add	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	0a 94       	dec	r0
    102a:	e2 f7       	brpl	.-8      	; 0x1024 <GPIO_writePin+0xe0>
    102c:	84 2b       	or	r24, r20
    102e:	8c 93       	st	X, r24
    1030:	6c c0       	rjmp	.+216    	; 0x110a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1032:	a8 e3       	ldi	r26, 0x38	; 56
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	e8 e3       	ldi	r30, 0x38	; 56
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	48 2f       	mov	r20, r24
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	02 2e       	mov	r0, r18
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <GPIO_writePin+0x10c>
    104c:	88 0f       	add	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	0a 94       	dec	r0
    1052:	e2 f7       	brpl	.-8      	; 0x104c <GPIO_writePin+0x108>
    1054:	80 95       	com	r24
    1056:	84 23       	and	r24, r20
    1058:	8c 93       	st	X, r24
    105a:	57 c0       	rjmp	.+174    	; 0x110a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	81 30       	cpi	r24, 0x01	; 1
    1060:	a1 f4       	brne	.+40     	; 0x108a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1062:	a5 e3       	ldi	r26, 0x35	; 53
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e5 e3       	ldi	r30, 0x35	; 53
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	48 2f       	mov	r20, r24
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	02 2e       	mov	r0, r18
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <GPIO_writePin+0x13c>
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	0a 94       	dec	r0
    1082:	e2 f7       	brpl	.-8      	; 0x107c <GPIO_writePin+0x138>
    1084:	84 2b       	or	r24, r20
    1086:	8c 93       	st	X, r24
    1088:	40 c0       	rjmp	.+128    	; 0x110a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    108a:	a5 e3       	ldi	r26, 0x35	; 53
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e5 e3       	ldi	r30, 0x35	; 53
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	48 2f       	mov	r20, r24
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	02 2e       	mov	r0, r18
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <GPIO_writePin+0x164>
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	0a 94       	dec	r0
    10aa:	e2 f7       	brpl	.-8      	; 0x10a4 <GPIO_writePin+0x160>
    10ac:	80 95       	com	r24
    10ae:	84 23       	and	r24, r20
    10b0:	8c 93       	st	X, r24
    10b2:	2b c0       	rjmp	.+86     	; 0x110a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	81 30       	cpi	r24, 0x01	; 1
    10b8:	a1 f4       	brne	.+40     	; 0x10e2 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    10ba:	a2 e3       	ldi	r26, 0x32	; 50
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e2 e3       	ldi	r30, 0x32	; 50
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	48 2f       	mov	r20, r24
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	02 2e       	mov	r0, r18
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <GPIO_writePin+0x194>
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	0a 94       	dec	r0
    10da:	e2 f7       	brpl	.-8      	; 0x10d4 <GPIO_writePin+0x190>
    10dc:	84 2b       	or	r24, r20
    10de:	8c 93       	st	X, r24
    10e0:	14 c0       	rjmp	.+40     	; 0x110a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    10e2:	a2 e3       	ldi	r26, 0x32	; 50
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e2 e3       	ldi	r30, 0x32	; 50
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	48 2f       	mov	r20, r24
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	02 2e       	mov	r0, r18
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <GPIO_writePin+0x1bc>
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	0a 94       	dec	r0
    1102:	e2 f7       	brpl	.-8      	; 0x10fc <GPIO_writePin+0x1b8>
    1104:	80 95       	com	r24
    1106:	84 23       	and	r24, r20
    1108:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    110a:	0f 90       	pop	r0
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	0f 90       	pop	r0
    1114:	cf 91       	pop	r28
    1116:	df 91       	pop	r29
    1118:	08 95       	ret

0000111a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    111a:	df 93       	push	r29
    111c:	cf 93       	push	r28
    111e:	00 d0       	rcall	.+0      	; 0x1120 <GPIO_readPin+0x6>
    1120:	00 d0       	rcall	.+0      	; 0x1122 <GPIO_readPin+0x8>
    1122:	0f 92       	push	r0
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
    1128:	8a 83       	std	Y+2, r24	; 0x02
    112a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    112c:	19 82       	std	Y+1, r1	; 0x01
	if((port_num >= NUM_OF_PORTS)||(pin_num >= NUM_OF_PINS_PER_PORT))
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	84 30       	cpi	r24, 0x04	; 4
    1132:	08 f0       	brcs	.+2      	; 0x1136 <GPIO_readPin+0x1c>
    1134:	84 c0       	rjmp	.+264    	; 0x123e <GPIO_readPin+0x124>
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	88 30       	cpi	r24, 0x08	; 8
    113a:	08 f0       	brcs	.+2      	; 0x113e <GPIO_readPin+0x24>
    113c:	80 c0       	rjmp	.+256    	; 0x123e <GPIO_readPin+0x124>
	{
		/* nothing */
	}
	else
	{
		switch(port_num)
    113e:	8a 81       	ldd	r24, Y+2	; 0x02
    1140:	28 2f       	mov	r18, r24
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	3d 83       	std	Y+5, r19	; 0x05
    1146:	2c 83       	std	Y+4, r18	; 0x04
    1148:	4c 81       	ldd	r20, Y+4	; 0x04
    114a:	5d 81       	ldd	r21, Y+5	; 0x05
    114c:	41 30       	cpi	r20, 0x01	; 1
    114e:	51 05       	cpc	r21, r1
    1150:	79 f1       	breq	.+94     	; 0x11b0 <GPIO_readPin+0x96>
    1152:	8c 81       	ldd	r24, Y+4	; 0x04
    1154:	9d 81       	ldd	r25, Y+5	; 0x05
    1156:	82 30       	cpi	r24, 0x02	; 2
    1158:	91 05       	cpc	r25, r1
    115a:	34 f4       	brge	.+12     	; 0x1168 <GPIO_readPin+0x4e>
    115c:	2c 81       	ldd	r18, Y+4	; 0x04
    115e:	3d 81       	ldd	r19, Y+5	; 0x05
    1160:	21 15       	cp	r18, r1
    1162:	31 05       	cpc	r19, r1
    1164:	69 f0       	breq	.+26     	; 0x1180 <GPIO_readPin+0x66>
    1166:	6b c0       	rjmp	.+214    	; 0x123e <GPIO_readPin+0x124>
    1168:	4c 81       	ldd	r20, Y+4	; 0x04
    116a:	5d 81       	ldd	r21, Y+5	; 0x05
    116c:	42 30       	cpi	r20, 0x02	; 2
    116e:	51 05       	cpc	r21, r1
    1170:	b9 f1       	breq	.+110    	; 0x11e0 <GPIO_readPin+0xc6>
    1172:	8c 81       	ldd	r24, Y+4	; 0x04
    1174:	9d 81       	ldd	r25, Y+5	; 0x05
    1176:	83 30       	cpi	r24, 0x03	; 3
    1178:	91 05       	cpc	r25, r1
    117a:	09 f4       	brne	.+2      	; 0x117e <GPIO_readPin+0x64>
    117c:	49 c0       	rjmp	.+146    	; 0x1210 <GPIO_readPin+0xf6>
    117e:	5f c0       	rjmp	.+190    	; 0x123e <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1180:	e9 e3       	ldi	r30, 0x39	; 57
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	88 2f       	mov	r24, r24
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	a9 01       	movw	r20, r18
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <GPIO_readPin+0x7e>
    1194:	55 95       	asr	r21
    1196:	47 95       	ror	r20
    1198:	8a 95       	dec	r24
    119a:	e2 f7       	brpl	.-8      	; 0x1194 <GPIO_readPin+0x7a>
    119c:	ca 01       	movw	r24, r20
    119e:	81 70       	andi	r24, 0x01	; 1
    11a0:	90 70       	andi	r25, 0x00	; 0
    11a2:	88 23       	and	r24, r24
    11a4:	19 f0       	breq	.+6      	; 0x11ac <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	89 83       	std	Y+1, r24	; 0x01
    11aa:	49 c0       	rjmp	.+146    	; 0x123e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    11ac:	19 82       	std	Y+1, r1	; 0x01
    11ae:	47 c0       	rjmp	.+142    	; 0x123e <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    11b0:	e6 e3       	ldi	r30, 0x36	; 54
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	8b 81       	ldd	r24, Y+3	; 0x03
    11bc:	88 2f       	mov	r24, r24
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	a9 01       	movw	r20, r18
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <GPIO_readPin+0xae>
    11c4:	55 95       	asr	r21
    11c6:	47 95       	ror	r20
    11c8:	8a 95       	dec	r24
    11ca:	e2 f7       	brpl	.-8      	; 0x11c4 <GPIO_readPin+0xaa>
    11cc:	ca 01       	movw	r24, r20
    11ce:	81 70       	andi	r24, 0x01	; 1
    11d0:	90 70       	andi	r25, 0x00	; 0
    11d2:	88 23       	and	r24, r24
    11d4:	19 f0       	breq	.+6      	; 0x11dc <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	89 83       	std	Y+1, r24	; 0x01
    11da:	31 c0       	rjmp	.+98     	; 0x123e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    11dc:	19 82       	std	Y+1, r1	; 0x01
    11de:	2f c0       	rjmp	.+94     	; 0x123e <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    11e0:	e3 e3       	ldi	r30, 0x33	; 51
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	88 2f       	mov	r24, r24
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	a9 01       	movw	r20, r18
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <GPIO_readPin+0xde>
    11f4:	55 95       	asr	r21
    11f6:	47 95       	ror	r20
    11f8:	8a 95       	dec	r24
    11fa:	e2 f7       	brpl	.-8      	; 0x11f4 <GPIO_readPin+0xda>
    11fc:	ca 01       	movw	r24, r20
    11fe:	81 70       	andi	r24, 0x01	; 1
    1200:	90 70       	andi	r25, 0x00	; 0
    1202:	88 23       	and	r24, r24
    1204:	19 f0       	breq	.+6      	; 0x120c <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	89 83       	std	Y+1, r24	; 0x01
    120a:	19 c0       	rjmp	.+50     	; 0x123e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    120c:	19 82       	std	Y+1, r1	; 0x01
    120e:	17 c0       	rjmp	.+46     	; 0x123e <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1210:	e0 e3       	ldi	r30, 0x30	; 48
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	28 2f       	mov	r18, r24
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	88 2f       	mov	r24, r24
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	a9 01       	movw	r20, r18
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <GPIO_readPin+0x10e>
    1224:	55 95       	asr	r21
    1226:	47 95       	ror	r20
    1228:	8a 95       	dec	r24
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <GPIO_readPin+0x10a>
    122c:	ca 01       	movw	r24, r20
    122e:	81 70       	andi	r24, 0x01	; 1
    1230:	90 70       	andi	r25, 0x00	; 0
    1232:	88 23       	and	r24, r24
    1234:	19 f0       	breq	.+6      	; 0x123c <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	89 83       	std	Y+1, r24	; 0x01
    123a:	01 c0       	rjmp	.+2      	; 0x123e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    123c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return pin_value;
    123e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	cf 91       	pop	r28
    124c:	df 91       	pop	r29
    124e:	08 95       	ret

00001250 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, uint8 direction)
{
    1250:	df 93       	push	r29
    1252:	cf 93       	push	r28
    1254:	00 d0       	rcall	.+0      	; 0x1256 <GPIO_setupPortDirection+0x6>
    1256:	00 d0       	rcall	.+0      	; 0x1258 <GPIO_setupPortDirection+0x8>
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
    125c:	89 83       	std	Y+1, r24	; 0x01
    125e:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    1260:	89 81       	ldd	r24, Y+1	; 0x01
    1262:	84 30       	cpi	r24, 0x04	; 4
    1264:	90 f5       	brcc	.+100    	; 0x12ca <GPIO_setupPortDirection+0x7a>
	{
		/* nothing */
	}
	else
	{
		switch(port_num)
    1266:	89 81       	ldd	r24, Y+1	; 0x01
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	3c 83       	std	Y+4, r19	; 0x04
    126e:	2b 83       	std	Y+3, r18	; 0x03
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	9c 81       	ldd	r25, Y+4	; 0x04
    1274:	81 30       	cpi	r24, 0x01	; 1
    1276:	91 05       	cpc	r25, r1
    1278:	d1 f0       	breq	.+52     	; 0x12ae <GPIO_setupPortDirection+0x5e>
    127a:	2b 81       	ldd	r18, Y+3	; 0x03
    127c:	3c 81       	ldd	r19, Y+4	; 0x04
    127e:	22 30       	cpi	r18, 0x02	; 2
    1280:	31 05       	cpc	r19, r1
    1282:	2c f4       	brge	.+10     	; 0x128e <GPIO_setupPortDirection+0x3e>
    1284:	8b 81       	ldd	r24, Y+3	; 0x03
    1286:	9c 81       	ldd	r25, Y+4	; 0x04
    1288:	00 97       	sbiw	r24, 0x00	; 0
    128a:	61 f0       	breq	.+24     	; 0x12a4 <GPIO_setupPortDirection+0x54>
    128c:	1e c0       	rjmp	.+60     	; 0x12ca <GPIO_setupPortDirection+0x7a>
    128e:	2b 81       	ldd	r18, Y+3	; 0x03
    1290:	3c 81       	ldd	r19, Y+4	; 0x04
    1292:	22 30       	cpi	r18, 0x02	; 2
    1294:	31 05       	cpc	r19, r1
    1296:	81 f0       	breq	.+32     	; 0x12b8 <GPIO_setupPortDirection+0x68>
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	9c 81       	ldd	r25, Y+4	; 0x04
    129c:	83 30       	cpi	r24, 0x03	; 3
    129e:	91 05       	cpc	r25, r1
    12a0:	81 f0       	breq	.+32     	; 0x12c2 <GPIO_setupPortDirection+0x72>
    12a2:	13 c0       	rjmp	.+38     	; 0x12ca <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    12a4:	ea e3       	ldi	r30, 0x3A	; 58
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	8a 81       	ldd	r24, Y+2	; 0x02
    12aa:	80 83       	st	Z, r24
    12ac:	0e c0       	rjmp	.+28     	; 0x12ca <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    12ae:	e7 e3       	ldi	r30, 0x37	; 55
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	8a 81       	ldd	r24, Y+2	; 0x02
    12b4:	80 83       	st	Z, r24
    12b6:	09 c0       	rjmp	.+18     	; 0x12ca <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    12b8:	e4 e3       	ldi	r30, 0x34	; 52
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	8a 81       	ldd	r24, Y+2	; 0x02
    12be:	80 83       	st	Z, r24
    12c0:	04 c0       	rjmp	.+8      	; 0x12ca <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    12c2:	e1 e3       	ldi	r30, 0x31	; 49
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	8a 81       	ldd	r24, Y+2	; 0x02
    12c8:	80 83       	st	Z, r24
			break;
		}
	}
}
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	0f 90       	pop	r0
    12d2:	cf 91       	pop	r28
    12d4:	df 91       	pop	r29
    12d6:	08 95       	ret

000012d8 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    12d8:	df 93       	push	r29
    12da:	cf 93       	push	r28
    12dc:	00 d0       	rcall	.+0      	; 0x12de <GPIO_writePort+0x6>
    12de:	00 d0       	rcall	.+0      	; 0x12e0 <GPIO_writePort+0x8>
    12e0:	cd b7       	in	r28, 0x3d	; 61
    12e2:	de b7       	in	r29, 0x3e	; 62
    12e4:	89 83       	std	Y+1, r24	; 0x01
    12e6:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    12e8:	89 81       	ldd	r24, Y+1	; 0x01
    12ea:	84 30       	cpi	r24, 0x04	; 4
    12ec:	90 f5       	brcc	.+100    	; 0x1352 <GPIO_writePort+0x7a>
	{
		/* nothing */
	}
	else
	{
		switch(port_num)
    12ee:	89 81       	ldd	r24, Y+1	; 0x01
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	3c 83       	std	Y+4, r19	; 0x04
    12f6:	2b 83       	std	Y+3, r18	; 0x03
    12f8:	8b 81       	ldd	r24, Y+3	; 0x03
    12fa:	9c 81       	ldd	r25, Y+4	; 0x04
    12fc:	81 30       	cpi	r24, 0x01	; 1
    12fe:	91 05       	cpc	r25, r1
    1300:	d1 f0       	breq	.+52     	; 0x1336 <GPIO_writePort+0x5e>
    1302:	2b 81       	ldd	r18, Y+3	; 0x03
    1304:	3c 81       	ldd	r19, Y+4	; 0x04
    1306:	22 30       	cpi	r18, 0x02	; 2
    1308:	31 05       	cpc	r19, r1
    130a:	2c f4       	brge	.+10     	; 0x1316 <GPIO_writePort+0x3e>
    130c:	8b 81       	ldd	r24, Y+3	; 0x03
    130e:	9c 81       	ldd	r25, Y+4	; 0x04
    1310:	00 97       	sbiw	r24, 0x00	; 0
    1312:	61 f0       	breq	.+24     	; 0x132c <GPIO_writePort+0x54>
    1314:	1e c0       	rjmp	.+60     	; 0x1352 <GPIO_writePort+0x7a>
    1316:	2b 81       	ldd	r18, Y+3	; 0x03
    1318:	3c 81       	ldd	r19, Y+4	; 0x04
    131a:	22 30       	cpi	r18, 0x02	; 2
    131c:	31 05       	cpc	r19, r1
    131e:	81 f0       	breq	.+32     	; 0x1340 <GPIO_writePort+0x68>
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	9c 81       	ldd	r25, Y+4	; 0x04
    1324:	83 30       	cpi	r24, 0x03	; 3
    1326:	91 05       	cpc	r25, r1
    1328:	81 f0       	breq	.+32     	; 0x134a <GPIO_writePort+0x72>
    132a:	13 c0       	rjmp	.+38     	; 0x1352 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    132c:	eb e3       	ldi	r30, 0x3B	; 59
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
    1332:	80 83       	st	Z, r24
    1334:	0e c0       	rjmp	.+28     	; 0x1352 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1336:	e8 e3       	ldi	r30, 0x38	; 56
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	8a 81       	ldd	r24, Y+2	; 0x02
    133c:	80 83       	st	Z, r24
    133e:	09 c0       	rjmp	.+18     	; 0x1352 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1340:	e5 e3       	ldi	r30, 0x35	; 53
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	80 83       	st	Z, r24
    1348:	04 c0       	rjmp	.+8      	; 0x1352 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    134a:	e2 e3       	ldi	r30, 0x32	; 50
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	8a 81       	ldd	r24, Y+2	; 0x02
    1350:	80 83       	st	Z, r24
			break;
		}
	}
}
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	cf 91       	pop	r28
    135c:	df 91       	pop	r29
    135e:	08 95       	ret

00001360 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1360:	df 93       	push	r29
    1362:	cf 93       	push	r28
    1364:	00 d0       	rcall	.+0      	; 0x1366 <GPIO_readPort+0x6>
    1366:	00 d0       	rcall	.+0      	; 0x1368 <GPIO_readPort+0x8>
    1368:	cd b7       	in	r28, 0x3d	; 61
    136a:	de b7       	in	r29, 0x3e	; 62
    136c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 port_value = LOGIC_LOW;
    136e:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS)
    1370:	8a 81       	ldd	r24, Y+2	; 0x02
    1372:	84 30       	cpi	r24, 0x04	; 4
    1374:	90 f5       	brcc	.+100    	; 0x13da <GPIO_readPort+0x7a>
	{
		/* nothing */
	}
	else
	{
		switch(port_num)
    1376:	8a 81       	ldd	r24, Y+2	; 0x02
    1378:	28 2f       	mov	r18, r24
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	3c 83       	std	Y+4, r19	; 0x04
    137e:	2b 83       	std	Y+3, r18	; 0x03
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	9c 81       	ldd	r25, Y+4	; 0x04
    1384:	81 30       	cpi	r24, 0x01	; 1
    1386:	91 05       	cpc	r25, r1
    1388:	d1 f0       	breq	.+52     	; 0x13be <GPIO_readPort+0x5e>
    138a:	2b 81       	ldd	r18, Y+3	; 0x03
    138c:	3c 81       	ldd	r19, Y+4	; 0x04
    138e:	22 30       	cpi	r18, 0x02	; 2
    1390:	31 05       	cpc	r19, r1
    1392:	2c f4       	brge	.+10     	; 0x139e <GPIO_readPort+0x3e>
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	9c 81       	ldd	r25, Y+4	; 0x04
    1398:	00 97       	sbiw	r24, 0x00	; 0
    139a:	61 f0       	breq	.+24     	; 0x13b4 <GPIO_readPort+0x54>
    139c:	1e c0       	rjmp	.+60     	; 0x13da <GPIO_readPort+0x7a>
    139e:	2b 81       	ldd	r18, Y+3	; 0x03
    13a0:	3c 81       	ldd	r19, Y+4	; 0x04
    13a2:	22 30       	cpi	r18, 0x02	; 2
    13a4:	31 05       	cpc	r19, r1
    13a6:	81 f0       	breq	.+32     	; 0x13c8 <GPIO_readPort+0x68>
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	9c 81       	ldd	r25, Y+4	; 0x04
    13ac:	83 30       	cpi	r24, 0x03	; 3
    13ae:	91 05       	cpc	r25, r1
    13b0:	81 f0       	breq	.+32     	; 0x13d2 <GPIO_readPort+0x72>
    13b2:	13 c0       	rjmp	.+38     	; 0x13da <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			PINA = port_value;
    13b4:	e9 e3       	ldi	r30, 0x39	; 57
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	89 81       	ldd	r24, Y+1	; 0x01
    13ba:	80 83       	st	Z, r24
    13bc:	0e c0       	rjmp	.+28     	; 0x13da <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			PINB = port_value;
    13be:	e6 e3       	ldi	r30, 0x36	; 54
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	89 81       	ldd	r24, Y+1	; 0x01
    13c4:	80 83       	st	Z, r24
    13c6:	09 c0       	rjmp	.+18     	; 0x13da <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			PINC = port_value;
    13c8:	e3 e3       	ldi	r30, 0x33	; 51
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	89 81       	ldd	r24, Y+1	; 0x01
    13ce:	80 83       	st	Z, r24
    13d0:	04 c0       	rjmp	.+8      	; 0x13da <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			PIND = port_value;
    13d2:	e0 e3       	ldi	r30, 0x30	; 48
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	89 81       	ldd	r24, Y+1	; 0x01
    13d8:	80 83       	st	Z, r24
			break;
		}
	}
	return port_value;
    13da:	89 81       	ldd	r24, Y+1	; 0x01
}
    13dc:	0f 90       	pop	r0
    13de:	0f 90       	pop	r0
    13e0:	0f 90       	pop	r0
    13e2:	0f 90       	pop	r0
    13e4:	cf 91       	pop	r28
    13e6:	df 91       	pop	r29
    13e8:	08 95       	ret

000013ea <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(UART_Config *Config_Ptr)
{
    13ea:	df 93       	push	r29
    13ec:	cf 93       	push	r28
    13ee:	00 d0       	rcall	.+0      	; 0x13f0 <UART_init+0x6>
    13f0:	00 d0       	rcall	.+0      	; 0x13f2 <UART_init+0x8>
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62
    13f6:	9c 83       	std	Y+4, r25	; 0x04
    13f8:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    13fa:	1a 82       	std	Y+2, r1	; 0x02
    13fc:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    13fe:	eb e2       	ldi	r30, 0x2B	; 43
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	82 e0       	ldi	r24, 0x02	; 2
    1404:	80 83       	st	Z, r24
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 according to the configuration structure
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    1406:	ea e2       	ldi	r30, 0x2A	; 42
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	88 e1       	ldi	r24, 0x18	; 24
    140c:	80 83       	st	Z, r24
	UCSRB= (UCSRB&0xFB)| ((Config_Ptr->frame)&0b100);
    140e:	aa e2       	ldi	r26, 0x2A	; 42
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	ea e2       	ldi	r30, 0x2A	; 42
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	98 2f       	mov	r25, r24
    141a:	9b 7f       	andi	r25, 0xFB	; 251
    141c:	eb 81       	ldd	r30, Y+3	; 0x03
    141e:	fc 81       	ldd	r31, Y+4	; 0x04
    1420:	82 81       	ldd	r24, Z+2	; 0x02
    1422:	84 70       	andi	r24, 0x04	; 4
    1424:	89 2b       	or	r24, r25
    1426:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    1428:	e0 e4       	ldi	r30, 0x40	; 64
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 e8       	ldi	r24, 0x80	; 128
    142e:	80 83       	st	Z, r24
	UCSRC= (UCSRC&0xCF) | ((Config_Ptr->parity)<<4);
    1430:	a0 e4       	ldi	r26, 0x40	; 64
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	e0 e4       	ldi	r30, 0x40	; 64
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	28 2f       	mov	r18, r24
    143c:	2f 7c       	andi	r18, 0xCF	; 207
    143e:	eb 81       	ldd	r30, Y+3	; 0x03
    1440:	fc 81       	ldd	r31, Y+4	; 0x04
    1442:	80 81       	ld	r24, Z
    1444:	88 2f       	mov	r24, r24
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	82 95       	swap	r24
    144a:	92 95       	swap	r25
    144c:	90 7f       	andi	r25, 0xF0	; 240
    144e:	98 27       	eor	r25, r24
    1450:	80 7f       	andi	r24, 0xF0	; 240
    1452:	98 27       	eor	r25, r24
    1454:	82 2b       	or	r24, r18
    1456:	8c 93       	st	X, r24
	UCSRC=(UCSRC&0xF7) | ((Config_Ptr->stop_bit)<<3);
    1458:	a0 e4       	ldi	r26, 0x40	; 64
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	e0 e4       	ldi	r30, 0x40	; 64
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	28 2f       	mov	r18, r24
    1464:	27 7f       	andi	r18, 0xF7	; 247
    1466:	eb 81       	ldd	r30, Y+3	; 0x03
    1468:	fc 81       	ldd	r31, Y+4	; 0x04
    146a:	81 81       	ldd	r24, Z+1	; 0x01
    146c:	88 2f       	mov	r24, r24
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	88 0f       	add	r24, r24
    1476:	99 1f       	adc	r25, r25
    1478:	88 0f       	add	r24, r24
    147a:	99 1f       	adc	r25, r25
    147c:	82 2b       	or	r24, r18
    147e:	8c 93       	st	X, r24
	UCSRC=(UCSRC&0xF9) | (((Config_Ptr->frame)&0x011)<<1);
    1480:	a0 e4       	ldi	r26, 0x40	; 64
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e0 e4       	ldi	r30, 0x40	; 64
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	28 2f       	mov	r18, r24
    148c:	29 7f       	andi	r18, 0xF9	; 249
    148e:	eb 81       	ldd	r30, Y+3	; 0x03
    1490:	fc 81       	ldd	r31, Y+4	; 0x04
    1492:	82 81       	ldd	r24, Z+2	; 0x02
    1494:	88 2f       	mov	r24, r24
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	81 71       	andi	r24, 0x11	; 17
    149a:	90 70       	andi	r25, 0x00	; 0
    149c:	88 0f       	add	r24, r24
    149e:	99 1f       	adc	r25, r25
    14a0:	82 2b       	or	r24, r18
    14a2:	8c 93       	st	X, r24
//	UCSRC = (1<<URSEL) |((Config_Ptr->parity & 0x03)<<UPM0)|((Config_Ptr->stop_bit & 0x01)<<USBS)|
	//		(Config_Ptr->frame);
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    14a4:	eb 81       	ldd	r30, Y+3	; 0x03
    14a6:	fc 81       	ldd	r31, Y+4	; 0x04
    14a8:	83 81       	ldd	r24, Z+3	; 0x03
    14aa:	94 81       	ldd	r25, Z+4	; 0x04
    14ac:	a5 81       	ldd	r26, Z+5	; 0x05
    14ae:	b6 81       	ldd	r27, Z+6	; 0x06
    14b0:	88 0f       	add	r24, r24
    14b2:	99 1f       	adc	r25, r25
    14b4:	aa 1f       	adc	r26, r26
    14b6:	bb 1f       	adc	r27, r27
    14b8:	88 0f       	add	r24, r24
    14ba:	99 1f       	adc	r25, r25
    14bc:	aa 1f       	adc	r26, r26
    14be:	bb 1f       	adc	r27, r27
    14c0:	88 0f       	add	r24, r24
    14c2:	99 1f       	adc	r25, r25
    14c4:	aa 1f       	adc	r26, r26
    14c6:	bb 1f       	adc	r27, r27
    14c8:	9c 01       	movw	r18, r24
    14ca:	ad 01       	movw	r20, r26
    14cc:	80 e0       	ldi	r24, 0x00	; 0
    14ce:	92 e1       	ldi	r25, 0x12	; 18
    14d0:	aa e7       	ldi	r26, 0x7A	; 122
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	bc 01       	movw	r22, r24
    14d6:	cd 01       	movw	r24, r26
    14d8:	0e 94 47 1b 	call	0x368e	; 0x368e <__udivmodsi4>
    14dc:	da 01       	movw	r26, r20
    14de:	c9 01       	movw	r24, r18
    14e0:	01 97       	sbiw	r24, 0x01	; 1
    14e2:	9a 83       	std	Y+2, r25	; 0x02
    14e4:	89 83       	std	Y+1, r24	; 0x01
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    14e6:	e0 e4       	ldi	r30, 0x40	; 64
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	9a 81       	ldd	r25, Y+2	; 0x02
    14ee:	89 2f       	mov	r24, r25
    14f0:	99 27       	eor	r25, r25
    14f2:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    14f4:	e9 e2       	ldi	r30, 0x29	; 41
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
    14fa:	80 83       	st	Z, r24
}
    14fc:	0f 90       	pop	r0
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	cf 91       	pop	r28
    1506:	df 91       	pop	r29
    1508:	08 95       	ret

0000150a <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    150a:	df 93       	push	r29
    150c:	cf 93       	push	r28
    150e:	0f 92       	push	r0
    1510:	cd b7       	in	r28, 0x3d	; 61
    1512:	de b7       	in	r29, 0x3e	; 62
    1514:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1516:	eb e2       	ldi	r30, 0x2B	; 43
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	88 2f       	mov	r24, r24
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	80 72       	andi	r24, 0x20	; 32
    1522:	90 70       	andi	r25, 0x00	; 0
    1524:	00 97       	sbiw	r24, 0x00	; 0
    1526:	b9 f3       	breq	.-18     	; 0x1516 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    1528:	ec e2       	ldi	r30, 0x2C	; 44
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	89 81       	ldd	r24, Y+1	; 0x01
    152e:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    1530:	0f 90       	pop	r0
    1532:	cf 91       	pop	r28
    1534:	df 91       	pop	r29
    1536:	08 95       	ret

00001538 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    1538:	df 93       	push	r29
    153a:	cf 93       	push	r28
    153c:	cd b7       	in	r28, 0x3d	; 61
    153e:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1540:	eb e2       	ldi	r30, 0x2B	; 43
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	88 23       	and	r24, r24
    1548:	dc f7       	brge	.-10     	; 0x1540 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    154a:	ec e2       	ldi	r30, 0x2C	; 44
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
}
    1550:	cf 91       	pop	r28
    1552:	df 91       	pop	r29
    1554:	08 95       	ret

00001556 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	00 d0       	rcall	.+0      	; 0x155c <UART_sendString+0x6>
    155c:	0f 92       	push	r0
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
    1562:	9b 83       	std	Y+3, r25	; 0x03
    1564:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1566:	19 82       	std	Y+1, r1	; 0x01
    1568:	0e c0       	rjmp	.+28     	; 0x1586 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    156a:	89 81       	ldd	r24, Y+1	; 0x01
    156c:	28 2f       	mov	r18, r24
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	8a 81       	ldd	r24, Y+2	; 0x02
    1572:	9b 81       	ldd	r25, Y+3	; 0x03
    1574:	fc 01       	movw	r30, r24
    1576:	e2 0f       	add	r30, r18
    1578:	f3 1f       	adc	r31, r19
    157a:	80 81       	ld	r24, Z
    157c:	0e 94 85 0a 	call	0x150a	; 0x150a <UART_sendByte>
		i++;
    1580:	89 81       	ldd	r24, Y+1	; 0x01
    1582:	8f 5f       	subi	r24, 0xFF	; 255
    1584:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    1586:	89 81       	ldd	r24, Y+1	; 0x01
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	9b 81       	ldd	r25, Y+3	; 0x03
    1590:	fc 01       	movw	r30, r24
    1592:	e2 0f       	add	r30, r18
    1594:	f3 1f       	adc	r31, r19
    1596:	80 81       	ld	r24, Z
    1598:	88 23       	and	r24, r24
    159a:	39 f7       	brne	.-50     	; 0x156a <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	cf 91       	pop	r28
    15a4:	df 91       	pop	r29
    15a6:	08 95       	ret

000015a8 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    15a8:	0f 93       	push	r16
    15aa:	1f 93       	push	r17
    15ac:	df 93       	push	r29
    15ae:	cf 93       	push	r28
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <UART_receiveString+0xa>
    15b2:	0f 92       	push	r0
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	9b 83       	std	Y+3, r25	; 0x03
    15ba:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    15bc:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    15be:	89 81       	ldd	r24, Y+1	; 0x01
    15c0:	28 2f       	mov	r18, r24
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	8a 81       	ldd	r24, Y+2	; 0x02
    15c6:	9b 81       	ldd	r25, Y+3	; 0x03
    15c8:	8c 01       	movw	r16, r24
    15ca:	02 0f       	add	r16, r18
    15cc:	13 1f       	adc	r17, r19
    15ce:	0e 94 9c 0a 	call	0x1538	; 0x1538 <UART_recieveByte>
    15d2:	f8 01       	movw	r30, r16
    15d4:	80 83       	st	Z, r24
    15d6:	0f c0       	rjmp	.+30     	; 0x15f6 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    15d8:	89 81       	ldd	r24, Y+1	; 0x01
    15da:	8f 5f       	subi	r24, 0xFF	; 255
    15dc:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    15de:	89 81       	ldd	r24, Y+1	; 0x01
    15e0:	28 2f       	mov	r18, r24
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	9b 81       	ldd	r25, Y+3	; 0x03
    15e8:	8c 01       	movw	r16, r24
    15ea:	02 0f       	add	r16, r18
    15ec:	13 1f       	adc	r17, r19
    15ee:	0e 94 9c 0a 	call	0x1538	; 0x1538 <UART_recieveByte>
    15f2:	f8 01       	movw	r30, r16
    15f4:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    15f6:	89 81       	ldd	r24, Y+1	; 0x01
    15f8:	28 2f       	mov	r18, r24
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	8a 81       	ldd	r24, Y+2	; 0x02
    15fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1600:	fc 01       	movw	r30, r24
    1602:	e2 0f       	add	r30, r18
    1604:	f3 1f       	adc	r31, r19
    1606:	80 81       	ld	r24, Z
    1608:	83 32       	cpi	r24, 0x23	; 35
    160a:	31 f7       	brne	.-52     	; 0x15d8 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    160c:	89 81       	ldd	r24, Y+1	; 0x01
    160e:	28 2f       	mov	r18, r24
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	8a 81       	ldd	r24, Y+2	; 0x02
    1614:	9b 81       	ldd	r25, Y+3	; 0x03
    1616:	fc 01       	movw	r30, r24
    1618:	e2 0f       	add	r30, r18
    161a:	f3 1f       	adc	r31, r19
    161c:	10 82       	st	Z, r1
}
    161e:	0f 90       	pop	r0
    1620:	0f 90       	pop	r0
    1622:	0f 90       	pop	r0
    1624:	cf 91       	pop	r28
    1626:	df 91       	pop	r29
    1628:	1f 91       	pop	r17
    162a:	0f 91       	pop	r16
    162c:	08 95       	ret

0000162e <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    162e:	df 93       	push	r29
    1630:	cf 93       	push	r28
    1632:	00 d0       	rcall	.+0      	; 0x1634 <KEYPAD_getPressedKey+0x6>
    1634:	0f 92       	push	r0
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    163a:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    163c:	1b 82       	std	Y+3, r1	; 0x03
    163e:	43 c0       	rjmp	.+134    	; 0x16c6 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1640:	80 e0       	ldi	r24, 0x00	; 0
    1642:	60 e0       	ldi	r22, 0x00	; 0
    1644:	0e 94 28 09 	call	0x1250	; 0x1250 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	98 2f       	mov	r25, r24
    164c:	9c 5f       	subi	r25, 0xFC	; 252
    164e:	80 e0       	ldi	r24, 0x00	; 0
    1650:	69 2f       	mov	r22, r25
    1652:	41 e0       	ldi	r20, 0x01	; 1
    1654:	0e 94 b7 06 	call	0xd6e	; 0xd6e <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1658:	8b 81       	ldd	r24, Y+3	; 0x03
    165a:	88 2f       	mov	r24, r24
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	9c 01       	movw	r18, r24
    1660:	2c 5f       	subi	r18, 0xFC	; 252
    1662:	3f 4f       	sbci	r19, 0xFF	; 255
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	02 c0       	rjmp	.+4      	; 0x166e <KEYPAD_getPressedKey+0x40>
    166a:	88 0f       	add	r24, r24
    166c:	99 1f       	adc	r25, r25
    166e:	2a 95       	dec	r18
    1670:	e2 f7       	brpl	.-8      	; 0x166a <KEYPAD_getPressedKey+0x3c>
    1672:	80 95       	com	r24
    1674:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	69 81       	ldd	r22, Y+1	; 0x01
    167a:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    167e:	1a 82       	std	Y+2, r1	; 0x02
    1680:	1c c0       	rjmp	.+56     	; 0x16ba <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	6a 81       	ldd	r22, Y+2	; 0x02
    1686:	0e 94 8d 08 	call	0x111a	; 0x111a <GPIO_readPin>
    168a:	88 23       	and	r24, r24
    168c:	99 f4       	brne	.+38     	; 0x16b4 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    168e:	8a 81       	ldd	r24, Y+2	; 0x02
    1690:	88 2f       	mov	r24, r24
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	88 0f       	add	r24, r24
    1696:	99 1f       	adc	r25, r25
    1698:	88 0f       	add	r24, r24
    169a:	99 1f       	adc	r25, r25
    169c:	98 2f       	mov	r25, r24
    169e:	8b 81       	ldd	r24, Y+3	; 0x03
    16a0:	89 0f       	add	r24, r25
    16a2:	8f 5f       	subi	r24, 0xFF	; 255
    16a4:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    16a8:	0f 90       	pop	r0
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	cf 91       	pop	r28
    16b0:	df 91       	pop	r29
    16b2:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	8f 5f       	subi	r24, 0xFF	; 255
    16b8:	8a 83       	std	Y+2, r24	; 0x02
    16ba:	8a 81       	ldd	r24, Y+2	; 0x02
    16bc:	84 30       	cpi	r24, 0x04	; 4
    16be:	08 f3       	brcs	.-62     	; 0x1682 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    16c0:	8b 81       	ldd	r24, Y+3	; 0x03
    16c2:	8f 5f       	subi	r24, 0xFF	; 255
    16c4:	8b 83       	std	Y+3, r24	; 0x03
    16c6:	8b 81       	ldd	r24, Y+3	; 0x03
    16c8:	84 30       	cpi	r24, 0x04	; 4
    16ca:	08 f4       	brcc	.+2      	; 0x16ce <KEYPAD_getPressedKey+0xa0>
    16cc:	b9 cf       	rjmp	.-142    	; 0x1640 <KEYPAD_getPressedKey+0x12>
    16ce:	b6 cf       	rjmp	.-148    	; 0x163c <KEYPAD_getPressedKey+0xe>

000016d0 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    16d0:	df 93       	push	r29
    16d2:	cf 93       	push	r28
    16d4:	00 d0       	rcall	.+0      	; 0x16d6 <KEYPAD_4x4_adjustKeyNumber+0x6>
    16d6:	00 d0       	rcall	.+0      	; 0x16d8 <KEYPAD_4x4_adjustKeyNumber+0x8>
    16d8:	cd b7       	in	r28, 0x3d	; 61
    16da:	de b7       	in	r29, 0x3e	; 62
    16dc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    16de:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    16e0:	8a 81       	ldd	r24, Y+2	; 0x02
    16e2:	28 2f       	mov	r18, r24
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	3c 83       	std	Y+4, r19	; 0x04
    16e8:	2b 83       	std	Y+3, r18	; 0x03
    16ea:	8b 81       	ldd	r24, Y+3	; 0x03
    16ec:	9c 81       	ldd	r25, Y+4	; 0x04
    16ee:	88 30       	cpi	r24, 0x08	; 8
    16f0:	91 05       	cpc	r25, r1
    16f2:	09 f4       	brne	.+2      	; 0x16f6 <KEYPAD_4x4_adjustKeyNumber+0x26>
    16f4:	70 c0       	rjmp	.+224    	; 0x17d6 <KEYPAD_4x4_adjustKeyNumber+0x106>
    16f6:	2b 81       	ldd	r18, Y+3	; 0x03
    16f8:	3c 81       	ldd	r19, Y+4	; 0x04
    16fa:	29 30       	cpi	r18, 0x09	; 9
    16fc:	31 05       	cpc	r19, r1
    16fe:	5c f5       	brge	.+86     	; 0x1756 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1700:	8b 81       	ldd	r24, Y+3	; 0x03
    1702:	9c 81       	ldd	r25, Y+4	; 0x04
    1704:	84 30       	cpi	r24, 0x04	; 4
    1706:	91 05       	cpc	r25, r1
    1708:	09 f4       	brne	.+2      	; 0x170c <KEYPAD_4x4_adjustKeyNumber+0x3c>
    170a:	59 c0       	rjmp	.+178    	; 0x17be <KEYPAD_4x4_adjustKeyNumber+0xee>
    170c:	2b 81       	ldd	r18, Y+3	; 0x03
    170e:	3c 81       	ldd	r19, Y+4	; 0x04
    1710:	25 30       	cpi	r18, 0x05	; 5
    1712:	31 05       	cpc	r19, r1
    1714:	9c f4       	brge	.+38     	; 0x173c <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1716:	8b 81       	ldd	r24, Y+3	; 0x03
    1718:	9c 81       	ldd	r25, Y+4	; 0x04
    171a:	82 30       	cpi	r24, 0x02	; 2
    171c:	91 05       	cpc	r25, r1
    171e:	09 f4       	brne	.+2      	; 0x1722 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1720:	48 c0       	rjmp	.+144    	; 0x17b2 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1722:	2b 81       	ldd	r18, Y+3	; 0x03
    1724:	3c 81       	ldd	r19, Y+4	; 0x04
    1726:	23 30       	cpi	r18, 0x03	; 3
    1728:	31 05       	cpc	r19, r1
    172a:	0c f0       	brlt	.+2      	; 0x172e <KEYPAD_4x4_adjustKeyNumber+0x5e>
    172c:	45 c0       	rjmp	.+138    	; 0x17b8 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    172e:	8b 81       	ldd	r24, Y+3	; 0x03
    1730:	9c 81       	ldd	r25, Y+4	; 0x04
    1732:	81 30       	cpi	r24, 0x01	; 1
    1734:	91 05       	cpc	r25, r1
    1736:	09 f4       	brne	.+2      	; 0x173a <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1738:	39 c0       	rjmp	.+114    	; 0x17ac <KEYPAD_4x4_adjustKeyNumber+0xdc>
    173a:	67 c0       	rjmp	.+206    	; 0x180a <KEYPAD_4x4_adjustKeyNumber+0x13a>
    173c:	2b 81       	ldd	r18, Y+3	; 0x03
    173e:	3c 81       	ldd	r19, Y+4	; 0x04
    1740:	26 30       	cpi	r18, 0x06	; 6
    1742:	31 05       	cpc	r19, r1
    1744:	09 f4       	brne	.+2      	; 0x1748 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1746:	41 c0       	rjmp	.+130    	; 0x17ca <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1748:	8b 81       	ldd	r24, Y+3	; 0x03
    174a:	9c 81       	ldd	r25, Y+4	; 0x04
    174c:	87 30       	cpi	r24, 0x07	; 7
    174e:	91 05       	cpc	r25, r1
    1750:	0c f0       	brlt	.+2      	; 0x1754 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1752:	3e c0       	rjmp	.+124    	; 0x17d0 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1754:	37 c0       	rjmp	.+110    	; 0x17c4 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1756:	2b 81       	ldd	r18, Y+3	; 0x03
    1758:	3c 81       	ldd	r19, Y+4	; 0x04
    175a:	2c 30       	cpi	r18, 0x0C	; 12
    175c:	31 05       	cpc	r19, r1
    175e:	09 f4       	brne	.+2      	; 0x1762 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1760:	46 c0       	rjmp	.+140    	; 0x17ee <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	9c 81       	ldd	r25, Y+4	; 0x04
    1766:	8d 30       	cpi	r24, 0x0D	; 13
    1768:	91 05       	cpc	r25, r1
    176a:	5c f4       	brge	.+22     	; 0x1782 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    176c:	2b 81       	ldd	r18, Y+3	; 0x03
    176e:	3c 81       	ldd	r19, Y+4	; 0x04
    1770:	2a 30       	cpi	r18, 0x0A	; 10
    1772:	31 05       	cpc	r19, r1
    1774:	b1 f1       	breq	.+108    	; 0x17e2 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1776:	8b 81       	ldd	r24, Y+3	; 0x03
    1778:	9c 81       	ldd	r25, Y+4	; 0x04
    177a:	8b 30       	cpi	r24, 0x0B	; 11
    177c:	91 05       	cpc	r25, r1
    177e:	a4 f5       	brge	.+104    	; 0x17e8 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1780:	2d c0       	rjmp	.+90     	; 0x17dc <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1782:	2b 81       	ldd	r18, Y+3	; 0x03
    1784:	3c 81       	ldd	r19, Y+4	; 0x04
    1786:	2e 30       	cpi	r18, 0x0E	; 14
    1788:	31 05       	cpc	r19, r1
    178a:	b9 f1       	breq	.+110    	; 0x17fa <KEYPAD_4x4_adjustKeyNumber+0x12a>
    178c:	8b 81       	ldd	r24, Y+3	; 0x03
    178e:	9c 81       	ldd	r25, Y+4	; 0x04
    1790:	8e 30       	cpi	r24, 0x0E	; 14
    1792:	91 05       	cpc	r25, r1
    1794:	7c f1       	brlt	.+94     	; 0x17f4 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1796:	2b 81       	ldd	r18, Y+3	; 0x03
    1798:	3c 81       	ldd	r19, Y+4	; 0x04
    179a:	2f 30       	cpi	r18, 0x0F	; 15
    179c:	31 05       	cpc	r19, r1
    179e:	79 f1       	breq	.+94     	; 0x17fe <KEYPAD_4x4_adjustKeyNumber+0x12e>
    17a0:	8b 81       	ldd	r24, Y+3	; 0x03
    17a2:	9c 81       	ldd	r25, Y+4	; 0x04
    17a4:	80 31       	cpi	r24, 0x10	; 16
    17a6:	91 05       	cpc	r25, r1
    17a8:	69 f1       	breq	.+90     	; 0x1804 <KEYPAD_4x4_adjustKeyNumber+0x134>
    17aa:	2f c0       	rjmp	.+94     	; 0x180a <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    17ac:	87 e0       	ldi	r24, 0x07	; 7
    17ae:	89 83       	std	Y+1, r24	; 0x01
    17b0:	2e c0       	rjmp	.+92     	; 0x180e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    17b2:	88 e0       	ldi	r24, 0x08	; 8
    17b4:	89 83       	std	Y+1, r24	; 0x01
    17b6:	2b c0       	rjmp	.+86     	; 0x180e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    17b8:	89 e0       	ldi	r24, 0x09	; 9
    17ba:	89 83       	std	Y+1, r24	; 0x01
    17bc:	28 c0       	rjmp	.+80     	; 0x180e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    17be:	85 e2       	ldi	r24, 0x25	; 37
    17c0:	89 83       	std	Y+1, r24	; 0x01
    17c2:	25 c0       	rjmp	.+74     	; 0x180e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    17c4:	84 e0       	ldi	r24, 0x04	; 4
    17c6:	89 83       	std	Y+1, r24	; 0x01
    17c8:	22 c0       	rjmp	.+68     	; 0x180e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    17ca:	85 e0       	ldi	r24, 0x05	; 5
    17cc:	89 83       	std	Y+1, r24	; 0x01
    17ce:	1f c0       	rjmp	.+62     	; 0x180e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    17d0:	86 e0       	ldi	r24, 0x06	; 6
    17d2:	89 83       	std	Y+1, r24	; 0x01
    17d4:	1c c0       	rjmp	.+56     	; 0x180e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    17d6:	8a e2       	ldi	r24, 0x2A	; 42
    17d8:	89 83       	std	Y+1, r24	; 0x01
    17da:	19 c0       	rjmp	.+50     	; 0x180e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	89 83       	std	Y+1, r24	; 0x01
    17e0:	16 c0       	rjmp	.+44     	; 0x180e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    17e2:	82 e0       	ldi	r24, 0x02	; 2
    17e4:	89 83       	std	Y+1, r24	; 0x01
    17e6:	13 c0       	rjmp	.+38     	; 0x180e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    17e8:	83 e0       	ldi	r24, 0x03	; 3
    17ea:	89 83       	std	Y+1, r24	; 0x01
    17ec:	10 c0       	rjmp	.+32     	; 0x180e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    17ee:	8d e2       	ldi	r24, 0x2D	; 45
    17f0:	89 83       	std	Y+1, r24	; 0x01
    17f2:	0d c0       	rjmp	.+26     	; 0x180e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    17f4:	8d e0       	ldi	r24, 0x0D	; 13
    17f6:	89 83       	std	Y+1, r24	; 0x01
    17f8:	0a c0       	rjmp	.+20     	; 0x180e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    17fa:	19 82       	std	Y+1, r1	; 0x01
    17fc:	08 c0       	rjmp	.+16     	; 0x180e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    17fe:	8d e3       	ldi	r24, 0x3D	; 61
    1800:	89 83       	std	Y+1, r24	; 0x01
    1802:	05 c0       	rjmp	.+10     	; 0x180e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1804:	8b e2       	ldi	r24, 0x2B	; 43
    1806:	89 83       	std	Y+1, r24	; 0x01
    1808:	02 c0       	rjmp	.+4      	; 0x180e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    180a:	8a 81       	ldd	r24, Y+2	; 0x02
    180c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    180e:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1810:	0f 90       	pop	r0
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	0f 90       	pop	r0
    1818:	cf 91       	pop	r28
    181a:	df 91       	pop	r29
    181c:	08 95       	ret

0000181e <LCD_init>:

/* FUNCTION DEFINATION*/

/*Initialize the LCD*/
void LCD_init(void)
{
    181e:	df 93       	push	r29
    1820:	cf 93       	push	r28
    1822:	cd b7       	in	r28, 0x3d	; 61
    1824:	de b7       	in	r29, 0x3e	; 62
    1826:	2e 97       	sbiw	r28, 0x0e	; 14
    1828:	0f b6       	in	r0, 0x3f	; 63
    182a:	f8 94       	cli
    182c:	de bf       	out	0x3e, r29	; 62
    182e:	0f be       	out	0x3f, r0	; 63
    1830:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID,PIN_OUTPUT );
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	60 e0       	ldi	r22, 0x00	; 0
    1836:	41 e0       	ldi	r20, 0x01	; 1
    1838:	0e 94 b7 06 	call	0xd6e	; 0xd6e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID,PIN_OUTPUT );
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	62 e0       	ldi	r22, 0x02	; 2
    1840:	41 e0       	ldi	r20, 0x01	; 1
    1842:	0e 94 b7 06 	call	0xd6e	; 0xd6e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID, LCD_RW_PIN_ID,PIN_OUTPUT );	_delay_ms(20);/*DELAY ALWAYS > 15MS*/
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	61 e0       	ldi	r22, 0x01	; 1
    184a:	41 e0       	ldi	r20, 0x01	; 1
    184c:	0e 94 b7 06 	call	0xd6e	; 0xd6e <GPIO_setupPinDirection>
    1850:	80 e0       	ldi	r24, 0x00	; 0
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	a0 ea       	ldi	r26, 0xA0	; 160
    1856:	b1 e4       	ldi	r27, 0x41	; 65
    1858:	8b 87       	std	Y+11, r24	; 0x0b
    185a:	9c 87       	std	Y+12, r25	; 0x0c
    185c:	ad 87       	std	Y+13, r26	; 0x0d
    185e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1860:	6b 85       	ldd	r22, Y+11	; 0x0b
    1862:	7c 85       	ldd	r23, Y+12	; 0x0c
    1864:	8d 85       	ldd	r24, Y+13	; 0x0d
    1866:	9e 85       	ldd	r25, Y+14	; 0x0e
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	4a ef       	ldi	r20, 0xFA	; 250
    186e:	54 e4       	ldi	r21, 0x44	; 68
    1870:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	8f 83       	std	Y+7, r24	; 0x07
    187a:	98 87       	std	Y+8, r25	; 0x08
    187c:	a9 87       	std	Y+9, r26	; 0x09
    187e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1880:	6f 81       	ldd	r22, Y+7	; 0x07
    1882:	78 85       	ldd	r23, Y+8	; 0x08
    1884:	89 85       	ldd	r24, Y+9	; 0x09
    1886:	9a 85       	ldd	r25, Y+10	; 0x0a
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	40 e8       	ldi	r20, 0x80	; 128
    188e:	5f e3       	ldi	r21, 0x3F	; 63
    1890:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1894:	88 23       	and	r24, r24
    1896:	2c f4       	brge	.+10     	; 0x18a2 <LCD_init+0x84>
		__ticks = 1;
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	9e 83       	std	Y+6, r25	; 0x06
    189e:	8d 83       	std	Y+5, r24	; 0x05
    18a0:	3f c0       	rjmp	.+126    	; 0x1920 <LCD_init+0x102>
	else if (__tmp > 65535)
    18a2:	6f 81       	ldd	r22, Y+7	; 0x07
    18a4:	78 85       	ldd	r23, Y+8	; 0x08
    18a6:	89 85       	ldd	r24, Y+9	; 0x09
    18a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	3f ef       	ldi	r19, 0xFF	; 255
    18ae:	4f e7       	ldi	r20, 0x7F	; 127
    18b0:	57 e4       	ldi	r21, 0x47	; 71
    18b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18b6:	18 16       	cp	r1, r24
    18b8:	4c f5       	brge	.+82     	; 0x190c <LCD_init+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    18bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    18be:	8d 85       	ldd	r24, Y+13	; 0x0d
    18c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	40 e2       	ldi	r20, 0x20	; 32
    18c8:	51 e4       	ldi	r21, 0x41	; 65
    18ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ce:	dc 01       	movw	r26, r24
    18d0:	cb 01       	movw	r24, r22
    18d2:	bc 01       	movw	r22, r24
    18d4:	cd 01       	movw	r24, r26
    18d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18da:	dc 01       	movw	r26, r24
    18dc:	cb 01       	movw	r24, r22
    18de:	9e 83       	std	Y+6, r25	; 0x06
    18e0:	8d 83       	std	Y+5, r24	; 0x05
    18e2:	0f c0       	rjmp	.+30     	; 0x1902 <LCD_init+0xe4>
    18e4:	88 ec       	ldi	r24, 0xC8	; 200
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	9c 83       	std	Y+4, r25	; 0x04
    18ea:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18ec:	8b 81       	ldd	r24, Y+3	; 0x03
    18ee:	9c 81       	ldd	r25, Y+4	; 0x04
    18f0:	01 97       	sbiw	r24, 0x01	; 1
    18f2:	f1 f7       	brne	.-4      	; 0x18f0 <LCD_init+0xd2>
    18f4:	9c 83       	std	Y+4, r25	; 0x04
    18f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f8:	8d 81       	ldd	r24, Y+5	; 0x05
    18fa:	9e 81       	ldd	r25, Y+6	; 0x06
    18fc:	01 97       	sbiw	r24, 0x01	; 1
    18fe:	9e 83       	std	Y+6, r25	; 0x06
    1900:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1902:	8d 81       	ldd	r24, Y+5	; 0x05
    1904:	9e 81       	ldd	r25, Y+6	; 0x06
    1906:	00 97       	sbiw	r24, 0x00	; 0
    1908:	69 f7       	brne	.-38     	; 0x18e4 <LCD_init+0xc6>
    190a:	14 c0       	rjmp	.+40     	; 0x1934 <LCD_init+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    190c:	6f 81       	ldd	r22, Y+7	; 0x07
    190e:	78 85       	ldd	r23, Y+8	; 0x08
    1910:	89 85       	ldd	r24, Y+9	; 0x09
    1912:	9a 85       	ldd	r25, Y+10	; 0x0a
    1914:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	9e 83       	std	Y+6, r25	; 0x06
    191e:	8d 83       	std	Y+5, r24	; 0x05
    1920:	8d 81       	ldd	r24, Y+5	; 0x05
    1922:	9e 81       	ldd	r25, Y+6	; 0x06
    1924:	9a 83       	std	Y+2, r25	; 0x02
    1926:	89 83       	std	Y+1, r24	; 0x01
    1928:	89 81       	ldd	r24, Y+1	; 0x01
    192a:	9a 81       	ldd	r25, Y+2	; 0x02
    192c:	01 97       	sbiw	r24, 0x01	; 1
    192e:	f1 f7       	brne	.-4      	; 0x192c <LCD_init+0x10e>
    1930:	9a 83       	std	Y+2, r25	; 0x02
    1932:	89 83       	std	Y+1, r24	; 0x01

	#if(LCD_DATA_BITS_MODE == 8)
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    1934:	82 e0       	ldi	r24, 0x02	; 2
    1936:	6f ef       	ldi	r22, 0xFF	; 255
    1938:	0e 94 28 09 	call	0x1250	; 0x1250 <GPIO_setupPortDirection>
	LCD_SendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    193c:	88 e3       	ldi	r24, 0x38	; 56
    193e:	0e 94 b0 0c 	call	0x1960	; 0x1960 <LCD_SendCommand>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID , PIN_OUTPUT);
	LCD_SendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
	LCD_SendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
	LCD_SendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
#endif
	LCD_SendCommand(LCD_CURSOR_OFF); /* cursor off */
    1942:	8c e0       	ldi	r24, 0x0C	; 12
    1944:	0e 94 b0 0c 	call	0x1960	; 0x1960 <LCD_SendCommand>
	LCD_SendCommand(LCD_CLEAR_COMMAND);
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	0e 94 b0 0c 	call	0x1960	; 0x1960 <LCD_SendCommand>
}
    194e:	2e 96       	adiw	r28, 0x0e	; 14
    1950:	0f b6       	in	r0, 0x3f	; 63
    1952:	f8 94       	cli
    1954:	de bf       	out	0x3e, r29	; 62
    1956:	0f be       	out	0x3f, r0	; 63
    1958:	cd bf       	out	0x3d, r28	; 61
    195a:	cf 91       	pop	r28
    195c:	df 91       	pop	r29
    195e:	08 95       	ret

00001960 <LCD_SendCommand>:

/*SEND COMMAND*/

void LCD_SendCommand(uint8 command)
{
    1960:	df 93       	push	r29
    1962:	cf 93       	push	r28
    1964:	cd b7       	in	r28, 0x3d	; 61
    1966:	de b7       	in	r29, 0x3e	; 62
    1968:	e9 97       	sbiw	r28, 0x39	; 57
    196a:	0f b6       	in	r0, 0x3f	; 63
    196c:	f8 94       	cli
    196e:	de bf       	out	0x3e, r29	; 62
    1970:	0f be       	out	0x3f, r0	; 63
    1972:	cd bf       	out	0x3d, r28	; 61
    1974:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);/*RS=0*/
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	60 e0       	ldi	r22, 0x00	; 0
    197a:	40 e0       	ldi	r20, 0x00	; 0
    197c:	0e 94 a2 07 	call	0xf44	; 0xf44 <GPIO_writePin>
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	a0 e8       	ldi	r26, 0x80	; 128
    1986:	bf e3       	ldi	r27, 0x3F	; 63
    1988:	8d ab       	std	Y+53, r24	; 0x35
    198a:	9e ab       	std	Y+54, r25	; 0x36
    198c:	af ab       	std	Y+55, r26	; 0x37
    198e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1990:	6d a9       	ldd	r22, Y+53	; 0x35
    1992:	7e a9       	ldd	r23, Y+54	; 0x36
    1994:	8f a9       	ldd	r24, Y+55	; 0x37
    1996:	98 ad       	ldd	r25, Y+56	; 0x38
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	4a ef       	ldi	r20, 0xFA	; 250
    199e:	54 e4       	ldi	r21, 0x44	; 68
    19a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a4:	dc 01       	movw	r26, r24
    19a6:	cb 01       	movw	r24, r22
    19a8:	89 ab       	std	Y+49, r24	; 0x31
    19aa:	9a ab       	std	Y+50, r25	; 0x32
    19ac:	ab ab       	std	Y+51, r26	; 0x33
    19ae:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19b0:	69 a9       	ldd	r22, Y+49	; 0x31
    19b2:	7a a9       	ldd	r23, Y+50	; 0x32
    19b4:	8b a9       	ldd	r24, Y+51	; 0x33
    19b6:	9c a9       	ldd	r25, Y+52	; 0x34
    19b8:	20 e0       	ldi	r18, 0x00	; 0
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	40 e8       	ldi	r20, 0x80	; 128
    19be:	5f e3       	ldi	r21, 0x3F	; 63
    19c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19c4:	88 23       	and	r24, r24
    19c6:	2c f4       	brge	.+10     	; 0x19d2 <LCD_SendCommand+0x72>
		__ticks = 1;
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	98 ab       	std	Y+48, r25	; 0x30
    19ce:	8f a7       	std	Y+47, r24	; 0x2f
    19d0:	3f c0       	rjmp	.+126    	; 0x1a50 <LCD_SendCommand+0xf0>
	else if (__tmp > 65535)
    19d2:	69 a9       	ldd	r22, Y+49	; 0x31
    19d4:	7a a9       	ldd	r23, Y+50	; 0x32
    19d6:	8b a9       	ldd	r24, Y+51	; 0x33
    19d8:	9c a9       	ldd	r25, Y+52	; 0x34
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	3f ef       	ldi	r19, 0xFF	; 255
    19de:	4f e7       	ldi	r20, 0x7F	; 127
    19e0:	57 e4       	ldi	r21, 0x47	; 71
    19e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19e6:	18 16       	cp	r1, r24
    19e8:	4c f5       	brge	.+82     	; 0x1a3c <LCD_SendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ea:	6d a9       	ldd	r22, Y+53	; 0x35
    19ec:	7e a9       	ldd	r23, Y+54	; 0x36
    19ee:	8f a9       	ldd	r24, Y+55	; 0x37
    19f0:	98 ad       	ldd	r25, Y+56	; 0x38
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	40 e2       	ldi	r20, 0x20	; 32
    19f8:	51 e4       	ldi	r21, 0x41	; 65
    19fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	bc 01       	movw	r22, r24
    1a04:	cd 01       	movw	r24, r26
    1a06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a0a:	dc 01       	movw	r26, r24
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	98 ab       	std	Y+48, r25	; 0x30
    1a10:	8f a7       	std	Y+47, r24	; 0x2f
    1a12:	0f c0       	rjmp	.+30     	; 0x1a32 <LCD_SendCommand+0xd2>
    1a14:	88 ec       	ldi	r24, 0xC8	; 200
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	9e a7       	std	Y+46, r25	; 0x2e
    1a1a:	8d a7       	std	Y+45, r24	; 0x2d
    1a1c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a1e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a20:	01 97       	sbiw	r24, 0x01	; 1
    1a22:	f1 f7       	brne	.-4      	; 0x1a20 <LCD_SendCommand+0xc0>
    1a24:	9e a7       	std	Y+46, r25	; 0x2e
    1a26:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a28:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a2a:	98 a9       	ldd	r25, Y+48	; 0x30
    1a2c:	01 97       	sbiw	r24, 0x01	; 1
    1a2e:	98 ab       	std	Y+48, r25	; 0x30
    1a30:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a32:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a34:	98 a9       	ldd	r25, Y+48	; 0x30
    1a36:	00 97       	sbiw	r24, 0x00	; 0
    1a38:	69 f7       	brne	.-38     	; 0x1a14 <LCD_SendCommand+0xb4>
    1a3a:	14 c0       	rjmp	.+40     	; 0x1a64 <LCD_SendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a3c:	69 a9       	ldd	r22, Y+49	; 0x31
    1a3e:	7a a9       	ldd	r23, Y+50	; 0x32
    1a40:	8b a9       	ldd	r24, Y+51	; 0x33
    1a42:	9c a9       	ldd	r25, Y+52	; 0x34
    1a44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a48:	dc 01       	movw	r26, r24
    1a4a:	cb 01       	movw	r24, r22
    1a4c:	98 ab       	std	Y+48, r25	; 0x30
    1a4e:	8f a7       	std	Y+47, r24	; 0x2f
    1a50:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a52:	98 a9       	ldd	r25, Y+48	; 0x30
    1a54:	9c a7       	std	Y+44, r25	; 0x2c
    1a56:	8b a7       	std	Y+43, r24	; 0x2b
    1a58:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a5a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a5c:	01 97       	sbiw	r24, 0x01	; 1
    1a5e:	f1 f7       	brne	.-4      	; 0x1a5c <LCD_SendCommand+0xfc>
    1a60:	9c a7       	std	Y+44, r25	; 0x2c
    1a62:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);/*E=1*/
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	62 e0       	ldi	r22, 0x02	; 2
    1a68:	41 e0       	ldi	r20, 0x01	; 1
    1a6a:	0e 94 a2 07 	call	0xf44	; 0xf44 <GPIO_writePin>
    1a6e:	80 e0       	ldi	r24, 0x00	; 0
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	a0 e8       	ldi	r26, 0x80	; 128
    1a74:	bf e3       	ldi	r27, 0x3F	; 63
    1a76:	8f a3       	std	Y+39, r24	; 0x27
    1a78:	98 a7       	std	Y+40, r25	; 0x28
    1a7a:	a9 a7       	std	Y+41, r26	; 0x29
    1a7c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a7e:	6f a1       	ldd	r22, Y+39	; 0x27
    1a80:	78 a5       	ldd	r23, Y+40	; 0x28
    1a82:	89 a5       	ldd	r24, Y+41	; 0x29
    1a84:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	4a ef       	ldi	r20, 0xFA	; 250
    1a8c:	54 e4       	ldi	r21, 0x44	; 68
    1a8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	8b a3       	std	Y+35, r24	; 0x23
    1a98:	9c a3       	std	Y+36, r25	; 0x24
    1a9a:	ad a3       	std	Y+37, r26	; 0x25
    1a9c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a9e:	6b a1       	ldd	r22, Y+35	; 0x23
    1aa0:	7c a1       	ldd	r23, Y+36	; 0x24
    1aa2:	8d a1       	ldd	r24, Y+37	; 0x25
    1aa4:	9e a1       	ldd	r25, Y+38	; 0x26
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	40 e8       	ldi	r20, 0x80	; 128
    1aac:	5f e3       	ldi	r21, 0x3F	; 63
    1aae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ab2:	88 23       	and	r24, r24
    1ab4:	2c f4       	brge	.+10     	; 0x1ac0 <LCD_SendCommand+0x160>
		__ticks = 1;
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	9a a3       	std	Y+34, r25	; 0x22
    1abc:	89 a3       	std	Y+33, r24	; 0x21
    1abe:	3f c0       	rjmp	.+126    	; 0x1b3e <LCD_SendCommand+0x1de>
	else if (__tmp > 65535)
    1ac0:	6b a1       	ldd	r22, Y+35	; 0x23
    1ac2:	7c a1       	ldd	r23, Y+36	; 0x24
    1ac4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ac6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	3f ef       	ldi	r19, 0xFF	; 255
    1acc:	4f e7       	ldi	r20, 0x7F	; 127
    1ace:	57 e4       	ldi	r21, 0x47	; 71
    1ad0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ad4:	18 16       	cp	r1, r24
    1ad6:	4c f5       	brge	.+82     	; 0x1b2a <LCD_SendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad8:	6f a1       	ldd	r22, Y+39	; 0x27
    1ada:	78 a5       	ldd	r23, Y+40	; 0x28
    1adc:	89 a5       	ldd	r24, Y+41	; 0x29
    1ade:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	40 e2       	ldi	r20, 0x20	; 32
    1ae6:	51 e4       	ldi	r21, 0x41	; 65
    1ae8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aec:	dc 01       	movw	r26, r24
    1aee:	cb 01       	movw	r24, r22
    1af0:	bc 01       	movw	r22, r24
    1af2:	cd 01       	movw	r24, r26
    1af4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af8:	dc 01       	movw	r26, r24
    1afa:	cb 01       	movw	r24, r22
    1afc:	9a a3       	std	Y+34, r25	; 0x22
    1afe:	89 a3       	std	Y+33, r24	; 0x21
    1b00:	0f c0       	rjmp	.+30     	; 0x1b20 <LCD_SendCommand+0x1c0>
    1b02:	88 ec       	ldi	r24, 0xC8	; 200
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	98 a3       	std	Y+32, r25	; 0x20
    1b08:	8f 8f       	std	Y+31, r24	; 0x1f
    1b0a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b0c:	98 a1       	ldd	r25, Y+32	; 0x20
    1b0e:	01 97       	sbiw	r24, 0x01	; 1
    1b10:	f1 f7       	brne	.-4      	; 0x1b0e <LCD_SendCommand+0x1ae>
    1b12:	98 a3       	std	Y+32, r25	; 0x20
    1b14:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b16:	89 a1       	ldd	r24, Y+33	; 0x21
    1b18:	9a a1       	ldd	r25, Y+34	; 0x22
    1b1a:	01 97       	sbiw	r24, 0x01	; 1
    1b1c:	9a a3       	std	Y+34, r25	; 0x22
    1b1e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b20:	89 a1       	ldd	r24, Y+33	; 0x21
    1b22:	9a a1       	ldd	r25, Y+34	; 0x22
    1b24:	00 97       	sbiw	r24, 0x00	; 0
    1b26:	69 f7       	brne	.-38     	; 0x1b02 <LCD_SendCommand+0x1a2>
    1b28:	14 c0       	rjmp	.+40     	; 0x1b52 <LCD_SendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b2a:	6b a1       	ldd	r22, Y+35	; 0x23
    1b2c:	7c a1       	ldd	r23, Y+36	; 0x24
    1b2e:	8d a1       	ldd	r24, Y+37	; 0x25
    1b30:	9e a1       	ldd	r25, Y+38	; 0x26
    1b32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b36:	dc 01       	movw	r26, r24
    1b38:	cb 01       	movw	r24, r22
    1b3a:	9a a3       	std	Y+34, r25	; 0x22
    1b3c:	89 a3       	std	Y+33, r24	; 0x21
    1b3e:	89 a1       	ldd	r24, Y+33	; 0x21
    1b40:	9a a1       	ldd	r25, Y+34	; 0x22
    1b42:	9e 8f       	std	Y+30, r25	; 0x1e
    1b44:	8d 8f       	std	Y+29, r24	; 0x1d
    1b46:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b48:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	f1 f7       	brne	.-4      	; 0x1b4a <LCD_SendCommand+0x1ea>
    1b4e:	9e 8f       	std	Y+30, r25	; 0x1e
    1b50:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
#if(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID, command);/*WRITE COMMAND*/
    1b52:	82 e0       	ldi	r24, 0x02	; 2
    1b54:	69 ad       	ldd	r22, Y+57	; 0x39
    1b56:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <GPIO_writePort>
    1b5a:	80 e0       	ldi	r24, 0x00	; 0
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	a0 e8       	ldi	r26, 0x80	; 128
    1b60:	bf e3       	ldi	r27, 0x3F	; 63
    1b62:	89 8f       	std	Y+25, r24	; 0x19
    1b64:	9a 8f       	std	Y+26, r25	; 0x1a
    1b66:	ab 8f       	std	Y+27, r26	; 0x1b
    1b68:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b6a:	69 8d       	ldd	r22, Y+25	; 0x19
    1b6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b70:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b72:	20 e0       	ldi	r18, 0x00	; 0
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	4a ef       	ldi	r20, 0xFA	; 250
    1b78:	54 e4       	ldi	r21, 0x44	; 68
    1b7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b7e:	dc 01       	movw	r26, r24
    1b80:	cb 01       	movw	r24, r22
    1b82:	8d 8b       	std	Y+21, r24	; 0x15
    1b84:	9e 8b       	std	Y+22, r25	; 0x16
    1b86:	af 8b       	std	Y+23, r26	; 0x17
    1b88:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b8a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b8c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b8e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b90:	98 8d       	ldd	r25, Y+24	; 0x18
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	40 e8       	ldi	r20, 0x80	; 128
    1b98:	5f e3       	ldi	r21, 0x3F	; 63
    1b9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b9e:	88 23       	and	r24, r24
    1ba0:	2c f4       	brge	.+10     	; 0x1bac <LCD_SendCommand+0x24c>
		__ticks = 1;
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	9c 8b       	std	Y+20, r25	; 0x14
    1ba8:	8b 8b       	std	Y+19, r24	; 0x13
    1baa:	3f c0       	rjmp	.+126    	; 0x1c2a <LCD_SendCommand+0x2ca>
	else if (__tmp > 65535)
    1bac:	6d 89       	ldd	r22, Y+21	; 0x15
    1bae:	7e 89       	ldd	r23, Y+22	; 0x16
    1bb0:	8f 89       	ldd	r24, Y+23	; 0x17
    1bb2:	98 8d       	ldd	r25, Y+24	; 0x18
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	3f ef       	ldi	r19, 0xFF	; 255
    1bb8:	4f e7       	ldi	r20, 0x7F	; 127
    1bba:	57 e4       	ldi	r21, 0x47	; 71
    1bbc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bc0:	18 16       	cp	r1, r24
    1bc2:	4c f5       	brge	.+82     	; 0x1c16 <LCD_SendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bc4:	69 8d       	ldd	r22, Y+25	; 0x19
    1bc6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	40 e2       	ldi	r20, 0x20	; 32
    1bd2:	51 e4       	ldi	r21, 0x41	; 65
    1bd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	bc 01       	movw	r22, r24
    1bde:	cd 01       	movw	r24, r26
    1be0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	9c 8b       	std	Y+20, r25	; 0x14
    1bea:	8b 8b       	std	Y+19, r24	; 0x13
    1bec:	0f c0       	rjmp	.+30     	; 0x1c0c <LCD_SendCommand+0x2ac>
    1bee:	88 ec       	ldi	r24, 0xC8	; 200
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	9a 8b       	std	Y+18, r25	; 0x12
    1bf4:	89 8b       	std	Y+17, r24	; 0x11
    1bf6:	89 89       	ldd	r24, Y+17	; 0x11
    1bf8:	9a 89       	ldd	r25, Y+18	; 0x12
    1bfa:	01 97       	sbiw	r24, 0x01	; 1
    1bfc:	f1 f7       	brne	.-4      	; 0x1bfa <LCD_SendCommand+0x29a>
    1bfe:	9a 8b       	std	Y+18, r25	; 0x12
    1c00:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c02:	8b 89       	ldd	r24, Y+19	; 0x13
    1c04:	9c 89       	ldd	r25, Y+20	; 0x14
    1c06:	01 97       	sbiw	r24, 0x01	; 1
    1c08:	9c 8b       	std	Y+20, r25	; 0x14
    1c0a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c0c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c0e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c10:	00 97       	sbiw	r24, 0x00	; 0
    1c12:	69 f7       	brne	.-38     	; 0x1bee <LCD_SendCommand+0x28e>
    1c14:	14 c0       	rjmp	.+40     	; 0x1c3e <LCD_SendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c16:	6d 89       	ldd	r22, Y+21	; 0x15
    1c18:	7e 89       	ldd	r23, Y+22	; 0x16
    1c1a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c1c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	9c 8b       	std	Y+20, r25	; 0x14
    1c28:	8b 8b       	std	Y+19, r24	; 0x13
    1c2a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c2c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c2e:	98 8b       	std	Y+16, r25	; 0x10
    1c30:	8f 87       	std	Y+15, r24	; 0x0f
    1c32:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c34:	98 89       	ldd	r25, Y+16	; 0x10
    1c36:	01 97       	sbiw	r24, 0x01	; 1
    1c38:	f1 f7       	brne	.-4      	; 0x1c36 <LCD_SendCommand+0x2d6>
    1c3a:	98 8b       	std	Y+16, r25	; 0x10
    1c3c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID,LOGIC_LOW);/*E=0*/
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	62 e0       	ldi	r22, 0x02	; 2
    1c42:	40 e0       	ldi	r20, 0x00	; 0
    1c44:	0e 94 a2 07 	call	0xf44	; 0xf44 <GPIO_writePin>
    1c48:	80 e0       	ldi	r24, 0x00	; 0
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	a0 e8       	ldi	r26, 0x80	; 128
    1c4e:	bf e3       	ldi	r27, 0x3F	; 63
    1c50:	8b 87       	std	Y+11, r24	; 0x0b
    1c52:	9c 87       	std	Y+12, r25	; 0x0c
    1c54:	ad 87       	std	Y+13, r26	; 0x0d
    1c56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c58:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	4a ef       	ldi	r20, 0xFA	; 250
    1c66:	54 e4       	ldi	r21, 0x44	; 68
    1c68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	8f 83       	std	Y+7, r24	; 0x07
    1c72:	98 87       	std	Y+8, r25	; 0x08
    1c74:	a9 87       	std	Y+9, r26	; 0x09
    1c76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c78:	6f 81       	ldd	r22, Y+7	; 0x07
    1c7a:	78 85       	ldd	r23, Y+8	; 0x08
    1c7c:	89 85       	ldd	r24, Y+9	; 0x09
    1c7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	40 e8       	ldi	r20, 0x80	; 128
    1c86:	5f e3       	ldi	r21, 0x3F	; 63
    1c88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c8c:	88 23       	and	r24, r24
    1c8e:	2c f4       	brge	.+10     	; 0x1c9a <LCD_SendCommand+0x33a>
		__ticks = 1;
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	9e 83       	std	Y+6, r25	; 0x06
    1c96:	8d 83       	std	Y+5, r24	; 0x05
    1c98:	3f c0       	rjmp	.+126    	; 0x1d18 <LCD_SendCommand+0x3b8>
	else if (__tmp > 65535)
    1c9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c9c:	78 85       	ldd	r23, Y+8	; 0x08
    1c9e:	89 85       	ldd	r24, Y+9	; 0x09
    1ca0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	3f ef       	ldi	r19, 0xFF	; 255
    1ca6:	4f e7       	ldi	r20, 0x7F	; 127
    1ca8:	57 e4       	ldi	r21, 0x47	; 71
    1caa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cae:	18 16       	cp	r1, r24
    1cb0:	4c f5       	brge	.+82     	; 0x1d04 <LCD_SendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	40 e2       	ldi	r20, 0x20	; 32
    1cc0:	51 e4       	ldi	r21, 0x41	; 65
    1cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	bc 01       	movw	r22, r24
    1ccc:	cd 01       	movw	r24, r26
    1cce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd2:	dc 01       	movw	r26, r24
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	9e 83       	std	Y+6, r25	; 0x06
    1cd8:	8d 83       	std	Y+5, r24	; 0x05
    1cda:	0f c0       	rjmp	.+30     	; 0x1cfa <LCD_SendCommand+0x39a>
    1cdc:	88 ec       	ldi	r24, 0xC8	; 200
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	9c 83       	std	Y+4, r25	; 0x04
    1ce2:	8b 83       	std	Y+3, r24	; 0x03
    1ce4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce8:	01 97       	sbiw	r24, 0x01	; 1
    1cea:	f1 f7       	brne	.-4      	; 0x1ce8 <LCD_SendCommand+0x388>
    1cec:	9c 83       	std	Y+4, r25	; 0x04
    1cee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf4:	01 97       	sbiw	r24, 0x01	; 1
    1cf6:	9e 83       	std	Y+6, r25	; 0x06
    1cf8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cfa:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cfe:	00 97       	sbiw	r24, 0x00	; 0
    1d00:	69 f7       	brne	.-38     	; 0x1cdc <LCD_SendCommand+0x37c>
    1d02:	14 c0       	rjmp	.+40     	; 0x1d2c <LCD_SendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d04:	6f 81       	ldd	r22, Y+7	; 0x07
    1d06:	78 85       	ldd	r23, Y+8	; 0x08
    1d08:	89 85       	ldd	r24, Y+9	; 0x09
    1d0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22
    1d14:	9e 83       	std	Y+6, r25	; 0x06
    1d16:	8d 83       	std	Y+5, r24	; 0x05
    1d18:	8d 81       	ldd	r24, Y+5	; 0x05
    1d1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d1c:	9a 83       	std	Y+2, r25	; 0x02
    1d1e:	89 83       	std	Y+1, r24	; 0x01
    1d20:	89 81       	ldd	r24, Y+1	; 0x01
    1d22:	9a 81       	ldd	r25, Y+2	; 0x02
    1d24:	01 97       	sbiw	r24, 0x01	; 1
    1d26:	f1 f7       	brne	.-4      	; 0x1d24 <LCD_SendCommand+0x3c4>
    1d28:	9a 83       	std	Y+2, r25	; 0x02
    1d2a:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /*E=0*/
	_delay_ms(1);

#endif

}
    1d2c:	e9 96       	adiw	r28, 0x39	; 57
    1d2e:	0f b6       	in	r0, 0x3f	; 63
    1d30:	f8 94       	cli
    1d32:	de bf       	out	0x3e, r29	; 62
    1d34:	0f be       	out	0x3f, r0	; 63
    1d36:	cd bf       	out	0x3d, r28	; 61
    1d38:	cf 91       	pop	r28
    1d3a:	df 91       	pop	r29
    1d3c:	08 95       	ret

00001d3e <LCD_DisplayChar>:

/*DISPLAY*/

void LCD_DisplayChar(uint8 data)
{
    1d3e:	df 93       	push	r29
    1d40:	cf 93       	push	r28
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62
    1d46:	e9 97       	sbiw	r28, 0x39	; 57
    1d48:	0f b6       	in	r0, 0x3f	; 63
    1d4a:	f8 94       	cli
    1d4c:	de bf       	out	0x3e, r29	; 62
    1d4e:	0f be       	out	0x3f, r0	; 63
    1d50:	cd bf       	out	0x3d, r28	; 61
    1d52:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);/*RS=1*/
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	60 e0       	ldi	r22, 0x00	; 0
    1d58:	41 e0       	ldi	r20, 0x01	; 1
    1d5a:	0e 94 a2 07 	call	0xf44	; 0xf44 <GPIO_writePin>
    1d5e:	80 e0       	ldi	r24, 0x00	; 0
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	a0 e8       	ldi	r26, 0x80	; 128
    1d64:	bf e3       	ldi	r27, 0x3F	; 63
    1d66:	8d ab       	std	Y+53, r24	; 0x35
    1d68:	9e ab       	std	Y+54, r25	; 0x36
    1d6a:	af ab       	std	Y+55, r26	; 0x37
    1d6c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d6e:	6d a9       	ldd	r22, Y+53	; 0x35
    1d70:	7e a9       	ldd	r23, Y+54	; 0x36
    1d72:	8f a9       	ldd	r24, Y+55	; 0x37
    1d74:	98 ad       	ldd	r25, Y+56	; 0x38
    1d76:	20 e0       	ldi	r18, 0x00	; 0
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	4a ef       	ldi	r20, 0xFA	; 250
    1d7c:	54 e4       	ldi	r21, 0x44	; 68
    1d7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d82:	dc 01       	movw	r26, r24
    1d84:	cb 01       	movw	r24, r22
    1d86:	89 ab       	std	Y+49, r24	; 0x31
    1d88:	9a ab       	std	Y+50, r25	; 0x32
    1d8a:	ab ab       	std	Y+51, r26	; 0x33
    1d8c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d8e:	69 a9       	ldd	r22, Y+49	; 0x31
    1d90:	7a a9       	ldd	r23, Y+50	; 0x32
    1d92:	8b a9       	ldd	r24, Y+51	; 0x33
    1d94:	9c a9       	ldd	r25, Y+52	; 0x34
    1d96:	20 e0       	ldi	r18, 0x00	; 0
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	40 e8       	ldi	r20, 0x80	; 128
    1d9c:	5f e3       	ldi	r21, 0x3F	; 63
    1d9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1da2:	88 23       	and	r24, r24
    1da4:	2c f4       	brge	.+10     	; 0x1db0 <LCD_DisplayChar+0x72>
		__ticks = 1;
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	98 ab       	std	Y+48, r25	; 0x30
    1dac:	8f a7       	std	Y+47, r24	; 0x2f
    1dae:	3f c0       	rjmp	.+126    	; 0x1e2e <LCD_DisplayChar+0xf0>
	else if (__tmp > 65535)
    1db0:	69 a9       	ldd	r22, Y+49	; 0x31
    1db2:	7a a9       	ldd	r23, Y+50	; 0x32
    1db4:	8b a9       	ldd	r24, Y+51	; 0x33
    1db6:	9c a9       	ldd	r25, Y+52	; 0x34
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	3f ef       	ldi	r19, 0xFF	; 255
    1dbc:	4f e7       	ldi	r20, 0x7F	; 127
    1dbe:	57 e4       	ldi	r21, 0x47	; 71
    1dc0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dc4:	18 16       	cp	r1, r24
    1dc6:	4c f5       	brge	.+82     	; 0x1e1a <LCD_DisplayChar+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dc8:	6d a9       	ldd	r22, Y+53	; 0x35
    1dca:	7e a9       	ldd	r23, Y+54	; 0x36
    1dcc:	8f a9       	ldd	r24, Y+55	; 0x37
    1dce:	98 ad       	ldd	r25, Y+56	; 0x38
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	40 e2       	ldi	r20, 0x20	; 32
    1dd6:	51 e4       	ldi	r21, 0x41	; 65
    1dd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ddc:	dc 01       	movw	r26, r24
    1dde:	cb 01       	movw	r24, r22
    1de0:	bc 01       	movw	r22, r24
    1de2:	cd 01       	movw	r24, r26
    1de4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de8:	dc 01       	movw	r26, r24
    1dea:	cb 01       	movw	r24, r22
    1dec:	98 ab       	std	Y+48, r25	; 0x30
    1dee:	8f a7       	std	Y+47, r24	; 0x2f
    1df0:	0f c0       	rjmp	.+30     	; 0x1e10 <LCD_DisplayChar+0xd2>
    1df2:	88 ec       	ldi	r24, 0xC8	; 200
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	9e a7       	std	Y+46, r25	; 0x2e
    1df8:	8d a7       	std	Y+45, r24	; 0x2d
    1dfa:	8d a5       	ldd	r24, Y+45	; 0x2d
    1dfc:	9e a5       	ldd	r25, Y+46	; 0x2e
    1dfe:	01 97       	sbiw	r24, 0x01	; 1
    1e00:	f1 f7       	brne	.-4      	; 0x1dfe <LCD_DisplayChar+0xc0>
    1e02:	9e a7       	std	Y+46, r25	; 0x2e
    1e04:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e06:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e08:	98 a9       	ldd	r25, Y+48	; 0x30
    1e0a:	01 97       	sbiw	r24, 0x01	; 1
    1e0c:	98 ab       	std	Y+48, r25	; 0x30
    1e0e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e10:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e12:	98 a9       	ldd	r25, Y+48	; 0x30
    1e14:	00 97       	sbiw	r24, 0x00	; 0
    1e16:	69 f7       	brne	.-38     	; 0x1df2 <LCD_DisplayChar+0xb4>
    1e18:	14 c0       	rjmp	.+40     	; 0x1e42 <LCD_DisplayChar+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e1a:	69 a9       	ldd	r22, Y+49	; 0x31
    1e1c:	7a a9       	ldd	r23, Y+50	; 0x32
    1e1e:	8b a9       	ldd	r24, Y+51	; 0x33
    1e20:	9c a9       	ldd	r25, Y+52	; 0x34
    1e22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e26:	dc 01       	movw	r26, r24
    1e28:	cb 01       	movw	r24, r22
    1e2a:	98 ab       	std	Y+48, r25	; 0x30
    1e2c:	8f a7       	std	Y+47, r24	; 0x2f
    1e2e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e30:	98 a9       	ldd	r25, Y+48	; 0x30
    1e32:	9c a7       	std	Y+44, r25	; 0x2c
    1e34:	8b a7       	std	Y+43, r24	; 0x2b
    1e36:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e38:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e3a:	01 97       	sbiw	r24, 0x01	; 1
    1e3c:	f1 f7       	brne	.-4      	; 0x1e3a <LCD_DisplayChar+0xfc>
    1e3e:	9c a7       	std	Y+44, r25	; 0x2c
    1e40:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);/*E=1*/
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	62 e0       	ldi	r22, 0x02	; 2
    1e46:	41 e0       	ldi	r20, 0x01	; 1
    1e48:	0e 94 a2 07 	call	0xf44	; 0xf44 <GPIO_writePin>
    1e4c:	80 e0       	ldi	r24, 0x00	; 0
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	a0 e8       	ldi	r26, 0x80	; 128
    1e52:	bf e3       	ldi	r27, 0x3F	; 63
    1e54:	8f a3       	std	Y+39, r24	; 0x27
    1e56:	98 a7       	std	Y+40, r25	; 0x28
    1e58:	a9 a7       	std	Y+41, r26	; 0x29
    1e5a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e5c:	6f a1       	ldd	r22, Y+39	; 0x27
    1e5e:	78 a5       	ldd	r23, Y+40	; 0x28
    1e60:	89 a5       	ldd	r24, Y+41	; 0x29
    1e62:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	4a ef       	ldi	r20, 0xFA	; 250
    1e6a:	54 e4       	ldi	r21, 0x44	; 68
    1e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e70:	dc 01       	movw	r26, r24
    1e72:	cb 01       	movw	r24, r22
    1e74:	8b a3       	std	Y+35, r24	; 0x23
    1e76:	9c a3       	std	Y+36, r25	; 0x24
    1e78:	ad a3       	std	Y+37, r26	; 0x25
    1e7a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e7c:	6b a1       	ldd	r22, Y+35	; 0x23
    1e7e:	7c a1       	ldd	r23, Y+36	; 0x24
    1e80:	8d a1       	ldd	r24, Y+37	; 0x25
    1e82:	9e a1       	ldd	r25, Y+38	; 0x26
    1e84:	20 e0       	ldi	r18, 0x00	; 0
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	40 e8       	ldi	r20, 0x80	; 128
    1e8a:	5f e3       	ldi	r21, 0x3F	; 63
    1e8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e90:	88 23       	and	r24, r24
    1e92:	2c f4       	brge	.+10     	; 0x1e9e <LCD_DisplayChar+0x160>
		__ticks = 1;
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	9a a3       	std	Y+34, r25	; 0x22
    1e9a:	89 a3       	std	Y+33, r24	; 0x21
    1e9c:	3f c0       	rjmp	.+126    	; 0x1f1c <LCD_DisplayChar+0x1de>
	else if (__tmp > 65535)
    1e9e:	6b a1       	ldd	r22, Y+35	; 0x23
    1ea0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ea2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ea4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	3f ef       	ldi	r19, 0xFF	; 255
    1eaa:	4f e7       	ldi	r20, 0x7F	; 127
    1eac:	57 e4       	ldi	r21, 0x47	; 71
    1eae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eb2:	18 16       	cp	r1, r24
    1eb4:	4c f5       	brge	.+82     	; 0x1f08 <LCD_DisplayChar+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb6:	6f a1       	ldd	r22, Y+39	; 0x27
    1eb8:	78 a5       	ldd	r23, Y+40	; 0x28
    1eba:	89 a5       	ldd	r24, Y+41	; 0x29
    1ebc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	40 e2       	ldi	r20, 0x20	; 32
    1ec4:	51 e4       	ldi	r21, 0x41	; 65
    1ec6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eca:	dc 01       	movw	r26, r24
    1ecc:	cb 01       	movw	r24, r22
    1ece:	bc 01       	movw	r22, r24
    1ed0:	cd 01       	movw	r24, r26
    1ed2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	cb 01       	movw	r24, r22
    1eda:	9a a3       	std	Y+34, r25	; 0x22
    1edc:	89 a3       	std	Y+33, r24	; 0x21
    1ede:	0f c0       	rjmp	.+30     	; 0x1efe <LCD_DisplayChar+0x1c0>
    1ee0:	88 ec       	ldi	r24, 0xC8	; 200
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	98 a3       	std	Y+32, r25	; 0x20
    1ee6:	8f 8f       	std	Y+31, r24	; 0x1f
    1ee8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1eea:	98 a1       	ldd	r25, Y+32	; 0x20
    1eec:	01 97       	sbiw	r24, 0x01	; 1
    1eee:	f1 f7       	brne	.-4      	; 0x1eec <LCD_DisplayChar+0x1ae>
    1ef0:	98 a3       	std	Y+32, r25	; 0x20
    1ef2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef4:	89 a1       	ldd	r24, Y+33	; 0x21
    1ef6:	9a a1       	ldd	r25, Y+34	; 0x22
    1ef8:	01 97       	sbiw	r24, 0x01	; 1
    1efa:	9a a3       	std	Y+34, r25	; 0x22
    1efc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1efe:	89 a1       	ldd	r24, Y+33	; 0x21
    1f00:	9a a1       	ldd	r25, Y+34	; 0x22
    1f02:	00 97       	sbiw	r24, 0x00	; 0
    1f04:	69 f7       	brne	.-38     	; 0x1ee0 <LCD_DisplayChar+0x1a2>
    1f06:	14 c0       	rjmp	.+40     	; 0x1f30 <LCD_DisplayChar+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f08:	6b a1       	ldd	r22, Y+35	; 0x23
    1f0a:	7c a1       	ldd	r23, Y+36	; 0x24
    1f0c:	8d a1       	ldd	r24, Y+37	; 0x25
    1f0e:	9e a1       	ldd	r25, Y+38	; 0x26
    1f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f14:	dc 01       	movw	r26, r24
    1f16:	cb 01       	movw	r24, r22
    1f18:	9a a3       	std	Y+34, r25	; 0x22
    1f1a:	89 a3       	std	Y+33, r24	; 0x21
    1f1c:	89 a1       	ldd	r24, Y+33	; 0x21
    1f1e:	9a a1       	ldd	r25, Y+34	; 0x22
    1f20:	9e 8f       	std	Y+30, r25	; 0x1e
    1f22:	8d 8f       	std	Y+29, r24	; 0x1d
    1f24:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f26:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f28:	01 97       	sbiw	r24, 0x01	; 1
    1f2a:	f1 f7       	brne	.-4      	; 0x1f28 <LCD_DisplayChar+0x1ea>
    1f2c:	9e 8f       	std	Y+30, r25	; 0x1e
    1f2e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
#if(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID, data);/*OUT COMMAND*/
    1f30:	82 e0       	ldi	r24, 0x02	; 2
    1f32:	69 ad       	ldd	r22, Y+57	; 0x39
    1f34:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <GPIO_writePort>
    1f38:	80 e0       	ldi	r24, 0x00	; 0
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	a0 e8       	ldi	r26, 0x80	; 128
    1f3e:	bf e3       	ldi	r27, 0x3F	; 63
    1f40:	89 8f       	std	Y+25, r24	; 0x19
    1f42:	9a 8f       	std	Y+26, r25	; 0x1a
    1f44:	ab 8f       	std	Y+27, r26	; 0x1b
    1f46:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f48:	69 8d       	ldd	r22, Y+25	; 0x19
    1f4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	4a ef       	ldi	r20, 0xFA	; 250
    1f56:	54 e4       	ldi	r21, 0x44	; 68
    1f58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	cb 01       	movw	r24, r22
    1f60:	8d 8b       	std	Y+21, r24	; 0x15
    1f62:	9e 8b       	std	Y+22, r25	; 0x16
    1f64:	af 8b       	std	Y+23, r26	; 0x17
    1f66:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f68:	6d 89       	ldd	r22, Y+21	; 0x15
    1f6a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f6c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f6e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	40 e8       	ldi	r20, 0x80	; 128
    1f76:	5f e3       	ldi	r21, 0x3F	; 63
    1f78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f7c:	88 23       	and	r24, r24
    1f7e:	2c f4       	brge	.+10     	; 0x1f8a <LCD_DisplayChar+0x24c>
		__ticks = 1;
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	9c 8b       	std	Y+20, r25	; 0x14
    1f86:	8b 8b       	std	Y+19, r24	; 0x13
    1f88:	3f c0       	rjmp	.+126    	; 0x2008 <LCD_DisplayChar+0x2ca>
	else if (__tmp > 65535)
    1f8a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f8c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f8e:	8f 89       	ldd	r24, Y+23	; 0x17
    1f90:	98 8d       	ldd	r25, Y+24	; 0x18
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	3f ef       	ldi	r19, 0xFF	; 255
    1f96:	4f e7       	ldi	r20, 0x7F	; 127
    1f98:	57 e4       	ldi	r21, 0x47	; 71
    1f9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f9e:	18 16       	cp	r1, r24
    1fa0:	4c f5       	brge	.+82     	; 0x1ff4 <LCD_DisplayChar+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa2:	69 8d       	ldd	r22, Y+25	; 0x19
    1fa4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fa6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fa8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	40 e2       	ldi	r20, 0x20	; 32
    1fb0:	51 e4       	ldi	r21, 0x41	; 65
    1fb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb6:	dc 01       	movw	r26, r24
    1fb8:	cb 01       	movw	r24, r22
    1fba:	bc 01       	movw	r22, r24
    1fbc:	cd 01       	movw	r24, r26
    1fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	9c 8b       	std	Y+20, r25	; 0x14
    1fc8:	8b 8b       	std	Y+19, r24	; 0x13
    1fca:	0f c0       	rjmp	.+30     	; 0x1fea <LCD_DisplayChar+0x2ac>
    1fcc:	88 ec       	ldi	r24, 0xC8	; 200
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	9a 8b       	std	Y+18, r25	; 0x12
    1fd2:	89 8b       	std	Y+17, r24	; 0x11
    1fd4:	89 89       	ldd	r24, Y+17	; 0x11
    1fd6:	9a 89       	ldd	r25, Y+18	; 0x12
    1fd8:	01 97       	sbiw	r24, 0x01	; 1
    1fda:	f1 f7       	brne	.-4      	; 0x1fd8 <LCD_DisplayChar+0x29a>
    1fdc:	9a 8b       	std	Y+18, r25	; 0x12
    1fde:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe0:	8b 89       	ldd	r24, Y+19	; 0x13
    1fe2:	9c 89       	ldd	r25, Y+20	; 0x14
    1fe4:	01 97       	sbiw	r24, 0x01	; 1
    1fe6:	9c 8b       	std	Y+20, r25	; 0x14
    1fe8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fea:	8b 89       	ldd	r24, Y+19	; 0x13
    1fec:	9c 89       	ldd	r25, Y+20	; 0x14
    1fee:	00 97       	sbiw	r24, 0x00	; 0
    1ff0:	69 f7       	brne	.-38     	; 0x1fcc <LCD_DisplayChar+0x28e>
    1ff2:	14 c0       	rjmp	.+40     	; 0x201c <LCD_DisplayChar+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ff4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ff6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ff8:	8f 89       	ldd	r24, Y+23	; 0x17
    1ffa:	98 8d       	ldd	r25, Y+24	; 0x18
    1ffc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2000:	dc 01       	movw	r26, r24
    2002:	cb 01       	movw	r24, r22
    2004:	9c 8b       	std	Y+20, r25	; 0x14
    2006:	8b 8b       	std	Y+19, r24	; 0x13
    2008:	8b 89       	ldd	r24, Y+19	; 0x13
    200a:	9c 89       	ldd	r25, Y+20	; 0x14
    200c:	98 8b       	std	Y+16, r25	; 0x10
    200e:	8f 87       	std	Y+15, r24	; 0x0f
    2010:	8f 85       	ldd	r24, Y+15	; 0x0f
    2012:	98 89       	ldd	r25, Y+16	; 0x10
    2014:	01 97       	sbiw	r24, 0x01	; 1
    2016:	f1 f7       	brne	.-4      	; 0x2014 <LCD_DisplayChar+0x2d6>
    2018:	98 8b       	std	Y+16, r25	; 0x10
    201a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID,LOGIC_LOW);/*E=0*/
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	62 e0       	ldi	r22, 0x02	; 2
    2020:	40 e0       	ldi	r20, 0x00	; 0
    2022:	0e 94 a2 07 	call	0xf44	; 0xf44 <GPIO_writePin>
    2026:	80 e0       	ldi	r24, 0x00	; 0
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	a0 e8       	ldi	r26, 0x80	; 128
    202c:	bf e3       	ldi	r27, 0x3F	; 63
    202e:	8b 87       	std	Y+11, r24	; 0x0b
    2030:	9c 87       	std	Y+12, r25	; 0x0c
    2032:	ad 87       	std	Y+13, r26	; 0x0d
    2034:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2036:	6b 85       	ldd	r22, Y+11	; 0x0b
    2038:	7c 85       	ldd	r23, Y+12	; 0x0c
    203a:	8d 85       	ldd	r24, Y+13	; 0x0d
    203c:	9e 85       	ldd	r25, Y+14	; 0x0e
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	4a ef       	ldi	r20, 0xFA	; 250
    2044:	54 e4       	ldi	r21, 0x44	; 68
    2046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	8f 83       	std	Y+7, r24	; 0x07
    2050:	98 87       	std	Y+8, r25	; 0x08
    2052:	a9 87       	std	Y+9, r26	; 0x09
    2054:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2056:	6f 81       	ldd	r22, Y+7	; 0x07
    2058:	78 85       	ldd	r23, Y+8	; 0x08
    205a:	89 85       	ldd	r24, Y+9	; 0x09
    205c:	9a 85       	ldd	r25, Y+10	; 0x0a
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	40 e8       	ldi	r20, 0x80	; 128
    2064:	5f e3       	ldi	r21, 0x3F	; 63
    2066:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    206a:	88 23       	and	r24, r24
    206c:	2c f4       	brge	.+10     	; 0x2078 <LCD_DisplayChar+0x33a>
		__ticks = 1;
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	9e 83       	std	Y+6, r25	; 0x06
    2074:	8d 83       	std	Y+5, r24	; 0x05
    2076:	3f c0       	rjmp	.+126    	; 0x20f6 <LCD_DisplayChar+0x3b8>
	else if (__tmp > 65535)
    2078:	6f 81       	ldd	r22, Y+7	; 0x07
    207a:	78 85       	ldd	r23, Y+8	; 0x08
    207c:	89 85       	ldd	r24, Y+9	; 0x09
    207e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	3f ef       	ldi	r19, 0xFF	; 255
    2084:	4f e7       	ldi	r20, 0x7F	; 127
    2086:	57 e4       	ldi	r21, 0x47	; 71
    2088:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    208c:	18 16       	cp	r1, r24
    208e:	4c f5       	brge	.+82     	; 0x20e2 <LCD_DisplayChar+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2090:	6b 85       	ldd	r22, Y+11	; 0x0b
    2092:	7c 85       	ldd	r23, Y+12	; 0x0c
    2094:	8d 85       	ldd	r24, Y+13	; 0x0d
    2096:	9e 85       	ldd	r25, Y+14	; 0x0e
    2098:	20 e0       	ldi	r18, 0x00	; 0
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	40 e2       	ldi	r20, 0x20	; 32
    209e:	51 e4       	ldi	r21, 0x41	; 65
    20a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a4:	dc 01       	movw	r26, r24
    20a6:	cb 01       	movw	r24, r22
    20a8:	bc 01       	movw	r22, r24
    20aa:	cd 01       	movw	r24, r26
    20ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b0:	dc 01       	movw	r26, r24
    20b2:	cb 01       	movw	r24, r22
    20b4:	9e 83       	std	Y+6, r25	; 0x06
    20b6:	8d 83       	std	Y+5, r24	; 0x05
    20b8:	0f c0       	rjmp	.+30     	; 0x20d8 <LCD_DisplayChar+0x39a>
    20ba:	88 ec       	ldi	r24, 0xC8	; 200
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	9c 83       	std	Y+4, r25	; 0x04
    20c0:	8b 83       	std	Y+3, r24	; 0x03
    20c2:	8b 81       	ldd	r24, Y+3	; 0x03
    20c4:	9c 81       	ldd	r25, Y+4	; 0x04
    20c6:	01 97       	sbiw	r24, 0x01	; 1
    20c8:	f1 f7       	brne	.-4      	; 0x20c6 <LCD_DisplayChar+0x388>
    20ca:	9c 83       	std	Y+4, r25	; 0x04
    20cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ce:	8d 81       	ldd	r24, Y+5	; 0x05
    20d0:	9e 81       	ldd	r25, Y+6	; 0x06
    20d2:	01 97       	sbiw	r24, 0x01	; 1
    20d4:	9e 83       	std	Y+6, r25	; 0x06
    20d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d8:	8d 81       	ldd	r24, Y+5	; 0x05
    20da:	9e 81       	ldd	r25, Y+6	; 0x06
    20dc:	00 97       	sbiw	r24, 0x00	; 0
    20de:	69 f7       	brne	.-38     	; 0x20ba <LCD_DisplayChar+0x37c>
    20e0:	14 c0       	rjmp	.+40     	; 0x210a <LCD_DisplayChar+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e2:	6f 81       	ldd	r22, Y+7	; 0x07
    20e4:	78 85       	ldd	r23, Y+8	; 0x08
    20e6:	89 85       	ldd	r24, Y+9	; 0x09
    20e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	9e 83       	std	Y+6, r25	; 0x06
    20f4:	8d 83       	std	Y+5, r24	; 0x05
    20f6:	8d 81       	ldd	r24, Y+5	; 0x05
    20f8:	9e 81       	ldd	r25, Y+6	; 0x06
    20fa:	9a 83       	std	Y+2, r25	; 0x02
    20fc:	89 83       	std	Y+1, r24	; 0x01
    20fe:	89 81       	ldd	r24, Y+1	; 0x01
    2100:	9a 81       	ldd	r25, Y+2	; 0x02
    2102:	01 97       	sbiw	r24, 0x01	; 1
    2104:	f1 f7       	brne	.-4      	; 0x2102 <LCD_DisplayChar+0x3c4>
    2106:	9a 83       	std	Y+2, r25	; 0x02
    2108:	89 83       	std	Y+1, r24	; 0x01

	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /*E=0*/
	_delay_ms(1);

#endif
}
    210a:	e9 96       	adiw	r28, 0x39	; 57
    210c:	0f b6       	in	r0, 0x3f	; 63
    210e:	f8 94       	cli
    2110:	de bf       	out	0x3e, r29	; 62
    2112:	0f be       	out	0x3f, r0	; 63
    2114:	cd bf       	out	0x3d, r28	; 61
    2116:	cf 91       	pop	r28
    2118:	df 91       	pop	r29
    211a:	08 95       	ret

0000211c <LCD_DisplayString>:

/*DISPLAY*/

void LCD_DisplayString(const char *Str)
{
    211c:	df 93       	push	r29
    211e:	cf 93       	push	r28
    2120:	00 d0       	rcall	.+0      	; 0x2122 <LCD_DisplayString+0x6>
    2122:	0f 92       	push	r0
    2124:	cd b7       	in	r28, 0x3d	; 61
    2126:	de b7       	in	r29, 0x3e	; 62
    2128:	9b 83       	std	Y+3, r25	; 0x03
    212a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    212c:	19 82       	std	Y+1, r1	; 0x01
    212e:	0e c0       	rjmp	.+28     	; 0x214c <LCD_DisplayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_DisplayChar(Str[i]);
    2130:	89 81       	ldd	r24, Y+1	; 0x01
    2132:	28 2f       	mov	r18, r24
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	8a 81       	ldd	r24, Y+2	; 0x02
    2138:	9b 81       	ldd	r25, Y+3	; 0x03
    213a:	fc 01       	movw	r30, r24
    213c:	e2 0f       	add	r30, r18
    213e:	f3 1f       	adc	r31, r19
    2140:	80 81       	ld	r24, Z
    2142:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <LCD_DisplayChar>
		i++;
    2146:	89 81       	ldd	r24, Y+1	; 0x01
    2148:	8f 5f       	subi	r24, 0xFF	; 255
    214a:	89 83       	std	Y+1, r24	; 0x01
/*DISPLAY*/

void LCD_DisplayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    214c:	89 81       	ldd	r24, Y+1	; 0x01
    214e:	28 2f       	mov	r18, r24
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	8a 81       	ldd	r24, Y+2	; 0x02
    2154:	9b 81       	ldd	r25, Y+3	; 0x03
    2156:	fc 01       	movw	r30, r24
    2158:	e2 0f       	add	r30, r18
    215a:	f3 1f       	adc	r31, r19
    215c:	80 81       	ld	r24, Z
    215e:	88 23       	and	r24, r24
    2160:	39 f7       	brne	.-50     	; 0x2130 <LCD_DisplayString+0x14>
	{
		LCD_DisplayChar(Str[i]);
		i++;
	}
}
    2162:	0f 90       	pop	r0
    2164:	0f 90       	pop	r0
    2166:	0f 90       	pop	r0
    2168:	cf 91       	pop	r28
    216a:	df 91       	pop	r29
    216c:	08 95       	ret

0000216e <LCD_moveCursor>:

/*WRITE IN IN SPECIFIC ROW*/

void LCD_moveCursor(uint8 row,uint8 col)
{
    216e:	df 93       	push	r29
    2170:	cf 93       	push	r28
    2172:	00 d0       	rcall	.+0      	; 0x2174 <LCD_moveCursor+0x6>
    2174:	00 d0       	rcall	.+0      	; 0x2176 <LCD_moveCursor+0x8>
    2176:	0f 92       	push	r0
    2178:	cd b7       	in	r28, 0x3d	; 61
    217a:	de b7       	in	r29, 0x3e	; 62
    217c:	8a 83       	std	Y+2, r24	; 0x02
    217e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	switch(row)
    2180:	8a 81       	ldd	r24, Y+2	; 0x02
    2182:	28 2f       	mov	r18, r24
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	3d 83       	std	Y+5, r19	; 0x05
    2188:	2c 83       	std	Y+4, r18	; 0x04
    218a:	8c 81       	ldd	r24, Y+4	; 0x04
    218c:	9d 81       	ldd	r25, Y+5	; 0x05
    218e:	81 30       	cpi	r24, 0x01	; 1
    2190:	91 05       	cpc	r25, r1
    2192:	c1 f0       	breq	.+48     	; 0x21c4 <LCD_moveCursor+0x56>
    2194:	2c 81       	ldd	r18, Y+4	; 0x04
    2196:	3d 81       	ldd	r19, Y+5	; 0x05
    2198:	22 30       	cpi	r18, 0x02	; 2
    219a:	31 05       	cpc	r19, r1
    219c:	2c f4       	brge	.+10     	; 0x21a8 <LCD_moveCursor+0x3a>
    219e:	8c 81       	ldd	r24, Y+4	; 0x04
    21a0:	9d 81       	ldd	r25, Y+5	; 0x05
    21a2:	00 97       	sbiw	r24, 0x00	; 0
    21a4:	61 f0       	breq	.+24     	; 0x21be <LCD_moveCursor+0x50>
    21a6:	19 c0       	rjmp	.+50     	; 0x21da <LCD_moveCursor+0x6c>
    21a8:	2c 81       	ldd	r18, Y+4	; 0x04
    21aa:	3d 81       	ldd	r19, Y+5	; 0x05
    21ac:	22 30       	cpi	r18, 0x02	; 2
    21ae:	31 05       	cpc	r19, r1
    21b0:	69 f0       	breq	.+26     	; 0x21cc <LCD_moveCursor+0x5e>
    21b2:	8c 81       	ldd	r24, Y+4	; 0x04
    21b4:	9d 81       	ldd	r25, Y+5	; 0x05
    21b6:	83 30       	cpi	r24, 0x03	; 3
    21b8:	91 05       	cpc	r25, r1
    21ba:	61 f0       	breq	.+24     	; 0x21d4 <LCD_moveCursor+0x66>
    21bc:	0e c0       	rjmp	.+28     	; 0x21da <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address = col;
    21be:	8b 81       	ldd	r24, Y+3	; 0x03
    21c0:	89 83       	std	Y+1, r24	; 0x01
    21c2:	0b c0       	rjmp	.+22     	; 0x21da <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address = col+0x40;
    21c4:	8b 81       	ldd	r24, Y+3	; 0x03
    21c6:	80 5c       	subi	r24, 0xC0	; 192
    21c8:	89 83       	std	Y+1, r24	; 0x01
    21ca:	07 c0       	rjmp	.+14     	; 0x21da <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address = col+0x10;
    21cc:	8b 81       	ldd	r24, Y+3	; 0x03
    21ce:	80 5f       	subi	r24, 0xF0	; 240
    21d0:	89 83       	std	Y+1, r24	; 0x01
    21d2:	03 c0       	rjmp	.+6      	; 0x21da <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address = col+0x50;
    21d4:	8b 81       	ldd	r24, Y+3	; 0x03
    21d6:	80 5b       	subi	r24, 0xB0	; 176
    21d8:	89 83       	std	Y+1, r24	; 0x01
		break;

	}
	LCD_SendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    21da:	89 81       	ldd	r24, Y+1	; 0x01
    21dc:	80 68       	ori	r24, 0x80	; 128
    21de:	0e 94 b0 0c 	call	0x1960	; 0x1960 <LCD_SendCommand>
}
    21e2:	0f 90       	pop	r0
    21e4:	0f 90       	pop	r0
    21e6:	0f 90       	pop	r0
    21e8:	0f 90       	pop	r0
    21ea:	0f 90       	pop	r0
    21ec:	cf 91       	pop	r28
    21ee:	df 91       	pop	r29
    21f0:	08 95       	ret

000021f2 <LCD_displayStringRowColumn>:

/*DISPLAY IN SPECIFIC ROW*/

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    21f2:	df 93       	push	r29
    21f4:	cf 93       	push	r28
    21f6:	00 d0       	rcall	.+0      	; 0x21f8 <LCD_displayStringRowColumn+0x6>
    21f8:	00 d0       	rcall	.+0      	; 0x21fa <LCD_displayStringRowColumn+0x8>
    21fa:	cd b7       	in	r28, 0x3d	; 61
    21fc:	de b7       	in	r29, 0x3e	; 62
    21fe:	89 83       	std	Y+1, r24	; 0x01
    2200:	6a 83       	std	Y+2, r22	; 0x02
    2202:	5c 83       	std	Y+4, r21	; 0x04
    2204:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col);
    2206:	89 81       	ldd	r24, Y+1	; 0x01
    2208:	6a 81       	ldd	r22, Y+2	; 0x02
    220a:	0e 94 b7 10 	call	0x216e	; 0x216e <LCD_moveCursor>
	LCD_DisplayString(Str);
    220e:	8b 81       	ldd	r24, Y+3	; 0x03
    2210:	9c 81       	ldd	r25, Y+4	; 0x04
    2212:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_DisplayString>
}
    2216:	0f 90       	pop	r0
    2218:	0f 90       	pop	r0
    221a:	0f 90       	pop	r0
    221c:	0f 90       	pop	r0
    221e:	cf 91       	pop	r28
    2220:	df 91       	pop	r29
    2222:	08 95       	ret

00002224 <LCD_intgerToString>:

/*NUMBERS*/

void LCD_intgerToString(int data)
{
    2224:	df 93       	push	r29
    2226:	cf 93       	push	r28
    2228:	cd b7       	in	r28, 0x3d	; 61
    222a:	de b7       	in	r29, 0x3e	; 62
    222c:	62 97       	sbiw	r28, 0x12	; 18
    222e:	0f b6       	in	r0, 0x3f	; 63
    2230:	f8 94       	cli
    2232:	de bf       	out	0x3e, r29	; 62
    2234:	0f be       	out	0x3f, r0	; 63
    2236:	cd bf       	out	0x3d, r28	; 61
    2238:	9a 8b       	std	Y+18, r25	; 0x12
    223a:	89 8b       	std	Y+17, r24	; 0x11
	char str[16];
	itoa(data,str,10); /* 10 for decimal */
    223c:	89 89       	ldd	r24, Y+17	; 0x11
    223e:	9a 89       	ldd	r25, Y+18	; 0x12
    2240:	9e 01       	movw	r18, r28
    2242:	2f 5f       	subi	r18, 0xFF	; 255
    2244:	3f 4f       	sbci	r19, 0xFF	; 255
    2246:	b9 01       	movw	r22, r18
    2248:	4a e0       	ldi	r20, 0x0A	; 10
    224a:	50 e0       	ldi	r21, 0x00	; 0
    224c:	0e 94 a0 1b 	call	0x3740	; 0x3740 <itoa>
	LCD_DisplayString(str);
    2250:	ce 01       	movw	r24, r28
    2252:	01 96       	adiw	r24, 0x01	; 1
    2254:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_DisplayString>
}
    2258:	62 96       	adiw	r28, 0x12	; 18
    225a:	0f b6       	in	r0, 0x3f	; 63
    225c:	f8 94       	cli
    225e:	de bf       	out	0x3e, r29	; 62
    2260:	0f be       	out	0x3f, r0	; 63
    2262:	cd bf       	out	0x3d, r28	; 61
    2264:	cf 91       	pop	r28
    2266:	df 91       	pop	r29
    2268:	08 95       	ret

0000226a <LCD_clearScreen>:

/*CLEAR*/

void LCD_clearScreen(void)
{
    226a:	df 93       	push	r29
    226c:	cf 93       	push	r28
    226e:	cd b7       	in	r28, 0x3d	; 61
    2270:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCommand(LCD_CLEAR_COMMAND); /* CLEAR COMMAND */
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	0e 94 b0 0c 	call	0x1960	; 0x1960 <LCD_SendCommand>
}
    2278:	cf 91       	pop	r28
    227a:	df 91       	pop	r29
    227c:	08 95       	ret

0000227e <init>:

#include "himi.h"

uint8 Pass[SIZE],PassConfirm[SIZE],PassPrev[SIZE],check = 0,Buzzer_Flag=0;

void init(void) {
    227e:	df 93       	push	r29
    2280:	cf 93       	push	r28
    2282:	cd b7       	in	r28, 0x3d	; 61
    2284:	de b7       	in	r29, 0x3e	; 62
    2286:	66 97       	sbiw	r28, 0x16	; 22
    2288:	0f b6       	in	r0, 0x3f	; 63
    228a:	f8 94       	cli
    228c:	de bf       	out	0x3e, r29	; 62
    228e:	0f be       	out	0x3f, r0	; 63
    2290:	cd bf       	out	0x3d, r28	; 61

	LCD_init();
    2292:	0e 94 0f 0c 	call	0x181e	; 0x181e <LCD_init>
	UART_Config config = { DISABLED, ONE, EIGHT, 9600 };
    2296:	ce 01       	movw	r24, r28
    2298:	01 96       	adiw	r24, 0x01	; 1
    229a:	9e 87       	std	Y+14, r25	; 0x0e
    229c:	8d 87       	std	Y+13, r24	; 0x0d
    229e:	e4 ed       	ldi	r30, 0xD4	; 212
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	f8 8b       	std	Y+16, r31	; 0x10
    22a4:	ef 87       	std	Y+15, r30	; 0x0f
    22a6:	f7 e0       	ldi	r31, 0x07	; 7
    22a8:	f9 8b       	std	Y+17, r31	; 0x11
    22aa:	ef 85       	ldd	r30, Y+15	; 0x0f
    22ac:	f8 89       	ldd	r31, Y+16	; 0x10
    22ae:	00 80       	ld	r0, Z
    22b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    22b2:	98 89       	ldd	r25, Y+16	; 0x10
    22b4:	01 96       	adiw	r24, 0x01	; 1
    22b6:	98 8b       	std	Y+16, r25	; 0x10
    22b8:	8f 87       	std	Y+15, r24	; 0x0f
    22ba:	ed 85       	ldd	r30, Y+13	; 0x0d
    22bc:	fe 85       	ldd	r31, Y+14	; 0x0e
    22be:	00 82       	st	Z, r0
    22c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22c4:	01 96       	adiw	r24, 0x01	; 1
    22c6:	9e 87       	std	Y+14, r25	; 0x0e
    22c8:	8d 87       	std	Y+13, r24	; 0x0d
    22ca:	99 89       	ldd	r25, Y+17	; 0x11
    22cc:	91 50       	subi	r25, 0x01	; 1
    22ce:	99 8b       	std	Y+17, r25	; 0x11
    22d0:	e9 89       	ldd	r30, Y+17	; 0x11
    22d2:	ee 23       	and	r30, r30
    22d4:	51 f7       	brne	.-44     	; 0x22aa <init+0x2c>
	UART_init(&config);
    22d6:	ce 01       	movw	r24, r28
    22d8:	01 96       	adiw	r24, 0x01	; 1
    22da:	0e 94 f5 09 	call	0x13ea	; 0x13ea <UART_init>
	Timer_config confg = { CTC,PRESCALAR_CLK1024,0,7813};
    22de:	ce 01       	movw	r24, r28
    22e0:	08 96       	adiw	r24, 0x08	; 8
    22e2:	9b 8b       	std	Y+19, r25	; 0x13
    22e4:	8a 8b       	std	Y+18, r24	; 0x12
    22e6:	ef ec       	ldi	r30, 0xCF	; 207
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	fd 8b       	std	Y+21, r31	; 0x15
    22ec:	ec 8b       	std	Y+20, r30	; 0x14
    22ee:	f5 e0       	ldi	r31, 0x05	; 5
    22f0:	fe 8b       	std	Y+22, r31	; 0x16
    22f2:	ec 89       	ldd	r30, Y+20	; 0x14
    22f4:	fd 89       	ldd	r31, Y+21	; 0x15
    22f6:	00 80       	ld	r0, Z
    22f8:	8c 89       	ldd	r24, Y+20	; 0x14
    22fa:	9d 89       	ldd	r25, Y+21	; 0x15
    22fc:	01 96       	adiw	r24, 0x01	; 1
    22fe:	9d 8b       	std	Y+21, r25	; 0x15
    2300:	8c 8b       	std	Y+20, r24	; 0x14
    2302:	ea 89       	ldd	r30, Y+18	; 0x12
    2304:	fb 89       	ldd	r31, Y+19	; 0x13
    2306:	00 82       	st	Z, r0
    2308:	8a 89       	ldd	r24, Y+18	; 0x12
    230a:	9b 89       	ldd	r25, Y+19	; 0x13
    230c:	01 96       	adiw	r24, 0x01	; 1
    230e:	9b 8b       	std	Y+19, r25	; 0x13
    2310:	8a 8b       	std	Y+18, r24	; 0x12
    2312:	9e 89       	ldd	r25, Y+22	; 0x16
    2314:	91 50       	subi	r25, 0x01	; 1
    2316:	9e 8b       	std	Y+22, r25	; 0x16
    2318:	ee 89       	ldd	r30, Y+22	; 0x16
    231a:	ee 23       	and	r30, r30
    231c:	51 f7       	brne	.-44     	; 0x22f2 <init+0x74>
	Timer1_init(&confg);
    231e:	ce 01       	movw	r24, r28
    2320:	08 96       	adiw	r24, 0x08	; 8
    2322:	0e 94 09 06 	call	0xc12	; 0xc12 <Timer1_init>
}
    2326:	66 96       	adiw	r28, 0x16	; 22
    2328:	0f b6       	in	r0, 0x3f	; 63
    232a:	f8 94       	cli
    232c:	de bf       	out	0x3e, r29	; 62
    232e:	0f be       	out	0x3f, r0	; 63
    2330:	cd bf       	out	0x3d, r28	; 61
    2332:	cf 91       	pop	r28
    2334:	df 91       	pop	r29
    2336:	08 95       	ret

00002338 <Enter_Pass>:
void Enter_Pass(void) {
    2338:	0f 93       	push	r16
    233a:	1f 93       	push	r17
    233c:	df 93       	push	r29
    233e:	cf 93       	push	r28
    2340:	cd b7       	in	r28, 0x3d	; 61
    2342:	de b7       	in	r29, 0x3e	; 62
    2344:	e9 97       	sbiw	r28, 0x39	; 57
    2346:	0f b6       	in	r0, 0x3f	; 63
    2348:	f8 94       	cli
    234a:	de bf       	out	0x3e, r29	; 62
    234c:	0f be       	out	0x3f, r0	; 63
    234e:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	while (1) {

		LCD_displayStringRowColumn(0, 0, "Enter Password");
    2350:	20 e6       	ldi	r18, 0x60	; 96
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	80 e0       	ldi	r24, 0x00	; 0
    2356:	60 e0       	ldi	r22, 0x00	; 0
    2358:	a9 01       	movw	r20, r18
    235a:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <LCD_displayStringRowColumn>
		LCD_moveCursor(1, 0);
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	60 e0       	ldi	r22, 0x00	; 0
    2362:	0e 94 b7 10 	call	0x216e	; 0x216e <LCD_moveCursor>
		for (i = 0; i < SIZE; i++) {
    2366:	19 ae       	std	Y+57, r1	; 0x39
    2368:	81 c0       	rjmp	.+258    	; 0x246c <Enter_Pass+0x134>
			Pass[i] = KEYPAD_getPressedKey();
    236a:	89 ad       	ldd	r24, Y+57	; 0x39
    236c:	08 2f       	mov	r16, r24
    236e:	10 e0       	ldi	r17, 0x00	; 0
    2370:	0e 94 17 0b 	call	0x162e	; 0x162e <KEYPAD_getPressedKey>
    2374:	f8 01       	movw	r30, r16
    2376:	e0 52       	subi	r30, 0x20	; 32
    2378:	ff 4f       	sbci	r31, 0xFF	; 255
    237a:	80 83       	st	Z, r24
			LCD_DisplayChar('*');
    237c:	8a e2       	ldi	r24, 0x2A	; 42
    237e:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <LCD_DisplayChar>
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	aa ef       	ldi	r26, 0xFA	; 250
    2388:	b3 e4       	ldi	r27, 0x43	; 67
    238a:	8d ab       	std	Y+53, r24	; 0x35
    238c:	9e ab       	std	Y+54, r25	; 0x36
    238e:	af ab       	std	Y+55, r26	; 0x37
    2390:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2392:	6d a9       	ldd	r22, Y+53	; 0x35
    2394:	7e a9       	ldd	r23, Y+54	; 0x36
    2396:	8f a9       	ldd	r24, Y+55	; 0x37
    2398:	98 ad       	ldd	r25, Y+56	; 0x38
    239a:	20 e0       	ldi	r18, 0x00	; 0
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	4a ef       	ldi	r20, 0xFA	; 250
    23a0:	54 e4       	ldi	r21, 0x44	; 68
    23a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	89 ab       	std	Y+49, r24	; 0x31
    23ac:	9a ab       	std	Y+50, r25	; 0x32
    23ae:	ab ab       	std	Y+51, r26	; 0x33
    23b0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23b2:	69 a9       	ldd	r22, Y+49	; 0x31
    23b4:	7a a9       	ldd	r23, Y+50	; 0x32
    23b6:	8b a9       	ldd	r24, Y+51	; 0x33
    23b8:	9c a9       	ldd	r25, Y+52	; 0x34
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	40 e8       	ldi	r20, 0x80	; 128
    23c0:	5f e3       	ldi	r21, 0x3F	; 63
    23c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23c6:	88 23       	and	r24, r24
    23c8:	2c f4       	brge	.+10     	; 0x23d4 <Enter_Pass+0x9c>
		__ticks = 1;
    23ca:	81 e0       	ldi	r24, 0x01	; 1
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	98 ab       	std	Y+48, r25	; 0x30
    23d0:	8f a7       	std	Y+47, r24	; 0x2f
    23d2:	3f c0       	rjmp	.+126    	; 0x2452 <Enter_Pass+0x11a>
	else if (__tmp > 65535)
    23d4:	69 a9       	ldd	r22, Y+49	; 0x31
    23d6:	7a a9       	ldd	r23, Y+50	; 0x32
    23d8:	8b a9       	ldd	r24, Y+51	; 0x33
    23da:	9c a9       	ldd	r25, Y+52	; 0x34
    23dc:	20 e0       	ldi	r18, 0x00	; 0
    23de:	3f ef       	ldi	r19, 0xFF	; 255
    23e0:	4f e7       	ldi	r20, 0x7F	; 127
    23e2:	57 e4       	ldi	r21, 0x47	; 71
    23e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23e8:	18 16       	cp	r1, r24
    23ea:	4c f5       	brge	.+82     	; 0x243e <Enter_Pass+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ec:	6d a9       	ldd	r22, Y+53	; 0x35
    23ee:	7e a9       	ldd	r23, Y+54	; 0x36
    23f0:	8f a9       	ldd	r24, Y+55	; 0x37
    23f2:	98 ad       	ldd	r25, Y+56	; 0x38
    23f4:	20 e0       	ldi	r18, 0x00	; 0
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	40 e2       	ldi	r20, 0x20	; 32
    23fa:	51 e4       	ldi	r21, 0x41	; 65
    23fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2400:	dc 01       	movw	r26, r24
    2402:	cb 01       	movw	r24, r22
    2404:	bc 01       	movw	r22, r24
    2406:	cd 01       	movw	r24, r26
    2408:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	98 ab       	std	Y+48, r25	; 0x30
    2412:	8f a7       	std	Y+47, r24	; 0x2f
    2414:	0f c0       	rjmp	.+30     	; 0x2434 <Enter_Pass+0xfc>
    2416:	88 ec       	ldi	r24, 0xC8	; 200
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	9e a7       	std	Y+46, r25	; 0x2e
    241c:	8d a7       	std	Y+45, r24	; 0x2d
    241e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2420:	9e a5       	ldd	r25, Y+46	; 0x2e
    2422:	01 97       	sbiw	r24, 0x01	; 1
    2424:	f1 f7       	brne	.-4      	; 0x2422 <Enter_Pass+0xea>
    2426:	9e a7       	std	Y+46, r25	; 0x2e
    2428:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    242a:	8f a5       	ldd	r24, Y+47	; 0x2f
    242c:	98 a9       	ldd	r25, Y+48	; 0x30
    242e:	01 97       	sbiw	r24, 0x01	; 1
    2430:	98 ab       	std	Y+48, r25	; 0x30
    2432:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2434:	8f a5       	ldd	r24, Y+47	; 0x2f
    2436:	98 a9       	ldd	r25, Y+48	; 0x30
    2438:	00 97       	sbiw	r24, 0x00	; 0
    243a:	69 f7       	brne	.-38     	; 0x2416 <Enter_Pass+0xde>
    243c:	14 c0       	rjmp	.+40     	; 0x2466 <Enter_Pass+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    243e:	69 a9       	ldd	r22, Y+49	; 0x31
    2440:	7a a9       	ldd	r23, Y+50	; 0x32
    2442:	8b a9       	ldd	r24, Y+51	; 0x33
    2444:	9c a9       	ldd	r25, Y+52	; 0x34
    2446:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244a:	dc 01       	movw	r26, r24
    244c:	cb 01       	movw	r24, r22
    244e:	98 ab       	std	Y+48, r25	; 0x30
    2450:	8f a7       	std	Y+47, r24	; 0x2f
    2452:	8f a5       	ldd	r24, Y+47	; 0x2f
    2454:	98 a9       	ldd	r25, Y+48	; 0x30
    2456:	9c a7       	std	Y+44, r25	; 0x2c
    2458:	8b a7       	std	Y+43, r24	; 0x2b
    245a:	8b a5       	ldd	r24, Y+43	; 0x2b
    245c:	9c a5       	ldd	r25, Y+44	; 0x2c
    245e:	01 97       	sbiw	r24, 0x01	; 1
    2460:	f1 f7       	brne	.-4      	; 0x245e <Enter_Pass+0x126>
    2462:	9c a7       	std	Y+44, r25	; 0x2c
    2464:	8b a7       	std	Y+43, r24	; 0x2b
	uint8 i;
	while (1) {

		LCD_displayStringRowColumn(0, 0, "Enter Password");
		LCD_moveCursor(1, 0);
		for (i = 0; i < SIZE; i++) {
    2466:	89 ad       	ldd	r24, Y+57	; 0x39
    2468:	8f 5f       	subi	r24, 0xFF	; 255
    246a:	89 af       	std	Y+57, r24	; 0x39
    246c:	89 ad       	ldd	r24, Y+57	; 0x39
    246e:	85 30       	cpi	r24, 0x05	; 5
    2470:	08 f4       	brcc	.+2      	; 0x2474 <Enter_Pass+0x13c>
    2472:	7b cf       	rjmp	.-266    	; 0x236a <Enter_Pass+0x32>
			Pass[i] = KEYPAD_getPressedKey();
			LCD_DisplayChar('*');
			_delay_ms(500);
		}
		LCD_clearScreen();
    2474:	0e 94 35 11 	call	0x226a	; 0x226a <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "ReEnter Password");
    2478:	2f e6       	ldi	r18, 0x6F	; 111
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	80 e0       	ldi	r24, 0x00	; 0
    247e:	60 e0       	ldi	r22, 0x00	; 0
    2480:	a9 01       	movw	r20, r18
    2482:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <LCD_displayStringRowColumn>
		LCD_moveCursor(1, 0);
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	60 e0       	ldi	r22, 0x00	; 0
    248a:	0e 94 b7 10 	call	0x216e	; 0x216e <LCD_moveCursor>
		for (i = 0; i < SIZE; i++) {
    248e:	19 ae       	std	Y+57, r1	; 0x39
    2490:	81 c0       	rjmp	.+258    	; 0x2594 <Enter_Pass+0x25c>
			//confirm password
			PassConfirm[i] = KEYPAD_getPressedKey();
    2492:	89 ad       	ldd	r24, Y+57	; 0x39
    2494:	08 2f       	mov	r16, r24
    2496:	10 e0       	ldi	r17, 0x00	; 0
    2498:	0e 94 17 0b 	call	0x162e	; 0x162e <KEYPAD_getPressedKey>
    249c:	f8 01       	movw	r30, r16
    249e:	e6 51       	subi	r30, 0x16	; 22
    24a0:	ff 4f       	sbci	r31, 0xFF	; 255
    24a2:	80 83       	st	Z, r24
			LCD_DisplayChar('*');
    24a4:	8a e2       	ldi	r24, 0x2A	; 42
    24a6:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <LCD_DisplayChar>
    24aa:	80 e0       	ldi	r24, 0x00	; 0
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	aa ef       	ldi	r26, 0xFA	; 250
    24b0:	b3 e4       	ldi	r27, 0x43	; 67
    24b2:	8f a3       	std	Y+39, r24	; 0x27
    24b4:	98 a7       	std	Y+40, r25	; 0x28
    24b6:	a9 a7       	std	Y+41, r26	; 0x29
    24b8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ba:	6f a1       	ldd	r22, Y+39	; 0x27
    24bc:	78 a5       	ldd	r23, Y+40	; 0x28
    24be:	89 a5       	ldd	r24, Y+41	; 0x29
    24c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    24c2:	20 e0       	ldi	r18, 0x00	; 0
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	4a ef       	ldi	r20, 0xFA	; 250
    24c8:	54 e4       	ldi	r21, 0x44	; 68
    24ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ce:	dc 01       	movw	r26, r24
    24d0:	cb 01       	movw	r24, r22
    24d2:	8b a3       	std	Y+35, r24	; 0x23
    24d4:	9c a3       	std	Y+36, r25	; 0x24
    24d6:	ad a3       	std	Y+37, r26	; 0x25
    24d8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24da:	6b a1       	ldd	r22, Y+35	; 0x23
    24dc:	7c a1       	ldd	r23, Y+36	; 0x24
    24de:	8d a1       	ldd	r24, Y+37	; 0x25
    24e0:	9e a1       	ldd	r25, Y+38	; 0x26
    24e2:	20 e0       	ldi	r18, 0x00	; 0
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	40 e8       	ldi	r20, 0x80	; 128
    24e8:	5f e3       	ldi	r21, 0x3F	; 63
    24ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24ee:	88 23       	and	r24, r24
    24f0:	2c f4       	brge	.+10     	; 0x24fc <Enter_Pass+0x1c4>
		__ticks = 1;
    24f2:	81 e0       	ldi	r24, 0x01	; 1
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	9a a3       	std	Y+34, r25	; 0x22
    24f8:	89 a3       	std	Y+33, r24	; 0x21
    24fa:	3f c0       	rjmp	.+126    	; 0x257a <Enter_Pass+0x242>
	else if (__tmp > 65535)
    24fc:	6b a1       	ldd	r22, Y+35	; 0x23
    24fe:	7c a1       	ldd	r23, Y+36	; 0x24
    2500:	8d a1       	ldd	r24, Y+37	; 0x25
    2502:	9e a1       	ldd	r25, Y+38	; 0x26
    2504:	20 e0       	ldi	r18, 0x00	; 0
    2506:	3f ef       	ldi	r19, 0xFF	; 255
    2508:	4f e7       	ldi	r20, 0x7F	; 127
    250a:	57 e4       	ldi	r21, 0x47	; 71
    250c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2510:	18 16       	cp	r1, r24
    2512:	4c f5       	brge	.+82     	; 0x2566 <Enter_Pass+0x22e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2514:	6f a1       	ldd	r22, Y+39	; 0x27
    2516:	78 a5       	ldd	r23, Y+40	; 0x28
    2518:	89 a5       	ldd	r24, Y+41	; 0x29
    251a:	9a a5       	ldd	r25, Y+42	; 0x2a
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	40 e2       	ldi	r20, 0x20	; 32
    2522:	51 e4       	ldi	r21, 0x41	; 65
    2524:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	bc 01       	movw	r22, r24
    252e:	cd 01       	movw	r24, r26
    2530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	9a a3       	std	Y+34, r25	; 0x22
    253a:	89 a3       	std	Y+33, r24	; 0x21
    253c:	0f c0       	rjmp	.+30     	; 0x255c <Enter_Pass+0x224>
    253e:	88 ec       	ldi	r24, 0xC8	; 200
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	98 a3       	std	Y+32, r25	; 0x20
    2544:	8f 8f       	std	Y+31, r24	; 0x1f
    2546:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2548:	98 a1       	ldd	r25, Y+32	; 0x20
    254a:	01 97       	sbiw	r24, 0x01	; 1
    254c:	f1 f7       	brne	.-4      	; 0x254a <Enter_Pass+0x212>
    254e:	98 a3       	std	Y+32, r25	; 0x20
    2550:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2552:	89 a1       	ldd	r24, Y+33	; 0x21
    2554:	9a a1       	ldd	r25, Y+34	; 0x22
    2556:	01 97       	sbiw	r24, 0x01	; 1
    2558:	9a a3       	std	Y+34, r25	; 0x22
    255a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    255c:	89 a1       	ldd	r24, Y+33	; 0x21
    255e:	9a a1       	ldd	r25, Y+34	; 0x22
    2560:	00 97       	sbiw	r24, 0x00	; 0
    2562:	69 f7       	brne	.-38     	; 0x253e <Enter_Pass+0x206>
    2564:	14 c0       	rjmp	.+40     	; 0x258e <Enter_Pass+0x256>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2566:	6b a1       	ldd	r22, Y+35	; 0x23
    2568:	7c a1       	ldd	r23, Y+36	; 0x24
    256a:	8d a1       	ldd	r24, Y+37	; 0x25
    256c:	9e a1       	ldd	r25, Y+38	; 0x26
    256e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	9a a3       	std	Y+34, r25	; 0x22
    2578:	89 a3       	std	Y+33, r24	; 0x21
    257a:	89 a1       	ldd	r24, Y+33	; 0x21
    257c:	9a a1       	ldd	r25, Y+34	; 0x22
    257e:	9e 8f       	std	Y+30, r25	; 0x1e
    2580:	8d 8f       	std	Y+29, r24	; 0x1d
    2582:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2584:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2586:	01 97       	sbiw	r24, 0x01	; 1
    2588:	f1 f7       	brne	.-4      	; 0x2586 <Enter_Pass+0x24e>
    258a:	9e 8f       	std	Y+30, r25	; 0x1e
    258c:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(500);
		}
		LCD_clearScreen();
		LCD_displayStringRowColumn(0, 0, "ReEnter Password");
		LCD_moveCursor(1, 0);
		for (i = 0; i < SIZE; i++) {
    258e:	89 ad       	ldd	r24, Y+57	; 0x39
    2590:	8f 5f       	subi	r24, 0xFF	; 255
    2592:	89 af       	std	Y+57, r24	; 0x39
    2594:	89 ad       	ldd	r24, Y+57	; 0x39
    2596:	85 30       	cpi	r24, 0x05	; 5
    2598:	08 f4       	brcc	.+2      	; 0x259c <Enter_Pass+0x264>
    259a:	7b cf       	rjmp	.-266    	; 0x2492 <Enter_Pass+0x15a>
			//confirm password
			PassConfirm[i] = KEYPAD_getPressedKey();
			LCD_DisplayChar('*');
			_delay_ms(500);
		}
		for (i = 0; i < SIZE; i++) {
    259c:	19 ae       	std	Y+57, r1	; 0x39
    259e:	18 c0       	rjmp	.+48     	; 0x25d0 <Enter_Pass+0x298>
			if (Pass[i] == PassConfirm[i]) {
    25a0:	89 ad       	ldd	r24, Y+57	; 0x39
    25a2:	88 2f       	mov	r24, r24
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	fc 01       	movw	r30, r24
    25a8:	e0 52       	subi	r30, 0x20	; 32
    25aa:	ff 4f       	sbci	r31, 0xFF	; 255
    25ac:	20 81       	ld	r18, Z
    25ae:	89 ad       	ldd	r24, Y+57	; 0x39
    25b0:	88 2f       	mov	r24, r24
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	fc 01       	movw	r30, r24
    25b6:	e6 51       	subi	r30, 0x16	; 22
    25b8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ba:	80 81       	ld	r24, Z
    25bc:	28 17       	cp	r18, r24
    25be:	29 f4       	brne	.+10     	; 0x25ca <Enter_Pass+0x292>
				check++;
    25c0:	80 91 de 00 	lds	r24, 0x00DE
    25c4:	8f 5f       	subi	r24, 0xFF	; 255
    25c6:	80 93 de 00 	sts	0x00DE, r24
			//confirm password
			PassConfirm[i] = KEYPAD_getPressedKey();
			LCD_DisplayChar('*');
			_delay_ms(500);
		}
		for (i = 0; i < SIZE; i++) {
    25ca:	89 ad       	ldd	r24, Y+57	; 0x39
    25cc:	8f 5f       	subi	r24, 0xFF	; 255
    25ce:	89 af       	std	Y+57, r24	; 0x39
    25d0:	89 ad       	ldd	r24, Y+57	; 0x39
    25d2:	85 30       	cpi	r24, 0x05	; 5
    25d4:	28 f3       	brcs	.-54     	; 0x25a0 <Enter_Pass+0x268>
			if (Pass[i] == PassConfirm[i]) {
				check++;
			}
		}
		LCD_clearScreen();
    25d6:	0e 94 35 11 	call	0x226a	; 0x226a <LCD_clearScreen>
		if (check == 5) {
    25da:	80 91 de 00 	lds	r24, 0x00DE
    25de:	85 30       	cpi	r24, 0x05	; 5
    25e0:	09 f0       	breq	.+2      	; 0x25e4 <Enter_Pass+0x2ac>
    25e2:	8a c0       	rjmp	.+276    	; 0x26f8 <Enter_Pass+0x3c0>
			UART_sendByte(RECEIVEPASS);
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	0e 94 85 0a 	call	0x150a	; 0x150a <UART_sendByte>
			check = 0;
    25ea:	10 92 de 00 	sts	0x00DE, r1
			for (i = 0; i < SIZE; i++) {
    25ee:	19 ae       	std	Y+57, r1	; 0x39
    25f0:	7e c0       	rjmp	.+252    	; 0x26ee <Enter_Pass+0x3b6>
				UART_sendByte(Pass[i]);
    25f2:	89 ad       	ldd	r24, Y+57	; 0x39
    25f4:	88 2f       	mov	r24, r24
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	fc 01       	movw	r30, r24
    25fa:	e0 52       	subi	r30, 0x20	; 32
    25fc:	ff 4f       	sbci	r31, 0xFF	; 255
    25fe:	80 81       	ld	r24, Z
    2600:	0e 94 85 0a 	call	0x150a	; 0x150a <UART_sendByte>
    2604:	80 e0       	ldi	r24, 0x00	; 0
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	a0 e2       	ldi	r26, 0x20	; 32
    260a:	b1 e4       	ldi	r27, 0x41	; 65
    260c:	89 8f       	std	Y+25, r24	; 0x19
    260e:	9a 8f       	std	Y+26, r25	; 0x1a
    2610:	ab 8f       	std	Y+27, r26	; 0x1b
    2612:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2614:	69 8d       	ldd	r22, Y+25	; 0x19
    2616:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2618:	8b 8d       	ldd	r24, Y+27	; 0x1b
    261a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    261c:	20 e0       	ldi	r18, 0x00	; 0
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	4a ef       	ldi	r20, 0xFA	; 250
    2622:	54 e4       	ldi	r21, 0x44	; 68
    2624:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	8d 8b       	std	Y+21, r24	; 0x15
    262e:	9e 8b       	std	Y+22, r25	; 0x16
    2630:	af 8b       	std	Y+23, r26	; 0x17
    2632:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2634:	6d 89       	ldd	r22, Y+21	; 0x15
    2636:	7e 89       	ldd	r23, Y+22	; 0x16
    2638:	8f 89       	ldd	r24, Y+23	; 0x17
    263a:	98 8d       	ldd	r25, Y+24	; 0x18
    263c:	20 e0       	ldi	r18, 0x00	; 0
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	40 e8       	ldi	r20, 0x80	; 128
    2642:	5f e3       	ldi	r21, 0x3F	; 63
    2644:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2648:	88 23       	and	r24, r24
    264a:	2c f4       	brge	.+10     	; 0x2656 <Enter_Pass+0x31e>
		__ticks = 1;
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	9c 8b       	std	Y+20, r25	; 0x14
    2652:	8b 8b       	std	Y+19, r24	; 0x13
    2654:	3f c0       	rjmp	.+126    	; 0x26d4 <Enter_Pass+0x39c>
	else if (__tmp > 65535)
    2656:	6d 89       	ldd	r22, Y+21	; 0x15
    2658:	7e 89       	ldd	r23, Y+22	; 0x16
    265a:	8f 89       	ldd	r24, Y+23	; 0x17
    265c:	98 8d       	ldd	r25, Y+24	; 0x18
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	3f ef       	ldi	r19, 0xFF	; 255
    2662:	4f e7       	ldi	r20, 0x7F	; 127
    2664:	57 e4       	ldi	r21, 0x47	; 71
    2666:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    266a:	18 16       	cp	r1, r24
    266c:	4c f5       	brge	.+82     	; 0x26c0 <Enter_Pass+0x388>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    266e:	69 8d       	ldd	r22, Y+25	; 0x19
    2670:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2672:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2674:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	40 e2       	ldi	r20, 0x20	; 32
    267c:	51 e4       	ldi	r21, 0x41	; 65
    267e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2682:	dc 01       	movw	r26, r24
    2684:	cb 01       	movw	r24, r22
    2686:	bc 01       	movw	r22, r24
    2688:	cd 01       	movw	r24, r26
    268a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268e:	dc 01       	movw	r26, r24
    2690:	cb 01       	movw	r24, r22
    2692:	9c 8b       	std	Y+20, r25	; 0x14
    2694:	8b 8b       	std	Y+19, r24	; 0x13
    2696:	0f c0       	rjmp	.+30     	; 0x26b6 <Enter_Pass+0x37e>
    2698:	88 ec       	ldi	r24, 0xC8	; 200
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	9a 8b       	std	Y+18, r25	; 0x12
    269e:	89 8b       	std	Y+17, r24	; 0x11
    26a0:	89 89       	ldd	r24, Y+17	; 0x11
    26a2:	9a 89       	ldd	r25, Y+18	; 0x12
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	f1 f7       	brne	.-4      	; 0x26a4 <Enter_Pass+0x36c>
    26a8:	9a 8b       	std	Y+18, r25	; 0x12
    26aa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ac:	8b 89       	ldd	r24, Y+19	; 0x13
    26ae:	9c 89       	ldd	r25, Y+20	; 0x14
    26b0:	01 97       	sbiw	r24, 0x01	; 1
    26b2:	9c 8b       	std	Y+20, r25	; 0x14
    26b4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b6:	8b 89       	ldd	r24, Y+19	; 0x13
    26b8:	9c 89       	ldd	r25, Y+20	; 0x14
    26ba:	00 97       	sbiw	r24, 0x00	; 0
    26bc:	69 f7       	brne	.-38     	; 0x2698 <Enter_Pass+0x360>
    26be:	14 c0       	rjmp	.+40     	; 0x26e8 <Enter_Pass+0x3b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c0:	6d 89       	ldd	r22, Y+21	; 0x15
    26c2:	7e 89       	ldd	r23, Y+22	; 0x16
    26c4:	8f 89       	ldd	r24, Y+23	; 0x17
    26c6:	98 8d       	ldd	r25, Y+24	; 0x18
    26c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	9c 8b       	std	Y+20, r25	; 0x14
    26d2:	8b 8b       	std	Y+19, r24	; 0x13
    26d4:	8b 89       	ldd	r24, Y+19	; 0x13
    26d6:	9c 89       	ldd	r25, Y+20	; 0x14
    26d8:	98 8b       	std	Y+16, r25	; 0x10
    26da:	8f 87       	std	Y+15, r24	; 0x0f
    26dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    26de:	98 89       	ldd	r25, Y+16	; 0x10
    26e0:	01 97       	sbiw	r24, 0x01	; 1
    26e2:	f1 f7       	brne	.-4      	; 0x26e0 <Enter_Pass+0x3a8>
    26e4:	98 8b       	std	Y+16, r25	; 0x10
    26e6:	8f 87       	std	Y+15, r24	; 0x0f
		}
		LCD_clearScreen();
		if (check == 5) {
			UART_sendByte(RECEIVEPASS);
			check = 0;
			for (i = 0; i < SIZE; i++) {
    26e8:	89 ad       	ldd	r24, Y+57	; 0x39
    26ea:	8f 5f       	subi	r24, 0xFF	; 255
    26ec:	89 af       	std	Y+57, r24	; 0x39
    26ee:	89 ad       	ldd	r24, Y+57	; 0x39
    26f0:	85 30       	cpi	r24, 0x05	; 5
    26f2:	08 f4       	brcc	.+2      	; 0x26f6 <Enter_Pass+0x3be>
    26f4:	7e cf       	rjmp	.-260    	; 0x25f2 <Enter_Pass+0x2ba>
    26f6:	7d c0       	rjmp	.+250    	; 0x27f2 <Enter_Pass+0x4ba>
				UART_sendByte(Pass[i]);
				_delay_ms(10);
			}
			break; }

		check = 0;
    26f8:	10 92 de 00 	sts	0x00DE, r1
		LCD_clearScreen();
    26fc:	0e 94 35 11 	call	0x226a	; 0x226a <LCD_clearScreen>
		LCD_DisplayString("Invalid");
    2700:	80 e8       	ldi	r24, 0x80	; 128
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_DisplayString>
    2708:	80 e0       	ldi	r24, 0x00	; 0
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	aa e7       	ldi	r26, 0x7A	; 122
    270e:	b4 e4       	ldi	r27, 0x44	; 68
    2710:	8b 87       	std	Y+11, r24	; 0x0b
    2712:	9c 87       	std	Y+12, r25	; 0x0c
    2714:	ad 87       	std	Y+13, r26	; 0x0d
    2716:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2718:	6b 85       	ldd	r22, Y+11	; 0x0b
    271a:	7c 85       	ldd	r23, Y+12	; 0x0c
    271c:	8d 85       	ldd	r24, Y+13	; 0x0d
    271e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2720:	20 e0       	ldi	r18, 0x00	; 0
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	4a ef       	ldi	r20, 0xFA	; 250
    2726:	54 e4       	ldi	r21, 0x44	; 68
    2728:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    272c:	dc 01       	movw	r26, r24
    272e:	cb 01       	movw	r24, r22
    2730:	8f 83       	std	Y+7, r24	; 0x07
    2732:	98 87       	std	Y+8, r25	; 0x08
    2734:	a9 87       	std	Y+9, r26	; 0x09
    2736:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2738:	6f 81       	ldd	r22, Y+7	; 0x07
    273a:	78 85       	ldd	r23, Y+8	; 0x08
    273c:	89 85       	ldd	r24, Y+9	; 0x09
    273e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2740:	20 e0       	ldi	r18, 0x00	; 0
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	40 e8       	ldi	r20, 0x80	; 128
    2746:	5f e3       	ldi	r21, 0x3F	; 63
    2748:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    274c:	88 23       	and	r24, r24
    274e:	2c f4       	brge	.+10     	; 0x275a <Enter_Pass+0x422>
		__ticks = 1;
    2750:	81 e0       	ldi	r24, 0x01	; 1
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	9e 83       	std	Y+6, r25	; 0x06
    2756:	8d 83       	std	Y+5, r24	; 0x05
    2758:	3f c0       	rjmp	.+126    	; 0x27d8 <Enter_Pass+0x4a0>
	else if (__tmp > 65535)
    275a:	6f 81       	ldd	r22, Y+7	; 0x07
    275c:	78 85       	ldd	r23, Y+8	; 0x08
    275e:	89 85       	ldd	r24, Y+9	; 0x09
    2760:	9a 85       	ldd	r25, Y+10	; 0x0a
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	3f ef       	ldi	r19, 0xFF	; 255
    2766:	4f e7       	ldi	r20, 0x7F	; 127
    2768:	57 e4       	ldi	r21, 0x47	; 71
    276a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    276e:	18 16       	cp	r1, r24
    2770:	4c f5       	brge	.+82     	; 0x27c4 <Enter_Pass+0x48c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2772:	6b 85       	ldd	r22, Y+11	; 0x0b
    2774:	7c 85       	ldd	r23, Y+12	; 0x0c
    2776:	8d 85       	ldd	r24, Y+13	; 0x0d
    2778:	9e 85       	ldd	r25, Y+14	; 0x0e
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	40 e2       	ldi	r20, 0x20	; 32
    2780:	51 e4       	ldi	r21, 0x41	; 65
    2782:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2786:	dc 01       	movw	r26, r24
    2788:	cb 01       	movw	r24, r22
    278a:	bc 01       	movw	r22, r24
    278c:	cd 01       	movw	r24, r26
    278e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2792:	dc 01       	movw	r26, r24
    2794:	cb 01       	movw	r24, r22
    2796:	9e 83       	std	Y+6, r25	; 0x06
    2798:	8d 83       	std	Y+5, r24	; 0x05
    279a:	0f c0       	rjmp	.+30     	; 0x27ba <Enter_Pass+0x482>
    279c:	88 ec       	ldi	r24, 0xC8	; 200
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	9c 83       	std	Y+4, r25	; 0x04
    27a2:	8b 83       	std	Y+3, r24	; 0x03
    27a4:	8b 81       	ldd	r24, Y+3	; 0x03
    27a6:	9c 81       	ldd	r25, Y+4	; 0x04
    27a8:	01 97       	sbiw	r24, 0x01	; 1
    27aa:	f1 f7       	brne	.-4      	; 0x27a8 <Enter_Pass+0x470>
    27ac:	9c 83       	std	Y+4, r25	; 0x04
    27ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27b0:	8d 81       	ldd	r24, Y+5	; 0x05
    27b2:	9e 81       	ldd	r25, Y+6	; 0x06
    27b4:	01 97       	sbiw	r24, 0x01	; 1
    27b6:	9e 83       	std	Y+6, r25	; 0x06
    27b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ba:	8d 81       	ldd	r24, Y+5	; 0x05
    27bc:	9e 81       	ldd	r25, Y+6	; 0x06
    27be:	00 97       	sbiw	r24, 0x00	; 0
    27c0:	69 f7       	brne	.-38     	; 0x279c <Enter_Pass+0x464>
    27c2:	14 c0       	rjmp	.+40     	; 0x27ec <Enter_Pass+0x4b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27c4:	6f 81       	ldd	r22, Y+7	; 0x07
    27c6:	78 85       	ldd	r23, Y+8	; 0x08
    27c8:	89 85       	ldd	r24, Y+9	; 0x09
    27ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    27cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d0:	dc 01       	movw	r26, r24
    27d2:	cb 01       	movw	r24, r22
    27d4:	9e 83       	std	Y+6, r25	; 0x06
    27d6:	8d 83       	std	Y+5, r24	; 0x05
    27d8:	8d 81       	ldd	r24, Y+5	; 0x05
    27da:	9e 81       	ldd	r25, Y+6	; 0x06
    27dc:	9a 83       	std	Y+2, r25	; 0x02
    27de:	89 83       	std	Y+1, r24	; 0x01
    27e0:	89 81       	ldd	r24, Y+1	; 0x01
    27e2:	9a 81       	ldd	r25, Y+2	; 0x02
    27e4:	01 97       	sbiw	r24, 0x01	; 1
    27e6:	f1 f7       	brne	.-4      	; 0x27e4 <Enter_Pass+0x4ac>
    27e8:	9a 83       	std	Y+2, r25	; 0x02
    27ea:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		LCD_clearScreen();
    27ec:	0e 94 35 11 	call	0x226a	; 0x226a <LCD_clearScreen>
    27f0:	af cd       	rjmp	.-1186   	; 0x2350 <Enter_Pass+0x18>
	}
}
    27f2:	e9 96       	adiw	r28, 0x39	; 57
    27f4:	0f b6       	in	r0, 0x3f	; 63
    27f6:	f8 94       	cli
    27f8:	de bf       	out	0x3e, r29	; 62
    27fa:	0f be       	out	0x3f, r0	; 63
    27fc:	cd bf       	out	0x3d, r28	; 61
    27fe:	cf 91       	pop	r28
    2800:	df 91       	pop	r29
    2802:	1f 91       	pop	r17
    2804:	0f 91       	pop	r16
    2806:	08 95       	ret

00002808 <buzzer_handling>:

void buzzer_handling(void) {
    2808:	df 93       	push	r29
    280a:	cf 93       	push	r28
    280c:	cd b7       	in	r28, 0x3d	; 61
    280e:	de b7       	in	r29, 0x3e	; 62
	Buzzer_Flag++;
    2810:	80 91 df 00 	lds	r24, 0x00DF
    2814:	8f 5f       	subi	r24, 0xFF	; 255
    2816:	80 93 df 00 	sts	0x00DF, r24
	LCD_clearScreen();
    281a:	0e 94 35 11 	call	0x226a	; 0x226a <LCD_clearScreen>
	if (Buzzer_Flag == 3) {
    281e:	80 91 df 00 	lds	r24, 0x00DF
    2822:	83 30       	cpi	r24, 0x03	; 3
    2824:	29 f4       	brne	.+10     	; 0x2830 <buzzer_handling+0x28>
		UART_sendByte(BUZZERON);
    2826:	87 e0       	ldi	r24, 0x07	; 7
    2828:	0e 94 85 0a 	call	0x150a	; 0x150a <UART_sendByte>
		Buzzer_Flag = 0;
    282c:	10 92 df 00 	sts	0x00DF, r1
	}
}
    2830:	cf 91       	pop	r28
    2832:	df 91       	pop	r29
    2834:	08 95       	ret

00002836 <check_pass>:
uint8 check_pass(void) {
    2836:	0f 93       	push	r16
    2838:	1f 93       	push	r17
    283a:	df 93       	push	r29
    283c:	cf 93       	push	r28
    283e:	cd b7       	in	r28, 0x3d	; 61
    2840:	de b7       	in	r29, 0x3e	; 62
    2842:	6e 97       	sbiw	r28, 0x1e	; 30
    2844:	0f b6       	in	r0, 0x3f	; 63
    2846:	f8 94       	cli
    2848:	de bf       	out	0x3e, r29	; 62
    284a:	0f be       	out	0x3f, r0	; 63
    284c:	cd bf       	out	0x3d, r28	; 61
	uint8 key;
	uint8 i;
	LCD_clearScreen();
    284e:	0e 94 35 11 	call	0x226a	; 0x226a <LCD_clearScreen>
	LCD_DisplayString("Enter Password");
    2852:	80 e6       	ldi	r24, 0x60	; 96
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_DisplayString>
	LCD_moveCursor(1, 0);
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	60 e0       	ldi	r22, 0x00	; 0
    285e:	0e 94 b7 10 	call	0x216e	; 0x216e <LCD_moveCursor>
	for (i = 0; i < SIZE; i++) {
    2862:	1d 8e       	std	Y+29, r1	; 0x1d
    2864:	81 c0       	rjmp	.+258    	; 0x2968 <check_pass+0x132>
		PassPrev[i] = KEYPAD_getPressedKey();
    2866:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2868:	08 2f       	mov	r16, r24
    286a:	10 e0       	ldi	r17, 0x00	; 0
    286c:	0e 94 17 0b 	call	0x162e	; 0x162e <KEYPAD_getPressedKey>
    2870:	f8 01       	movw	r30, r16
    2872:	eb 51       	subi	r30, 0x1B	; 27
    2874:	ff 4f       	sbci	r31, 0xFF	; 255
    2876:	80 83       	st	Z, r24
		LCD_DisplayChar('*');
    2878:	8a e2       	ldi	r24, 0x2A	; 42
    287a:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <LCD_DisplayChar>
    287e:	80 e0       	ldi	r24, 0x00	; 0
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	aa ef       	ldi	r26, 0xFA	; 250
    2884:	b3 e4       	ldi	r27, 0x43	; 67
    2886:	89 8f       	std	Y+25, r24	; 0x19
    2888:	9a 8f       	std	Y+26, r25	; 0x1a
    288a:	ab 8f       	std	Y+27, r26	; 0x1b
    288c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    288e:	69 8d       	ldd	r22, Y+25	; 0x19
    2890:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2892:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2894:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2896:	20 e0       	ldi	r18, 0x00	; 0
    2898:	30 e0       	ldi	r19, 0x00	; 0
    289a:	4a ef       	ldi	r20, 0xFA	; 250
    289c:	54 e4       	ldi	r21, 0x44	; 68
    289e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a2:	dc 01       	movw	r26, r24
    28a4:	cb 01       	movw	r24, r22
    28a6:	8d 8b       	std	Y+21, r24	; 0x15
    28a8:	9e 8b       	std	Y+22, r25	; 0x16
    28aa:	af 8b       	std	Y+23, r26	; 0x17
    28ac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28ae:	6d 89       	ldd	r22, Y+21	; 0x15
    28b0:	7e 89       	ldd	r23, Y+22	; 0x16
    28b2:	8f 89       	ldd	r24, Y+23	; 0x17
    28b4:	98 8d       	ldd	r25, Y+24	; 0x18
    28b6:	20 e0       	ldi	r18, 0x00	; 0
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	40 e8       	ldi	r20, 0x80	; 128
    28bc:	5f e3       	ldi	r21, 0x3F	; 63
    28be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28c2:	88 23       	and	r24, r24
    28c4:	2c f4       	brge	.+10     	; 0x28d0 <check_pass+0x9a>
		__ticks = 1;
    28c6:	81 e0       	ldi	r24, 0x01	; 1
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	9c 8b       	std	Y+20, r25	; 0x14
    28cc:	8b 8b       	std	Y+19, r24	; 0x13
    28ce:	3f c0       	rjmp	.+126    	; 0x294e <check_pass+0x118>
	else if (__tmp > 65535)
    28d0:	6d 89       	ldd	r22, Y+21	; 0x15
    28d2:	7e 89       	ldd	r23, Y+22	; 0x16
    28d4:	8f 89       	ldd	r24, Y+23	; 0x17
    28d6:	98 8d       	ldd	r25, Y+24	; 0x18
    28d8:	20 e0       	ldi	r18, 0x00	; 0
    28da:	3f ef       	ldi	r19, 0xFF	; 255
    28dc:	4f e7       	ldi	r20, 0x7F	; 127
    28de:	57 e4       	ldi	r21, 0x47	; 71
    28e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28e4:	18 16       	cp	r1, r24
    28e6:	4c f5       	brge	.+82     	; 0x293a <check_pass+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28e8:	69 8d       	ldd	r22, Y+25	; 0x19
    28ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28f0:	20 e0       	ldi	r18, 0x00	; 0
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	40 e2       	ldi	r20, 0x20	; 32
    28f6:	51 e4       	ldi	r21, 0x41	; 65
    28f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28fc:	dc 01       	movw	r26, r24
    28fe:	cb 01       	movw	r24, r22
    2900:	bc 01       	movw	r22, r24
    2902:	cd 01       	movw	r24, r26
    2904:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2908:	dc 01       	movw	r26, r24
    290a:	cb 01       	movw	r24, r22
    290c:	9c 8b       	std	Y+20, r25	; 0x14
    290e:	8b 8b       	std	Y+19, r24	; 0x13
    2910:	0f c0       	rjmp	.+30     	; 0x2930 <check_pass+0xfa>
    2912:	88 ec       	ldi	r24, 0xC8	; 200
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	9a 8b       	std	Y+18, r25	; 0x12
    2918:	89 8b       	std	Y+17, r24	; 0x11
    291a:	89 89       	ldd	r24, Y+17	; 0x11
    291c:	9a 89       	ldd	r25, Y+18	; 0x12
    291e:	01 97       	sbiw	r24, 0x01	; 1
    2920:	f1 f7       	brne	.-4      	; 0x291e <check_pass+0xe8>
    2922:	9a 8b       	std	Y+18, r25	; 0x12
    2924:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2926:	8b 89       	ldd	r24, Y+19	; 0x13
    2928:	9c 89       	ldd	r25, Y+20	; 0x14
    292a:	01 97       	sbiw	r24, 0x01	; 1
    292c:	9c 8b       	std	Y+20, r25	; 0x14
    292e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2930:	8b 89       	ldd	r24, Y+19	; 0x13
    2932:	9c 89       	ldd	r25, Y+20	; 0x14
    2934:	00 97       	sbiw	r24, 0x00	; 0
    2936:	69 f7       	brne	.-38     	; 0x2912 <check_pass+0xdc>
    2938:	14 c0       	rjmp	.+40     	; 0x2962 <check_pass+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    293a:	6d 89       	ldd	r22, Y+21	; 0x15
    293c:	7e 89       	ldd	r23, Y+22	; 0x16
    293e:	8f 89       	ldd	r24, Y+23	; 0x17
    2940:	98 8d       	ldd	r25, Y+24	; 0x18
    2942:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2946:	dc 01       	movw	r26, r24
    2948:	cb 01       	movw	r24, r22
    294a:	9c 8b       	std	Y+20, r25	; 0x14
    294c:	8b 8b       	std	Y+19, r24	; 0x13
    294e:	8b 89       	ldd	r24, Y+19	; 0x13
    2950:	9c 89       	ldd	r25, Y+20	; 0x14
    2952:	98 8b       	std	Y+16, r25	; 0x10
    2954:	8f 87       	std	Y+15, r24	; 0x0f
    2956:	8f 85       	ldd	r24, Y+15	; 0x0f
    2958:	98 89       	ldd	r25, Y+16	; 0x10
    295a:	01 97       	sbiw	r24, 0x01	; 1
    295c:	f1 f7       	brne	.-4      	; 0x295a <check_pass+0x124>
    295e:	98 8b       	std	Y+16, r25	; 0x10
    2960:	8f 87       	std	Y+15, r24	; 0x0f
	uint8 key;
	uint8 i;
	LCD_clearScreen();
	LCD_DisplayString("Enter Password");
	LCD_moveCursor(1, 0);
	for (i = 0; i < SIZE; i++) {
    2962:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2964:	8f 5f       	subi	r24, 0xFF	; 255
    2966:	8d 8f       	std	Y+29, r24	; 0x1d
    2968:	8d 8d       	ldd	r24, Y+29	; 0x1d
    296a:	85 30       	cpi	r24, 0x05	; 5
    296c:	08 f4       	brcc	.+2      	; 0x2970 <check_pass+0x13a>
    296e:	7b cf       	rjmp	.-266    	; 0x2866 <check_pass+0x30>
		PassPrev[i] = KEYPAD_getPressedKey();
		LCD_DisplayChar('*');
		_delay_ms(500);
	}
	UART_sendByte(CHECK_PASS);
    2970:	82 e0       	ldi	r24, 0x02	; 2
    2972:	0e 94 85 0a 	call	0x150a	; 0x150a <UART_sendByte>
	for (i = 0; i < SIZE; i++) {
    2976:	1d 8e       	std	Y+29, r1	; 0x1d
    2978:	7e c0       	rjmp	.+252    	; 0x2a76 <check_pass+0x240>
		UART_sendByte(PassPrev[i]);
    297a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    297c:	88 2f       	mov	r24, r24
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	fc 01       	movw	r30, r24
    2982:	eb 51       	subi	r30, 0x1B	; 27
    2984:	ff 4f       	sbci	r31, 0xFF	; 255
    2986:	80 81       	ld	r24, Z
    2988:	0e 94 85 0a 	call	0x150a	; 0x150a <UART_sendByte>
    298c:	80 e0       	ldi	r24, 0x00	; 0
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	a0 e2       	ldi	r26, 0x20	; 32
    2992:	b1 e4       	ldi	r27, 0x41	; 65
    2994:	8b 87       	std	Y+11, r24	; 0x0b
    2996:	9c 87       	std	Y+12, r25	; 0x0c
    2998:	ad 87       	std	Y+13, r26	; 0x0d
    299a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    299c:	6b 85       	ldd	r22, Y+11	; 0x0b
    299e:	7c 85       	ldd	r23, Y+12	; 0x0c
    29a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    29a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	4a ef       	ldi	r20, 0xFA	; 250
    29aa:	54 e4       	ldi	r21, 0x44	; 68
    29ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b0:	dc 01       	movw	r26, r24
    29b2:	cb 01       	movw	r24, r22
    29b4:	8f 83       	std	Y+7, r24	; 0x07
    29b6:	98 87       	std	Y+8, r25	; 0x08
    29b8:	a9 87       	std	Y+9, r26	; 0x09
    29ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29bc:	6f 81       	ldd	r22, Y+7	; 0x07
    29be:	78 85       	ldd	r23, Y+8	; 0x08
    29c0:	89 85       	ldd	r24, Y+9	; 0x09
    29c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29c4:	20 e0       	ldi	r18, 0x00	; 0
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	40 e8       	ldi	r20, 0x80	; 128
    29ca:	5f e3       	ldi	r21, 0x3F	; 63
    29cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29d0:	88 23       	and	r24, r24
    29d2:	2c f4       	brge	.+10     	; 0x29de <check_pass+0x1a8>
		__ticks = 1;
    29d4:	81 e0       	ldi	r24, 0x01	; 1
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	9e 83       	std	Y+6, r25	; 0x06
    29da:	8d 83       	std	Y+5, r24	; 0x05
    29dc:	3f c0       	rjmp	.+126    	; 0x2a5c <check_pass+0x226>
	else if (__tmp > 65535)
    29de:	6f 81       	ldd	r22, Y+7	; 0x07
    29e0:	78 85       	ldd	r23, Y+8	; 0x08
    29e2:	89 85       	ldd	r24, Y+9	; 0x09
    29e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e6:	20 e0       	ldi	r18, 0x00	; 0
    29e8:	3f ef       	ldi	r19, 0xFF	; 255
    29ea:	4f e7       	ldi	r20, 0x7F	; 127
    29ec:	57 e4       	ldi	r21, 0x47	; 71
    29ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29f2:	18 16       	cp	r1, r24
    29f4:	4c f5       	brge	.+82     	; 0x2a48 <check_pass+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    29f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    29fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    29fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    29fe:	20 e0       	ldi	r18, 0x00	; 0
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	40 e2       	ldi	r20, 0x20	; 32
    2a04:	51 e4       	ldi	r21, 0x41	; 65
    2a06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a0a:	dc 01       	movw	r26, r24
    2a0c:	cb 01       	movw	r24, r22
    2a0e:	bc 01       	movw	r22, r24
    2a10:	cd 01       	movw	r24, r26
    2a12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a16:	dc 01       	movw	r26, r24
    2a18:	cb 01       	movw	r24, r22
    2a1a:	9e 83       	std	Y+6, r25	; 0x06
    2a1c:	8d 83       	std	Y+5, r24	; 0x05
    2a1e:	0f c0       	rjmp	.+30     	; 0x2a3e <check_pass+0x208>
    2a20:	88 ec       	ldi	r24, 0xC8	; 200
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	9c 83       	std	Y+4, r25	; 0x04
    2a26:	8b 83       	std	Y+3, r24	; 0x03
    2a28:	8b 81       	ldd	r24, Y+3	; 0x03
    2a2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a2c:	01 97       	sbiw	r24, 0x01	; 1
    2a2e:	f1 f7       	brne	.-4      	; 0x2a2c <check_pass+0x1f6>
    2a30:	9c 83       	std	Y+4, r25	; 0x04
    2a32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a34:	8d 81       	ldd	r24, Y+5	; 0x05
    2a36:	9e 81       	ldd	r25, Y+6	; 0x06
    2a38:	01 97       	sbiw	r24, 0x01	; 1
    2a3a:	9e 83       	std	Y+6, r25	; 0x06
    2a3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a40:	9e 81       	ldd	r25, Y+6	; 0x06
    2a42:	00 97       	sbiw	r24, 0x00	; 0
    2a44:	69 f7       	brne	.-38     	; 0x2a20 <check_pass+0x1ea>
    2a46:	14 c0       	rjmp	.+40     	; 0x2a70 <check_pass+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a48:	6f 81       	ldd	r22, Y+7	; 0x07
    2a4a:	78 85       	ldd	r23, Y+8	; 0x08
    2a4c:	89 85       	ldd	r24, Y+9	; 0x09
    2a4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a54:	dc 01       	movw	r26, r24
    2a56:	cb 01       	movw	r24, r22
    2a58:	9e 83       	std	Y+6, r25	; 0x06
    2a5a:	8d 83       	std	Y+5, r24	; 0x05
    2a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a60:	9a 83       	std	Y+2, r25	; 0x02
    2a62:	89 83       	std	Y+1, r24	; 0x01
    2a64:	89 81       	ldd	r24, Y+1	; 0x01
    2a66:	9a 81       	ldd	r25, Y+2	; 0x02
    2a68:	01 97       	sbiw	r24, 0x01	; 1
    2a6a:	f1 f7       	brne	.-4      	; 0x2a68 <check_pass+0x232>
    2a6c:	9a 83       	std	Y+2, r25	; 0x02
    2a6e:	89 83       	std	Y+1, r24	; 0x01
		PassPrev[i] = KEYPAD_getPressedKey();
		LCD_DisplayChar('*');
		_delay_ms(500);
	}
	UART_sendByte(CHECK_PASS);
	for (i = 0; i < SIZE; i++) {
    2a70:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a72:	8f 5f       	subi	r24, 0xFF	; 255
    2a74:	8d 8f       	std	Y+29, r24	; 0x1d
    2a76:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a78:	85 30       	cpi	r24, 0x05	; 5
    2a7a:	08 f4       	brcc	.+2      	; 0x2a7e <check_pass+0x248>
    2a7c:	7e cf       	rjmp	.-260    	; 0x297a <check_pass+0x144>
		UART_sendByte(PassPrev[i]);
		_delay_ms(10);
	}
	key = UART_recieveByte();
    2a7e:	0e 94 9c 0a 	call	0x1538	; 0x1538 <UART_recieveByte>
    2a82:	8e 8f       	std	Y+30, r24	; 0x1e
	return (key);
    2a84:	8e 8d       	ldd	r24, Y+30	; 0x1e
}
    2a86:	6e 96       	adiw	r28, 0x1e	; 30
    2a88:	0f b6       	in	r0, 0x3f	; 63
    2a8a:	f8 94       	cli
    2a8c:	de bf       	out	0x3e, r29	; 62
    2a8e:	0f be       	out	0x3f, r0	; 63
    2a90:	cd bf       	out	0x3d, r28	; 61
    2a92:	cf 91       	pop	r28
    2a94:	df 91       	pop	r29
    2a96:	1f 91       	pop	r17
    2a98:	0f 91       	pop	r16
    2a9a:	08 95       	ret

00002a9c <change_pass>:
void change_pass(void) {
    2a9c:	df 93       	push	r29
    2a9e:	cf 93       	push	r28
    2aa0:	cd b7       	in	r28, 0x3d	; 61
    2aa2:	de b7       	in	r29, 0x3e	; 62
    2aa4:	a1 97       	sbiw	r28, 0x21	; 33
    2aa6:	0f b6       	in	r0, 0x3f	; 63
    2aa8:	f8 94       	cli
    2aaa:	de bf       	out	0x3e, r29	; 62
    2aac:	0f be       	out	0x3f, r0	; 63
    2aae:	cd bf       	out	0x3d, r28	; 61
	uint8 flag=0;
    2ab0:	1f 8e       	std	Y+31, r1	; 0x1f
	uint8 key;
	for (uint8 i=0;i<3;i++){
    2ab2:	1d 8e       	std	Y+29, r1	; 0x1d
    2ab4:	10 c1       	rjmp	.+544    	; 0x2cd6 <change_pass+0x23a>
		key=check_pass();
    2ab6:	0e 94 1b 14 	call	0x2836	; 0x2836 <check_pass>
    2aba:	8e 8f       	std	Y+30, r24	; 0x1e
    2abc:	80 e0       	ldi	r24, 0x00	; 0
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	a8 ec       	ldi	r26, 0xC8	; 200
    2ac2:	b2 e4       	ldi	r27, 0x42	; 66
    2ac4:	89 8f       	std	Y+25, r24	; 0x19
    2ac6:	9a 8f       	std	Y+26, r25	; 0x1a
    2ac8:	ab 8f       	std	Y+27, r26	; 0x1b
    2aca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2acc:	69 8d       	ldd	r22, Y+25	; 0x19
    2ace:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ad0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ad2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ad4:	20 e0       	ldi	r18, 0x00	; 0
    2ad6:	30 e0       	ldi	r19, 0x00	; 0
    2ad8:	4a ef       	ldi	r20, 0xFA	; 250
    2ada:	54 e4       	ldi	r21, 0x44	; 68
    2adc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae0:	dc 01       	movw	r26, r24
    2ae2:	cb 01       	movw	r24, r22
    2ae4:	8d 8b       	std	Y+21, r24	; 0x15
    2ae6:	9e 8b       	std	Y+22, r25	; 0x16
    2ae8:	af 8b       	std	Y+23, r26	; 0x17
    2aea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2aec:	6d 89       	ldd	r22, Y+21	; 0x15
    2aee:	7e 89       	ldd	r23, Y+22	; 0x16
    2af0:	8f 89       	ldd	r24, Y+23	; 0x17
    2af2:	98 8d       	ldd	r25, Y+24	; 0x18
    2af4:	20 e0       	ldi	r18, 0x00	; 0
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	40 e8       	ldi	r20, 0x80	; 128
    2afa:	5f e3       	ldi	r21, 0x3F	; 63
    2afc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b00:	88 23       	and	r24, r24
    2b02:	2c f4       	brge	.+10     	; 0x2b0e <change_pass+0x72>
		__ticks = 1;
    2b04:	81 e0       	ldi	r24, 0x01	; 1
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	9c 8b       	std	Y+20, r25	; 0x14
    2b0a:	8b 8b       	std	Y+19, r24	; 0x13
    2b0c:	3f c0       	rjmp	.+126    	; 0x2b8c <change_pass+0xf0>
	else if (__tmp > 65535)
    2b0e:	6d 89       	ldd	r22, Y+21	; 0x15
    2b10:	7e 89       	ldd	r23, Y+22	; 0x16
    2b12:	8f 89       	ldd	r24, Y+23	; 0x17
    2b14:	98 8d       	ldd	r25, Y+24	; 0x18
    2b16:	20 e0       	ldi	r18, 0x00	; 0
    2b18:	3f ef       	ldi	r19, 0xFF	; 255
    2b1a:	4f e7       	ldi	r20, 0x7F	; 127
    2b1c:	57 e4       	ldi	r21, 0x47	; 71
    2b1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b22:	18 16       	cp	r1, r24
    2b24:	4c f5       	brge	.+82     	; 0x2b78 <change_pass+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b26:	69 8d       	ldd	r22, Y+25	; 0x19
    2b28:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b2e:	20 e0       	ldi	r18, 0x00	; 0
    2b30:	30 e0       	ldi	r19, 0x00	; 0
    2b32:	40 e2       	ldi	r20, 0x20	; 32
    2b34:	51 e4       	ldi	r21, 0x41	; 65
    2b36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b3a:	dc 01       	movw	r26, r24
    2b3c:	cb 01       	movw	r24, r22
    2b3e:	bc 01       	movw	r22, r24
    2b40:	cd 01       	movw	r24, r26
    2b42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b46:	dc 01       	movw	r26, r24
    2b48:	cb 01       	movw	r24, r22
    2b4a:	9c 8b       	std	Y+20, r25	; 0x14
    2b4c:	8b 8b       	std	Y+19, r24	; 0x13
    2b4e:	0f c0       	rjmp	.+30     	; 0x2b6e <change_pass+0xd2>
    2b50:	88 ec       	ldi	r24, 0xC8	; 200
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	9a 8b       	std	Y+18, r25	; 0x12
    2b56:	89 8b       	std	Y+17, r24	; 0x11
    2b58:	89 89       	ldd	r24, Y+17	; 0x11
    2b5a:	9a 89       	ldd	r25, Y+18	; 0x12
    2b5c:	01 97       	sbiw	r24, 0x01	; 1
    2b5e:	f1 f7       	brne	.-4      	; 0x2b5c <change_pass+0xc0>
    2b60:	9a 8b       	std	Y+18, r25	; 0x12
    2b62:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b64:	8b 89       	ldd	r24, Y+19	; 0x13
    2b66:	9c 89       	ldd	r25, Y+20	; 0x14
    2b68:	01 97       	sbiw	r24, 0x01	; 1
    2b6a:	9c 8b       	std	Y+20, r25	; 0x14
    2b6c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b6e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b70:	9c 89       	ldd	r25, Y+20	; 0x14
    2b72:	00 97       	sbiw	r24, 0x00	; 0
    2b74:	69 f7       	brne	.-38     	; 0x2b50 <change_pass+0xb4>
    2b76:	14 c0       	rjmp	.+40     	; 0x2ba0 <change_pass+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b78:	6d 89       	ldd	r22, Y+21	; 0x15
    2b7a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b7c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b7e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b84:	dc 01       	movw	r26, r24
    2b86:	cb 01       	movw	r24, r22
    2b88:	9c 8b       	std	Y+20, r25	; 0x14
    2b8a:	8b 8b       	std	Y+19, r24	; 0x13
    2b8c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b8e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b90:	98 8b       	std	Y+16, r25	; 0x10
    2b92:	8f 87       	std	Y+15, r24	; 0x0f
    2b94:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b96:	98 89       	ldd	r25, Y+16	; 0x10
    2b98:	01 97       	sbiw	r24, 0x01	; 1
    2b9a:	f1 f7       	brne	.-4      	; 0x2b98 <change_pass+0xfc>
    2b9c:	98 8b       	std	Y+16, r25	; 0x10
    2b9e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
		switch (key) {
    2ba0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ba2:	28 2f       	mov	r18, r24
    2ba4:	30 e0       	ldi	r19, 0x00	; 0
    2ba6:	39 a3       	std	Y+33, r19	; 0x21
    2ba8:	28 a3       	std	Y+32, r18	; 0x20
    2baa:	88 a1       	ldd	r24, Y+32	; 0x20
    2bac:	99 a1       	ldd	r25, Y+33	; 0x21
    2bae:	84 30       	cpi	r24, 0x04	; 4
    2bb0:	91 05       	cpc	r25, r1
    2bb2:	31 f0       	breq	.+12     	; 0x2bc0 <change_pass+0x124>
    2bb4:	28 a1       	ldd	r18, Y+32	; 0x20
    2bb6:	39 a1       	ldd	r19, Y+33	; 0x21
    2bb8:	26 30       	cpi	r18, 0x06	; 6
    2bba:	31 05       	cpc	r19, r1
    2bbc:	51 f0       	breq	.+20     	; 0x2bd2 <change_pass+0x136>
    2bbe:	83 c0       	rjmp	.+262    	; 0x2cc6 <change_pass+0x22a>
		case CORRECT:
			Buzzer_Flag=0;
    2bc0:	10 92 df 00 	sts	0x00DF, r1
			flag=1;
    2bc4:	81 e0       	ldi	r24, 0x01	; 1
    2bc6:	8f 8f       	std	Y+31, r24	; 0x1f
			LCD_clearScreen();
    2bc8:	0e 94 35 11 	call	0x226a	; 0x226a <LCD_clearScreen>
			Enter_Pass();
    2bcc:	0e 94 9c 11 	call	0x2338	; 0x2338 <Enter_Pass>
    2bd0:	7a c0       	rjmp	.+244    	; 0x2cc6 <change_pass+0x22a>
			break;
		case WRONG:
			LCD_clearScreen();
    2bd2:	0e 94 35 11 	call	0x226a	; 0x226a <LCD_clearScreen>
			LCD_DisplayString("Try again");
    2bd6:	88 e8       	ldi	r24, 0x88	; 136
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_DisplayString>
    2bde:	80 e0       	ldi	r24, 0x00	; 0
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	aa e7       	ldi	r26, 0x7A	; 122
    2be4:	b4 e4       	ldi	r27, 0x44	; 68
    2be6:	8b 87       	std	Y+11, r24	; 0x0b
    2be8:	9c 87       	std	Y+12, r25	; 0x0c
    2bea:	ad 87       	std	Y+13, r26	; 0x0d
    2bec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bee:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bf0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bf2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bf4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bf6:	20 e0       	ldi	r18, 0x00	; 0
    2bf8:	30 e0       	ldi	r19, 0x00	; 0
    2bfa:	4a ef       	ldi	r20, 0xFA	; 250
    2bfc:	54 e4       	ldi	r21, 0x44	; 68
    2bfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c02:	dc 01       	movw	r26, r24
    2c04:	cb 01       	movw	r24, r22
    2c06:	8f 83       	std	Y+7, r24	; 0x07
    2c08:	98 87       	std	Y+8, r25	; 0x08
    2c0a:	a9 87       	std	Y+9, r26	; 0x09
    2c0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c0e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c10:	78 85       	ldd	r23, Y+8	; 0x08
    2c12:	89 85       	ldd	r24, Y+9	; 0x09
    2c14:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c16:	20 e0       	ldi	r18, 0x00	; 0
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	40 e8       	ldi	r20, 0x80	; 128
    2c1c:	5f e3       	ldi	r21, 0x3F	; 63
    2c1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c22:	88 23       	and	r24, r24
    2c24:	2c f4       	brge	.+10     	; 0x2c30 <change_pass+0x194>
		__ticks = 1;
    2c26:	81 e0       	ldi	r24, 0x01	; 1
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	9e 83       	std	Y+6, r25	; 0x06
    2c2c:	8d 83       	std	Y+5, r24	; 0x05
    2c2e:	3f c0       	rjmp	.+126    	; 0x2cae <change_pass+0x212>
	else if (__tmp > 65535)
    2c30:	6f 81       	ldd	r22, Y+7	; 0x07
    2c32:	78 85       	ldd	r23, Y+8	; 0x08
    2c34:	89 85       	ldd	r24, Y+9	; 0x09
    2c36:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c38:	20 e0       	ldi	r18, 0x00	; 0
    2c3a:	3f ef       	ldi	r19, 0xFF	; 255
    2c3c:	4f e7       	ldi	r20, 0x7F	; 127
    2c3e:	57 e4       	ldi	r21, 0x47	; 71
    2c40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c44:	18 16       	cp	r1, r24
    2c46:	4c f5       	brge	.+82     	; 0x2c9a <change_pass+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c48:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c50:	20 e0       	ldi	r18, 0x00	; 0
    2c52:	30 e0       	ldi	r19, 0x00	; 0
    2c54:	40 e2       	ldi	r20, 0x20	; 32
    2c56:	51 e4       	ldi	r21, 0x41	; 65
    2c58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c5c:	dc 01       	movw	r26, r24
    2c5e:	cb 01       	movw	r24, r22
    2c60:	bc 01       	movw	r22, r24
    2c62:	cd 01       	movw	r24, r26
    2c64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c68:	dc 01       	movw	r26, r24
    2c6a:	cb 01       	movw	r24, r22
    2c6c:	9e 83       	std	Y+6, r25	; 0x06
    2c6e:	8d 83       	std	Y+5, r24	; 0x05
    2c70:	0f c0       	rjmp	.+30     	; 0x2c90 <change_pass+0x1f4>
    2c72:	88 ec       	ldi	r24, 0xC8	; 200
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	9c 83       	std	Y+4, r25	; 0x04
    2c78:	8b 83       	std	Y+3, r24	; 0x03
    2c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c7e:	01 97       	sbiw	r24, 0x01	; 1
    2c80:	f1 f7       	brne	.-4      	; 0x2c7e <change_pass+0x1e2>
    2c82:	9c 83       	std	Y+4, r25	; 0x04
    2c84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c86:	8d 81       	ldd	r24, Y+5	; 0x05
    2c88:	9e 81       	ldd	r25, Y+6	; 0x06
    2c8a:	01 97       	sbiw	r24, 0x01	; 1
    2c8c:	9e 83       	std	Y+6, r25	; 0x06
    2c8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c90:	8d 81       	ldd	r24, Y+5	; 0x05
    2c92:	9e 81       	ldd	r25, Y+6	; 0x06
    2c94:	00 97       	sbiw	r24, 0x00	; 0
    2c96:	69 f7       	brne	.-38     	; 0x2c72 <change_pass+0x1d6>
    2c98:	14 c0       	rjmp	.+40     	; 0x2cc2 <change_pass+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c9a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c9c:	78 85       	ldd	r23, Y+8	; 0x08
    2c9e:	89 85       	ldd	r24, Y+9	; 0x09
    2ca0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ca2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca6:	dc 01       	movw	r26, r24
    2ca8:	cb 01       	movw	r24, r22
    2caa:	9e 83       	std	Y+6, r25	; 0x06
    2cac:	8d 83       	std	Y+5, r24	; 0x05
    2cae:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb0:	9e 81       	ldd	r25, Y+6	; 0x06
    2cb2:	9a 83       	std	Y+2, r25	; 0x02
    2cb4:	89 83       	std	Y+1, r24	; 0x01
    2cb6:	89 81       	ldd	r24, Y+1	; 0x01
    2cb8:	9a 81       	ldd	r25, Y+2	; 0x02
    2cba:	01 97       	sbiw	r24, 0x01	; 1
    2cbc:	f1 f7       	brne	.-4      	; 0x2cba <change_pass+0x21e>
    2cbe:	9a 83       	std	Y+2, r25	; 0x02
    2cc0:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			buzzer_handling();
    2cc2:	0e 94 04 14 	call	0x2808	; 0x2808 <buzzer_handling>
			break;
		}
		if (flag==1){
    2cc6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2cc8:	81 30       	cpi	r24, 0x01	; 1
    2cca:	11 f4       	brne	.+4      	; 0x2cd0 <change_pass+0x234>
			flag=0;
    2ccc:	1f 8e       	std	Y+31, r1	; 0x1f
    2cce:	07 c0       	rjmp	.+14     	; 0x2cde <change_pass+0x242>
	return (key);
}
void change_pass(void) {
	uint8 flag=0;
	uint8 key;
	for (uint8 i=0;i<3;i++){
    2cd0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cd2:	8f 5f       	subi	r24, 0xFF	; 255
    2cd4:	8d 8f       	std	Y+29, r24	; 0x1d
    2cd6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cd8:	83 30       	cpi	r24, 0x03	; 3
    2cda:	08 f4       	brcc	.+2      	; 0x2cde <change_pass+0x242>
    2cdc:	ec ce       	rjmp	.-552    	; 0x2ab6 <change_pass+0x1a>
			flag=0;
			break;
		}

	}
}
    2cde:	a1 96       	adiw	r28, 0x21	; 33
    2ce0:	0f b6       	in	r0, 0x3f	; 63
    2ce2:	f8 94       	cli
    2ce4:	de bf       	out	0x3e, r29	; 62
    2ce6:	0f be       	out	0x3f, r0	; 63
    2ce8:	cd bf       	out	0x3d, r28	; 61
    2cea:	cf 91       	pop	r28
    2cec:	df 91       	pop	r29
    2cee:	08 95       	ret

00002cf0 <handle_door>:

void handle_door(void) {
    2cf0:	0f 93       	push	r16
    2cf2:	1f 93       	push	r17
    2cf4:	df 93       	push	r29
    2cf6:	cf 93       	push	r28
    2cf8:	cd b7       	in	r28, 0x3d	; 61
    2cfa:	de b7       	in	r29, 0x3e	; 62
    2cfc:	c1 55       	subi	r28, 0x51	; 81
    2cfe:	d0 40       	sbci	r29, 0x00	; 0
    2d00:	0f b6       	in	r0, 0x3f	; 63
    2d02:	f8 94       	cli
    2d04:	de bf       	out	0x3e, r29	; 62
    2d06:	0f be       	out	0x3f, r0	; 63
    2d08:	cd bf       	out	0x3d, r28	; 61
	uint8 flag = 0;
    2d0a:	fe 01       	movw	r30, r28
    2d0c:	e1 5b       	subi	r30, 0xB1	; 177
    2d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d10:	10 82       	st	Z, r1
	uint8 checker=0;
    2d12:	fe 01       	movw	r30, r28
    2d14:	e2 5b       	subi	r30, 0xB2	; 178
    2d16:	ff 4f       	sbci	r31, 0xFF	; 255
    2d18:	10 82       	st	Z, r1
	for (uint8 i = 0; i < 3; i++) {
    2d1a:	fe 01       	movw	r30, r28
    2d1c:	e3 5b       	subi	r30, 0xB3	; 179
    2d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d20:	10 82       	st	Z, r1
    2d22:	01 c3       	rjmp	.+1538   	; 0x3326 <handle_door+0x636>

		checker= check_pass();
    2d24:	0e 94 1b 14 	call	0x2836	; 0x2836 <check_pass>
    2d28:	fe 01       	movw	r30, r28
    2d2a:	e2 5b       	subi	r30, 0xB2	; 178
    2d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2e:	80 83       	st	Z, r24

		switch (checker) {
    2d30:	fe 01       	movw	r30, r28
    2d32:	e2 5b       	subi	r30, 0xB2	; 178
    2d34:	ff 4f       	sbci	r31, 0xFF	; 255
    2d36:	80 81       	ld	r24, Z
    2d38:	28 2f       	mov	r18, r24
    2d3a:	30 e0       	ldi	r19, 0x00	; 0
    2d3c:	62 96       	adiw	r28, 0x12	; 18
    2d3e:	3f af       	std	Y+63, r19	; 0x3f
    2d40:	2e af       	std	Y+62, r18	; 0x3e
    2d42:	62 97       	sbiw	r28, 0x12	; 18
    2d44:	62 96       	adiw	r28, 0x12	; 18
    2d46:	8e ad       	ldd	r24, Y+62	; 0x3e
    2d48:	9f ad       	ldd	r25, Y+63	; 0x3f
    2d4a:	62 97       	sbiw	r28, 0x12	; 18
    2d4c:	84 30       	cpi	r24, 0x04	; 4
    2d4e:	91 05       	cpc	r25, r1
    2d50:	49 f0       	breq	.+18     	; 0x2d64 <handle_door+0x74>
    2d52:	62 96       	adiw	r28, 0x12	; 18
    2d54:	ee ad       	ldd	r30, Y+62	; 0x3e
    2d56:	ff ad       	ldd	r31, Y+63	; 0x3f
    2d58:	62 97       	sbiw	r28, 0x12	; 18
    2d5a:	e6 30       	cpi	r30, 0x06	; 6
    2d5c:	f1 05       	cpc	r31, r1
    2d5e:	09 f4       	brne	.+2      	; 0x2d62 <handle_door+0x72>
    2d60:	e2 c1       	rjmp	.+964    	; 0x3126 <handle_door+0x436>
    2d62:	cd c2       	rjmp	.+1434   	; 0x32fe <handle_door+0x60e>
		case CORRECT:
			Buzzer_Flag = 0;
    2d64:	10 92 df 00 	sts	0x00DF, r1
			flag = 1;
    2d68:	fe 01       	movw	r30, r28
    2d6a:	e1 5b       	subi	r30, 0xB1	; 177
    2d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6e:	81 e0       	ldi	r24, 0x01	; 1
    2d70:	80 83       	st	Z, r24
			UART_sendByte(OPENDOOR);
    2d72:	83 e0       	ldi	r24, 0x03	; 3
    2d74:	0e 94 85 0a 	call	0x150a	; 0x150a <UART_sendByte>
			LCD_clearScreen();
    2d78:	0e 94 35 11 	call	0x226a	; 0x226a <LCD_clearScreen>
			LCD_DisplayString("Door is ");
    2d7c:	82 e9       	ldi	r24, 0x92	; 146
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_DisplayString>
			LCD_displayStringRowColumn(1, 0, "Unlocking");
    2d84:	2b e9       	ldi	r18, 0x9B	; 155
    2d86:	30 e0       	ldi	r19, 0x00	; 0
    2d88:	81 e0       	ldi	r24, 0x01	; 1
    2d8a:	60 e0       	ldi	r22, 0x00	; 0
    2d8c:	a9 01       	movw	r20, r18
    2d8e:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <LCD_displayStringRowColumn>
			for (int var = 0; var < 15; var++) {
    2d92:	fe 01       	movw	r30, r28
    2d94:	e5 5b       	subi	r30, 0xB5	; 181
    2d96:	ff 4f       	sbci	r31, 0xFF	; 255
    2d98:	11 82       	std	Z+1, r1	; 0x01
    2d9a:	10 82       	st	Z, r1
    2d9c:	91 c0       	rjmp	.+290    	; 0x2ec0 <handle_door+0x1d0>
    2d9e:	fe 01       	movw	r30, r28
    2da0:	ed 5b       	subi	r30, 0xBD	; 189
    2da2:	ff 4f       	sbci	r31, 0xFF	; 255
    2da4:	80 e0       	ldi	r24, 0x00	; 0
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	aa e7       	ldi	r26, 0x7A	; 122
    2daa:	b4 e4       	ldi	r27, 0x44	; 68
    2dac:	80 83       	st	Z, r24
    2dae:	91 83       	std	Z+1, r25	; 0x01
    2db0:	a2 83       	std	Z+2, r26	; 0x02
    2db2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2db4:	8e 01       	movw	r16, r28
    2db6:	01 5c       	subi	r16, 0xC1	; 193
    2db8:	1f 4f       	sbci	r17, 0xFF	; 255
    2dba:	fe 01       	movw	r30, r28
    2dbc:	ed 5b       	subi	r30, 0xBD	; 189
    2dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc0:	60 81       	ld	r22, Z
    2dc2:	71 81       	ldd	r23, Z+1	; 0x01
    2dc4:	82 81       	ldd	r24, Z+2	; 0x02
    2dc6:	93 81       	ldd	r25, Z+3	; 0x03
    2dc8:	20 e0       	ldi	r18, 0x00	; 0
    2dca:	30 e0       	ldi	r19, 0x00	; 0
    2dcc:	4a ef       	ldi	r20, 0xFA	; 250
    2dce:	54 e4       	ldi	r21, 0x44	; 68
    2dd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dd4:	dc 01       	movw	r26, r24
    2dd6:	cb 01       	movw	r24, r22
    2dd8:	f8 01       	movw	r30, r16
    2dda:	80 83       	st	Z, r24
    2ddc:	91 83       	std	Z+1, r25	; 0x01
    2dde:	a2 83       	std	Z+2, r26	; 0x02
    2de0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2de2:	fe 01       	movw	r30, r28
    2de4:	ff 96       	adiw	r30, 0x3f	; 63
    2de6:	60 81       	ld	r22, Z
    2de8:	71 81       	ldd	r23, Z+1	; 0x01
    2dea:	82 81       	ldd	r24, Z+2	; 0x02
    2dec:	93 81       	ldd	r25, Z+3	; 0x03
    2dee:	20 e0       	ldi	r18, 0x00	; 0
    2df0:	30 e0       	ldi	r19, 0x00	; 0
    2df2:	40 e8       	ldi	r20, 0x80	; 128
    2df4:	5f e3       	ldi	r21, 0x3F	; 63
    2df6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dfa:	88 23       	and	r24, r24
    2dfc:	2c f4       	brge	.+10     	; 0x2e08 <handle_door+0x118>
		__ticks = 1;
    2dfe:	81 e0       	ldi	r24, 0x01	; 1
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	9e af       	std	Y+62, r25	; 0x3e
    2e04:	8d af       	std	Y+61, r24	; 0x3d
    2e06:	46 c0       	rjmp	.+140    	; 0x2e94 <handle_door+0x1a4>
	else if (__tmp > 65535)
    2e08:	fe 01       	movw	r30, r28
    2e0a:	ff 96       	adiw	r30, 0x3f	; 63
    2e0c:	60 81       	ld	r22, Z
    2e0e:	71 81       	ldd	r23, Z+1	; 0x01
    2e10:	82 81       	ldd	r24, Z+2	; 0x02
    2e12:	93 81       	ldd	r25, Z+3	; 0x03
    2e14:	20 e0       	ldi	r18, 0x00	; 0
    2e16:	3f ef       	ldi	r19, 0xFF	; 255
    2e18:	4f e7       	ldi	r20, 0x7F	; 127
    2e1a:	57 e4       	ldi	r21, 0x47	; 71
    2e1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e20:	18 16       	cp	r1, r24
    2e22:	64 f5       	brge	.+88     	; 0x2e7c <handle_door+0x18c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e24:	fe 01       	movw	r30, r28
    2e26:	ed 5b       	subi	r30, 0xBD	; 189
    2e28:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2a:	60 81       	ld	r22, Z
    2e2c:	71 81       	ldd	r23, Z+1	; 0x01
    2e2e:	82 81       	ldd	r24, Z+2	; 0x02
    2e30:	93 81       	ldd	r25, Z+3	; 0x03
    2e32:	20 e0       	ldi	r18, 0x00	; 0
    2e34:	30 e0       	ldi	r19, 0x00	; 0
    2e36:	40 e2       	ldi	r20, 0x20	; 32
    2e38:	51 e4       	ldi	r21, 0x41	; 65
    2e3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e3e:	dc 01       	movw	r26, r24
    2e40:	cb 01       	movw	r24, r22
    2e42:	bc 01       	movw	r22, r24
    2e44:	cd 01       	movw	r24, r26
    2e46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e4a:	dc 01       	movw	r26, r24
    2e4c:	cb 01       	movw	r24, r22
    2e4e:	9e af       	std	Y+62, r25	; 0x3e
    2e50:	8d af       	std	Y+61, r24	; 0x3d
    2e52:	0f c0       	rjmp	.+30     	; 0x2e72 <handle_door+0x182>
    2e54:	88 ec       	ldi	r24, 0xC8	; 200
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	9c af       	std	Y+60, r25	; 0x3c
    2e5a:	8b af       	std	Y+59, r24	; 0x3b
    2e5c:	8b ad       	ldd	r24, Y+59	; 0x3b
    2e5e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2e60:	01 97       	sbiw	r24, 0x01	; 1
    2e62:	f1 f7       	brne	.-4      	; 0x2e60 <handle_door+0x170>
    2e64:	9c af       	std	Y+60, r25	; 0x3c
    2e66:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e68:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e6a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e6c:	01 97       	sbiw	r24, 0x01	; 1
    2e6e:	9e af       	std	Y+62, r25	; 0x3e
    2e70:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e72:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e74:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e76:	00 97       	sbiw	r24, 0x00	; 0
    2e78:	69 f7       	brne	.-38     	; 0x2e54 <handle_door+0x164>
    2e7a:	16 c0       	rjmp	.+44     	; 0x2ea8 <handle_door+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e7c:	fe 01       	movw	r30, r28
    2e7e:	ff 96       	adiw	r30, 0x3f	; 63
    2e80:	60 81       	ld	r22, Z
    2e82:	71 81       	ldd	r23, Z+1	; 0x01
    2e84:	82 81       	ldd	r24, Z+2	; 0x02
    2e86:	93 81       	ldd	r25, Z+3	; 0x03
    2e88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e8c:	dc 01       	movw	r26, r24
    2e8e:	cb 01       	movw	r24, r22
    2e90:	9e af       	std	Y+62, r25	; 0x3e
    2e92:	8d af       	std	Y+61, r24	; 0x3d
    2e94:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e96:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e98:	9a af       	std	Y+58, r25	; 0x3a
    2e9a:	89 af       	std	Y+57, r24	; 0x39
    2e9c:	89 ad       	ldd	r24, Y+57	; 0x39
    2e9e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2ea0:	01 97       	sbiw	r24, 0x01	; 1
    2ea2:	f1 f7       	brne	.-4      	; 0x2ea0 <handle_door+0x1b0>
    2ea4:	9a af       	std	Y+58, r25	; 0x3a
    2ea6:	89 af       	std	Y+57, r24	; 0x39
    2ea8:	de 01       	movw	r26, r28
    2eaa:	a5 5b       	subi	r26, 0xB5	; 181
    2eac:	bf 4f       	sbci	r27, 0xFF	; 255
    2eae:	fe 01       	movw	r30, r28
    2eb0:	e5 5b       	subi	r30, 0xB5	; 181
    2eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb4:	80 81       	ld	r24, Z
    2eb6:	91 81       	ldd	r25, Z+1	; 0x01
    2eb8:	01 96       	adiw	r24, 0x01	; 1
    2eba:	11 96       	adiw	r26, 0x01	; 1
    2ebc:	9c 93       	st	X, r25
    2ebe:	8e 93       	st	-X, r24
    2ec0:	fe 01       	movw	r30, r28
    2ec2:	e5 5b       	subi	r30, 0xB5	; 181
    2ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec6:	80 81       	ld	r24, Z
    2ec8:	91 81       	ldd	r25, Z+1	; 0x01
    2eca:	8f 30       	cpi	r24, 0x0F	; 15
    2ecc:	91 05       	cpc	r25, r1
    2ece:	0c f4       	brge	.+2      	; 0x2ed2 <handle_door+0x1e2>
    2ed0:	66 cf       	rjmp	.-308    	; 0x2d9e <handle_door+0xae>
				_delay_ms(1000);
			}
			LCD_clearScreen();
    2ed2:	0e 94 35 11 	call	0x226a	; 0x226a <LCD_clearScreen>
			for (int var = 0; var < 3; var++) {
    2ed6:	fe 01       	movw	r30, r28
    2ed8:	e7 5b       	subi	r30, 0xB7	; 183
    2eda:	ff 4f       	sbci	r31, 0xFF	; 255
    2edc:	11 82       	std	Z+1, r1	; 0x01
    2ede:	10 82       	st	Z, r1
    2ee0:	7e c0       	rjmp	.+252    	; 0x2fde <handle_door+0x2ee>
    2ee2:	80 e0       	ldi	r24, 0x00	; 0
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	aa e7       	ldi	r26, 0x7A	; 122
    2ee8:	b4 e4       	ldi	r27, 0x44	; 68
    2eea:	8d ab       	std	Y+53, r24	; 0x35
    2eec:	9e ab       	std	Y+54, r25	; 0x36
    2eee:	af ab       	std	Y+55, r26	; 0x37
    2ef0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ef2:	6d a9       	ldd	r22, Y+53	; 0x35
    2ef4:	7e a9       	ldd	r23, Y+54	; 0x36
    2ef6:	8f a9       	ldd	r24, Y+55	; 0x37
    2ef8:	98 ad       	ldd	r25, Y+56	; 0x38
    2efa:	20 e0       	ldi	r18, 0x00	; 0
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	4a ef       	ldi	r20, 0xFA	; 250
    2f00:	54 e4       	ldi	r21, 0x44	; 68
    2f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f06:	dc 01       	movw	r26, r24
    2f08:	cb 01       	movw	r24, r22
    2f0a:	89 ab       	std	Y+49, r24	; 0x31
    2f0c:	9a ab       	std	Y+50, r25	; 0x32
    2f0e:	ab ab       	std	Y+51, r26	; 0x33
    2f10:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f12:	69 a9       	ldd	r22, Y+49	; 0x31
    2f14:	7a a9       	ldd	r23, Y+50	; 0x32
    2f16:	8b a9       	ldd	r24, Y+51	; 0x33
    2f18:	9c a9       	ldd	r25, Y+52	; 0x34
    2f1a:	20 e0       	ldi	r18, 0x00	; 0
    2f1c:	30 e0       	ldi	r19, 0x00	; 0
    2f1e:	40 e8       	ldi	r20, 0x80	; 128
    2f20:	5f e3       	ldi	r21, 0x3F	; 63
    2f22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f26:	88 23       	and	r24, r24
    2f28:	2c f4       	brge	.+10     	; 0x2f34 <handle_door+0x244>
		__ticks = 1;
    2f2a:	81 e0       	ldi	r24, 0x01	; 1
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	98 ab       	std	Y+48, r25	; 0x30
    2f30:	8f a7       	std	Y+47, r24	; 0x2f
    2f32:	3f c0       	rjmp	.+126    	; 0x2fb2 <handle_door+0x2c2>
	else if (__tmp > 65535)
    2f34:	69 a9       	ldd	r22, Y+49	; 0x31
    2f36:	7a a9       	ldd	r23, Y+50	; 0x32
    2f38:	8b a9       	ldd	r24, Y+51	; 0x33
    2f3a:	9c a9       	ldd	r25, Y+52	; 0x34
    2f3c:	20 e0       	ldi	r18, 0x00	; 0
    2f3e:	3f ef       	ldi	r19, 0xFF	; 255
    2f40:	4f e7       	ldi	r20, 0x7F	; 127
    2f42:	57 e4       	ldi	r21, 0x47	; 71
    2f44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f48:	18 16       	cp	r1, r24
    2f4a:	4c f5       	brge	.+82     	; 0x2f9e <handle_door+0x2ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f4c:	6d a9       	ldd	r22, Y+53	; 0x35
    2f4e:	7e a9       	ldd	r23, Y+54	; 0x36
    2f50:	8f a9       	ldd	r24, Y+55	; 0x37
    2f52:	98 ad       	ldd	r25, Y+56	; 0x38
    2f54:	20 e0       	ldi	r18, 0x00	; 0
    2f56:	30 e0       	ldi	r19, 0x00	; 0
    2f58:	40 e2       	ldi	r20, 0x20	; 32
    2f5a:	51 e4       	ldi	r21, 0x41	; 65
    2f5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f60:	dc 01       	movw	r26, r24
    2f62:	cb 01       	movw	r24, r22
    2f64:	bc 01       	movw	r22, r24
    2f66:	cd 01       	movw	r24, r26
    2f68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f6c:	dc 01       	movw	r26, r24
    2f6e:	cb 01       	movw	r24, r22
    2f70:	98 ab       	std	Y+48, r25	; 0x30
    2f72:	8f a7       	std	Y+47, r24	; 0x2f
    2f74:	0f c0       	rjmp	.+30     	; 0x2f94 <handle_door+0x2a4>
    2f76:	88 ec       	ldi	r24, 0xC8	; 200
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	9e a7       	std	Y+46, r25	; 0x2e
    2f7c:	8d a7       	std	Y+45, r24	; 0x2d
    2f7e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2f80:	9e a5       	ldd	r25, Y+46	; 0x2e
    2f82:	01 97       	sbiw	r24, 0x01	; 1
    2f84:	f1 f7       	brne	.-4      	; 0x2f82 <handle_door+0x292>
    2f86:	9e a7       	std	Y+46, r25	; 0x2e
    2f88:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f8c:	98 a9       	ldd	r25, Y+48	; 0x30
    2f8e:	01 97       	sbiw	r24, 0x01	; 1
    2f90:	98 ab       	std	Y+48, r25	; 0x30
    2f92:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f94:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f96:	98 a9       	ldd	r25, Y+48	; 0x30
    2f98:	00 97       	sbiw	r24, 0x00	; 0
    2f9a:	69 f7       	brne	.-38     	; 0x2f76 <handle_door+0x286>
    2f9c:	14 c0       	rjmp	.+40     	; 0x2fc6 <handle_door+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f9e:	69 a9       	ldd	r22, Y+49	; 0x31
    2fa0:	7a a9       	ldd	r23, Y+50	; 0x32
    2fa2:	8b a9       	ldd	r24, Y+51	; 0x33
    2fa4:	9c a9       	ldd	r25, Y+52	; 0x34
    2fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2faa:	dc 01       	movw	r26, r24
    2fac:	cb 01       	movw	r24, r22
    2fae:	98 ab       	std	Y+48, r25	; 0x30
    2fb0:	8f a7       	std	Y+47, r24	; 0x2f
    2fb2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fb4:	98 a9       	ldd	r25, Y+48	; 0x30
    2fb6:	9c a7       	std	Y+44, r25	; 0x2c
    2fb8:	8b a7       	std	Y+43, r24	; 0x2b
    2fba:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fbc:	9c a5       	ldd	r25, Y+44	; 0x2c
    2fbe:	01 97       	sbiw	r24, 0x01	; 1
    2fc0:	f1 f7       	brne	.-4      	; 0x2fbe <handle_door+0x2ce>
    2fc2:	9c a7       	std	Y+44, r25	; 0x2c
    2fc4:	8b a7       	std	Y+43, r24	; 0x2b
    2fc6:	de 01       	movw	r26, r28
    2fc8:	a7 5b       	subi	r26, 0xB7	; 183
    2fca:	bf 4f       	sbci	r27, 0xFF	; 255
    2fcc:	fe 01       	movw	r30, r28
    2fce:	e7 5b       	subi	r30, 0xB7	; 183
    2fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd2:	80 81       	ld	r24, Z
    2fd4:	91 81       	ldd	r25, Z+1	; 0x01
    2fd6:	01 96       	adiw	r24, 0x01	; 1
    2fd8:	11 96       	adiw	r26, 0x01	; 1
    2fda:	9c 93       	st	X, r25
    2fdc:	8e 93       	st	-X, r24
    2fde:	fe 01       	movw	r30, r28
    2fe0:	e7 5b       	subi	r30, 0xB7	; 183
    2fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe4:	80 81       	ld	r24, Z
    2fe6:	91 81       	ldd	r25, Z+1	; 0x01
    2fe8:	83 30       	cpi	r24, 0x03	; 3
    2fea:	91 05       	cpc	r25, r1
    2fec:	0c f4       	brge	.+2      	; 0x2ff0 <handle_door+0x300>
    2fee:	79 cf       	rjmp	.-270    	; 0x2ee2 <handle_door+0x1f2>
				_delay_ms(1000);
			}
			LCD_DisplayString("Door is ");
    2ff0:	82 e9       	ldi	r24, 0x92	; 146
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_DisplayString>
			LCD_displayStringRowColumn(1, 0, "locking");
    2ff8:	25 ea       	ldi	r18, 0xA5	; 165
    2ffa:	30 e0       	ldi	r19, 0x00	; 0
    2ffc:	81 e0       	ldi	r24, 0x01	; 1
    2ffe:	60 e0       	ldi	r22, 0x00	; 0
    3000:	a9 01       	movw	r20, r18
    3002:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <LCD_displayStringRowColumn>
			for (int var = 0; var < 15; var++) {
    3006:	fe 01       	movw	r30, r28
    3008:	e9 5b       	subi	r30, 0xB9	; 185
    300a:	ff 4f       	sbci	r31, 0xFF	; 255
    300c:	11 82       	std	Z+1, r1	; 0x01
    300e:	10 82       	st	Z, r1
    3010:	7e c0       	rjmp	.+252    	; 0x310e <handle_door+0x41e>
    3012:	80 e0       	ldi	r24, 0x00	; 0
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	aa e7       	ldi	r26, 0x7A	; 122
    3018:	b4 e4       	ldi	r27, 0x44	; 68
    301a:	8f a3       	std	Y+39, r24	; 0x27
    301c:	98 a7       	std	Y+40, r25	; 0x28
    301e:	a9 a7       	std	Y+41, r26	; 0x29
    3020:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3022:	6f a1       	ldd	r22, Y+39	; 0x27
    3024:	78 a5       	ldd	r23, Y+40	; 0x28
    3026:	89 a5       	ldd	r24, Y+41	; 0x29
    3028:	9a a5       	ldd	r25, Y+42	; 0x2a
    302a:	20 e0       	ldi	r18, 0x00	; 0
    302c:	30 e0       	ldi	r19, 0x00	; 0
    302e:	4a ef       	ldi	r20, 0xFA	; 250
    3030:	54 e4       	ldi	r21, 0x44	; 68
    3032:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3036:	dc 01       	movw	r26, r24
    3038:	cb 01       	movw	r24, r22
    303a:	8b a3       	std	Y+35, r24	; 0x23
    303c:	9c a3       	std	Y+36, r25	; 0x24
    303e:	ad a3       	std	Y+37, r26	; 0x25
    3040:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3042:	6b a1       	ldd	r22, Y+35	; 0x23
    3044:	7c a1       	ldd	r23, Y+36	; 0x24
    3046:	8d a1       	ldd	r24, Y+37	; 0x25
    3048:	9e a1       	ldd	r25, Y+38	; 0x26
    304a:	20 e0       	ldi	r18, 0x00	; 0
    304c:	30 e0       	ldi	r19, 0x00	; 0
    304e:	40 e8       	ldi	r20, 0x80	; 128
    3050:	5f e3       	ldi	r21, 0x3F	; 63
    3052:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3056:	88 23       	and	r24, r24
    3058:	2c f4       	brge	.+10     	; 0x3064 <handle_door+0x374>
		__ticks = 1;
    305a:	81 e0       	ldi	r24, 0x01	; 1
    305c:	90 e0       	ldi	r25, 0x00	; 0
    305e:	9a a3       	std	Y+34, r25	; 0x22
    3060:	89 a3       	std	Y+33, r24	; 0x21
    3062:	3f c0       	rjmp	.+126    	; 0x30e2 <handle_door+0x3f2>
	else if (__tmp > 65535)
    3064:	6b a1       	ldd	r22, Y+35	; 0x23
    3066:	7c a1       	ldd	r23, Y+36	; 0x24
    3068:	8d a1       	ldd	r24, Y+37	; 0x25
    306a:	9e a1       	ldd	r25, Y+38	; 0x26
    306c:	20 e0       	ldi	r18, 0x00	; 0
    306e:	3f ef       	ldi	r19, 0xFF	; 255
    3070:	4f e7       	ldi	r20, 0x7F	; 127
    3072:	57 e4       	ldi	r21, 0x47	; 71
    3074:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3078:	18 16       	cp	r1, r24
    307a:	4c f5       	brge	.+82     	; 0x30ce <handle_door+0x3de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    307c:	6f a1       	ldd	r22, Y+39	; 0x27
    307e:	78 a5       	ldd	r23, Y+40	; 0x28
    3080:	89 a5       	ldd	r24, Y+41	; 0x29
    3082:	9a a5       	ldd	r25, Y+42	; 0x2a
    3084:	20 e0       	ldi	r18, 0x00	; 0
    3086:	30 e0       	ldi	r19, 0x00	; 0
    3088:	40 e2       	ldi	r20, 0x20	; 32
    308a:	51 e4       	ldi	r21, 0x41	; 65
    308c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3090:	dc 01       	movw	r26, r24
    3092:	cb 01       	movw	r24, r22
    3094:	bc 01       	movw	r22, r24
    3096:	cd 01       	movw	r24, r26
    3098:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    309c:	dc 01       	movw	r26, r24
    309e:	cb 01       	movw	r24, r22
    30a0:	9a a3       	std	Y+34, r25	; 0x22
    30a2:	89 a3       	std	Y+33, r24	; 0x21
    30a4:	0f c0       	rjmp	.+30     	; 0x30c4 <handle_door+0x3d4>
    30a6:	88 ec       	ldi	r24, 0xC8	; 200
    30a8:	90 e0       	ldi	r25, 0x00	; 0
    30aa:	98 a3       	std	Y+32, r25	; 0x20
    30ac:	8f 8f       	std	Y+31, r24	; 0x1f
    30ae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    30b0:	98 a1       	ldd	r25, Y+32	; 0x20
    30b2:	01 97       	sbiw	r24, 0x01	; 1
    30b4:	f1 f7       	brne	.-4      	; 0x30b2 <handle_door+0x3c2>
    30b6:	98 a3       	std	Y+32, r25	; 0x20
    30b8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ba:	89 a1       	ldd	r24, Y+33	; 0x21
    30bc:	9a a1       	ldd	r25, Y+34	; 0x22
    30be:	01 97       	sbiw	r24, 0x01	; 1
    30c0:	9a a3       	std	Y+34, r25	; 0x22
    30c2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30c4:	89 a1       	ldd	r24, Y+33	; 0x21
    30c6:	9a a1       	ldd	r25, Y+34	; 0x22
    30c8:	00 97       	sbiw	r24, 0x00	; 0
    30ca:	69 f7       	brne	.-38     	; 0x30a6 <handle_door+0x3b6>
    30cc:	14 c0       	rjmp	.+40     	; 0x30f6 <handle_door+0x406>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30ce:	6b a1       	ldd	r22, Y+35	; 0x23
    30d0:	7c a1       	ldd	r23, Y+36	; 0x24
    30d2:	8d a1       	ldd	r24, Y+37	; 0x25
    30d4:	9e a1       	ldd	r25, Y+38	; 0x26
    30d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30da:	dc 01       	movw	r26, r24
    30dc:	cb 01       	movw	r24, r22
    30de:	9a a3       	std	Y+34, r25	; 0x22
    30e0:	89 a3       	std	Y+33, r24	; 0x21
    30e2:	89 a1       	ldd	r24, Y+33	; 0x21
    30e4:	9a a1       	ldd	r25, Y+34	; 0x22
    30e6:	9e 8f       	std	Y+30, r25	; 0x1e
    30e8:	8d 8f       	std	Y+29, r24	; 0x1d
    30ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30ec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30ee:	01 97       	sbiw	r24, 0x01	; 1
    30f0:	f1 f7       	brne	.-4      	; 0x30ee <handle_door+0x3fe>
    30f2:	9e 8f       	std	Y+30, r25	; 0x1e
    30f4:	8d 8f       	std	Y+29, r24	; 0x1d
    30f6:	de 01       	movw	r26, r28
    30f8:	a9 5b       	subi	r26, 0xB9	; 185
    30fa:	bf 4f       	sbci	r27, 0xFF	; 255
    30fc:	fe 01       	movw	r30, r28
    30fe:	e9 5b       	subi	r30, 0xB9	; 185
    3100:	ff 4f       	sbci	r31, 0xFF	; 255
    3102:	80 81       	ld	r24, Z
    3104:	91 81       	ldd	r25, Z+1	; 0x01
    3106:	01 96       	adiw	r24, 0x01	; 1
    3108:	11 96       	adiw	r26, 0x01	; 1
    310a:	9c 93       	st	X, r25
    310c:	8e 93       	st	-X, r24
    310e:	fe 01       	movw	r30, r28
    3110:	e9 5b       	subi	r30, 0xB9	; 185
    3112:	ff 4f       	sbci	r31, 0xFF	; 255
    3114:	80 81       	ld	r24, Z
    3116:	91 81       	ldd	r25, Z+1	; 0x01
    3118:	8f 30       	cpi	r24, 0x0F	; 15
    311a:	91 05       	cpc	r25, r1
    311c:	0c f4       	brge	.+2      	; 0x3120 <handle_door+0x430>
    311e:	79 cf       	rjmp	.-270    	; 0x3012 <handle_door+0x322>
				_delay_ms(1000);
			}
			LCD_clearScreen();
    3120:	0e 94 35 11 	call	0x226a	; 0x226a <LCD_clearScreen>
    3124:	ec c0       	rjmp	.+472    	; 0x32fe <handle_door+0x60e>
			break;
		case WRONG:
			LCD_clearScreen();
    3126:	0e 94 35 11 	call	0x226a	; 0x226a <LCD_clearScreen>
			LCD_DisplayString("Try again");
    312a:	88 e8       	ldi	r24, 0x88	; 136
    312c:	90 e0       	ldi	r25, 0x00	; 0
    312e:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_DisplayString>
    3132:	80 e0       	ldi	r24, 0x00	; 0
    3134:	90 e0       	ldi	r25, 0x00	; 0
    3136:	aa e7       	ldi	r26, 0x7A	; 122
    3138:	b4 e4       	ldi	r27, 0x44	; 68
    313a:	89 8f       	std	Y+25, r24	; 0x19
    313c:	9a 8f       	std	Y+26, r25	; 0x1a
    313e:	ab 8f       	std	Y+27, r26	; 0x1b
    3140:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3142:	69 8d       	ldd	r22, Y+25	; 0x19
    3144:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3146:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3148:	9c 8d       	ldd	r25, Y+28	; 0x1c
    314a:	20 e0       	ldi	r18, 0x00	; 0
    314c:	30 e0       	ldi	r19, 0x00	; 0
    314e:	4a ef       	ldi	r20, 0xFA	; 250
    3150:	54 e4       	ldi	r21, 0x44	; 68
    3152:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3156:	dc 01       	movw	r26, r24
    3158:	cb 01       	movw	r24, r22
    315a:	8d 8b       	std	Y+21, r24	; 0x15
    315c:	9e 8b       	std	Y+22, r25	; 0x16
    315e:	af 8b       	std	Y+23, r26	; 0x17
    3160:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3162:	6d 89       	ldd	r22, Y+21	; 0x15
    3164:	7e 89       	ldd	r23, Y+22	; 0x16
    3166:	8f 89       	ldd	r24, Y+23	; 0x17
    3168:	98 8d       	ldd	r25, Y+24	; 0x18
    316a:	20 e0       	ldi	r18, 0x00	; 0
    316c:	30 e0       	ldi	r19, 0x00	; 0
    316e:	40 e8       	ldi	r20, 0x80	; 128
    3170:	5f e3       	ldi	r21, 0x3F	; 63
    3172:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3176:	88 23       	and	r24, r24
    3178:	2c f4       	brge	.+10     	; 0x3184 <handle_door+0x494>
		__ticks = 1;
    317a:	81 e0       	ldi	r24, 0x01	; 1
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	9c 8b       	std	Y+20, r25	; 0x14
    3180:	8b 8b       	std	Y+19, r24	; 0x13
    3182:	3f c0       	rjmp	.+126    	; 0x3202 <handle_door+0x512>
	else if (__tmp > 65535)
    3184:	6d 89       	ldd	r22, Y+21	; 0x15
    3186:	7e 89       	ldd	r23, Y+22	; 0x16
    3188:	8f 89       	ldd	r24, Y+23	; 0x17
    318a:	98 8d       	ldd	r25, Y+24	; 0x18
    318c:	20 e0       	ldi	r18, 0x00	; 0
    318e:	3f ef       	ldi	r19, 0xFF	; 255
    3190:	4f e7       	ldi	r20, 0x7F	; 127
    3192:	57 e4       	ldi	r21, 0x47	; 71
    3194:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3198:	18 16       	cp	r1, r24
    319a:	4c f5       	brge	.+82     	; 0x31ee <handle_door+0x4fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    319c:	69 8d       	ldd	r22, Y+25	; 0x19
    319e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31a4:	20 e0       	ldi	r18, 0x00	; 0
    31a6:	30 e0       	ldi	r19, 0x00	; 0
    31a8:	40 e2       	ldi	r20, 0x20	; 32
    31aa:	51 e4       	ldi	r21, 0x41	; 65
    31ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31b0:	dc 01       	movw	r26, r24
    31b2:	cb 01       	movw	r24, r22
    31b4:	bc 01       	movw	r22, r24
    31b6:	cd 01       	movw	r24, r26
    31b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31bc:	dc 01       	movw	r26, r24
    31be:	cb 01       	movw	r24, r22
    31c0:	9c 8b       	std	Y+20, r25	; 0x14
    31c2:	8b 8b       	std	Y+19, r24	; 0x13
    31c4:	0f c0       	rjmp	.+30     	; 0x31e4 <handle_door+0x4f4>
    31c6:	88 ec       	ldi	r24, 0xC8	; 200
    31c8:	90 e0       	ldi	r25, 0x00	; 0
    31ca:	9a 8b       	std	Y+18, r25	; 0x12
    31cc:	89 8b       	std	Y+17, r24	; 0x11
    31ce:	89 89       	ldd	r24, Y+17	; 0x11
    31d0:	9a 89       	ldd	r25, Y+18	; 0x12
    31d2:	01 97       	sbiw	r24, 0x01	; 1
    31d4:	f1 f7       	brne	.-4      	; 0x31d2 <handle_door+0x4e2>
    31d6:	9a 8b       	std	Y+18, r25	; 0x12
    31d8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31da:	8b 89       	ldd	r24, Y+19	; 0x13
    31dc:	9c 89       	ldd	r25, Y+20	; 0x14
    31de:	01 97       	sbiw	r24, 0x01	; 1
    31e0:	9c 8b       	std	Y+20, r25	; 0x14
    31e2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31e4:	8b 89       	ldd	r24, Y+19	; 0x13
    31e6:	9c 89       	ldd	r25, Y+20	; 0x14
    31e8:	00 97       	sbiw	r24, 0x00	; 0
    31ea:	69 f7       	brne	.-38     	; 0x31c6 <handle_door+0x4d6>
    31ec:	14 c0       	rjmp	.+40     	; 0x3216 <handle_door+0x526>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31ee:	6d 89       	ldd	r22, Y+21	; 0x15
    31f0:	7e 89       	ldd	r23, Y+22	; 0x16
    31f2:	8f 89       	ldd	r24, Y+23	; 0x17
    31f4:	98 8d       	ldd	r25, Y+24	; 0x18
    31f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31fa:	dc 01       	movw	r26, r24
    31fc:	cb 01       	movw	r24, r22
    31fe:	9c 8b       	std	Y+20, r25	; 0x14
    3200:	8b 8b       	std	Y+19, r24	; 0x13
    3202:	8b 89       	ldd	r24, Y+19	; 0x13
    3204:	9c 89       	ldd	r25, Y+20	; 0x14
    3206:	98 8b       	std	Y+16, r25	; 0x10
    3208:	8f 87       	std	Y+15, r24	; 0x0f
    320a:	8f 85       	ldd	r24, Y+15	; 0x0f
    320c:	98 89       	ldd	r25, Y+16	; 0x10
    320e:	01 97       	sbiw	r24, 0x01	; 1
    3210:	f1 f7       	brne	.-4      	; 0x320e <handle_door+0x51e>
    3212:	98 8b       	std	Y+16, r25	; 0x10
    3214:	8f 87       	std	Y+15, r24	; 0x0f
    3216:	80 e0       	ldi	r24, 0x00	; 0
    3218:	90 e0       	ldi	r25, 0x00	; 0
    321a:	aa ef       	ldi	r26, 0xFA	; 250
    321c:	b3 e4       	ldi	r27, 0x43	; 67
    321e:	8b 87       	std	Y+11, r24	; 0x0b
    3220:	9c 87       	std	Y+12, r25	; 0x0c
    3222:	ad 87       	std	Y+13, r26	; 0x0d
    3224:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3226:	6b 85       	ldd	r22, Y+11	; 0x0b
    3228:	7c 85       	ldd	r23, Y+12	; 0x0c
    322a:	8d 85       	ldd	r24, Y+13	; 0x0d
    322c:	9e 85       	ldd	r25, Y+14	; 0x0e
    322e:	20 e0       	ldi	r18, 0x00	; 0
    3230:	30 e0       	ldi	r19, 0x00	; 0
    3232:	4a ef       	ldi	r20, 0xFA	; 250
    3234:	54 e4       	ldi	r21, 0x44	; 68
    3236:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    323a:	dc 01       	movw	r26, r24
    323c:	cb 01       	movw	r24, r22
    323e:	8f 83       	std	Y+7, r24	; 0x07
    3240:	98 87       	std	Y+8, r25	; 0x08
    3242:	a9 87       	std	Y+9, r26	; 0x09
    3244:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3246:	6f 81       	ldd	r22, Y+7	; 0x07
    3248:	78 85       	ldd	r23, Y+8	; 0x08
    324a:	89 85       	ldd	r24, Y+9	; 0x09
    324c:	9a 85       	ldd	r25, Y+10	; 0x0a
    324e:	20 e0       	ldi	r18, 0x00	; 0
    3250:	30 e0       	ldi	r19, 0x00	; 0
    3252:	40 e8       	ldi	r20, 0x80	; 128
    3254:	5f e3       	ldi	r21, 0x3F	; 63
    3256:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    325a:	88 23       	and	r24, r24
    325c:	2c f4       	brge	.+10     	; 0x3268 <handle_door+0x578>
		__ticks = 1;
    325e:	81 e0       	ldi	r24, 0x01	; 1
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	9e 83       	std	Y+6, r25	; 0x06
    3264:	8d 83       	std	Y+5, r24	; 0x05
    3266:	3f c0       	rjmp	.+126    	; 0x32e6 <handle_door+0x5f6>
	else if (__tmp > 65535)
    3268:	6f 81       	ldd	r22, Y+7	; 0x07
    326a:	78 85       	ldd	r23, Y+8	; 0x08
    326c:	89 85       	ldd	r24, Y+9	; 0x09
    326e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3270:	20 e0       	ldi	r18, 0x00	; 0
    3272:	3f ef       	ldi	r19, 0xFF	; 255
    3274:	4f e7       	ldi	r20, 0x7F	; 127
    3276:	57 e4       	ldi	r21, 0x47	; 71
    3278:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    327c:	18 16       	cp	r1, r24
    327e:	4c f5       	brge	.+82     	; 0x32d2 <handle_door+0x5e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3280:	6b 85       	ldd	r22, Y+11	; 0x0b
    3282:	7c 85       	ldd	r23, Y+12	; 0x0c
    3284:	8d 85       	ldd	r24, Y+13	; 0x0d
    3286:	9e 85       	ldd	r25, Y+14	; 0x0e
    3288:	20 e0       	ldi	r18, 0x00	; 0
    328a:	30 e0       	ldi	r19, 0x00	; 0
    328c:	40 e2       	ldi	r20, 0x20	; 32
    328e:	51 e4       	ldi	r21, 0x41	; 65
    3290:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3294:	dc 01       	movw	r26, r24
    3296:	cb 01       	movw	r24, r22
    3298:	bc 01       	movw	r22, r24
    329a:	cd 01       	movw	r24, r26
    329c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32a0:	dc 01       	movw	r26, r24
    32a2:	cb 01       	movw	r24, r22
    32a4:	9e 83       	std	Y+6, r25	; 0x06
    32a6:	8d 83       	std	Y+5, r24	; 0x05
    32a8:	0f c0       	rjmp	.+30     	; 0x32c8 <handle_door+0x5d8>
    32aa:	88 ec       	ldi	r24, 0xC8	; 200
    32ac:	90 e0       	ldi	r25, 0x00	; 0
    32ae:	9c 83       	std	Y+4, r25	; 0x04
    32b0:	8b 83       	std	Y+3, r24	; 0x03
    32b2:	8b 81       	ldd	r24, Y+3	; 0x03
    32b4:	9c 81       	ldd	r25, Y+4	; 0x04
    32b6:	01 97       	sbiw	r24, 0x01	; 1
    32b8:	f1 f7       	brne	.-4      	; 0x32b6 <handle_door+0x5c6>
    32ba:	9c 83       	std	Y+4, r25	; 0x04
    32bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32be:	8d 81       	ldd	r24, Y+5	; 0x05
    32c0:	9e 81       	ldd	r25, Y+6	; 0x06
    32c2:	01 97       	sbiw	r24, 0x01	; 1
    32c4:	9e 83       	std	Y+6, r25	; 0x06
    32c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32c8:	8d 81       	ldd	r24, Y+5	; 0x05
    32ca:	9e 81       	ldd	r25, Y+6	; 0x06
    32cc:	00 97       	sbiw	r24, 0x00	; 0
    32ce:	69 f7       	brne	.-38     	; 0x32aa <handle_door+0x5ba>
    32d0:	14 c0       	rjmp	.+40     	; 0x32fa <handle_door+0x60a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32d2:	6f 81       	ldd	r22, Y+7	; 0x07
    32d4:	78 85       	ldd	r23, Y+8	; 0x08
    32d6:	89 85       	ldd	r24, Y+9	; 0x09
    32d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    32da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32de:	dc 01       	movw	r26, r24
    32e0:	cb 01       	movw	r24, r22
    32e2:	9e 83       	std	Y+6, r25	; 0x06
    32e4:	8d 83       	std	Y+5, r24	; 0x05
    32e6:	8d 81       	ldd	r24, Y+5	; 0x05
    32e8:	9e 81       	ldd	r25, Y+6	; 0x06
    32ea:	9a 83       	std	Y+2, r25	; 0x02
    32ec:	89 83       	std	Y+1, r24	; 0x01
    32ee:	89 81       	ldd	r24, Y+1	; 0x01
    32f0:	9a 81       	ldd	r25, Y+2	; 0x02
    32f2:	01 97       	sbiw	r24, 0x01	; 1
    32f4:	f1 f7       	brne	.-4      	; 0x32f2 <handle_door+0x602>
    32f6:	9a 83       	std	Y+2, r25	; 0x02
    32f8:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			_delay_ms(500);
			buzzer_handling();
    32fa:	0e 94 04 14 	call	0x2808	; 0x2808 <buzzer_handling>

			break;
		}

		if (flag == 1) {
    32fe:	fe 01       	movw	r30, r28
    3300:	e1 5b       	subi	r30, 0xB1	; 177
    3302:	ff 4f       	sbci	r31, 0xFF	; 255
    3304:	80 81       	ld	r24, Z
    3306:	81 30       	cpi	r24, 0x01	; 1
    3308:	29 f4       	brne	.+10     	; 0x3314 <handle_door+0x624>
			flag = 0;
    330a:	fe 01       	movw	r30, r28
    330c:	e1 5b       	subi	r30, 0xB1	; 177
    330e:	ff 4f       	sbci	r31, 0xFF	; 255
    3310:	10 82       	st	Z, r1
    3312:	10 c0       	rjmp	.+32     	; 0x3334 <handle_door+0x644>
}

void handle_door(void) {
	uint8 flag = 0;
	uint8 checker=0;
	for (uint8 i = 0; i < 3; i++) {
    3314:	de 01       	movw	r26, r28
    3316:	a3 5b       	subi	r26, 0xB3	; 179
    3318:	bf 4f       	sbci	r27, 0xFF	; 255
    331a:	fe 01       	movw	r30, r28
    331c:	e3 5b       	subi	r30, 0xB3	; 179
    331e:	ff 4f       	sbci	r31, 0xFF	; 255
    3320:	80 81       	ld	r24, Z
    3322:	8f 5f       	subi	r24, 0xFF	; 255
    3324:	8c 93       	st	X, r24
    3326:	fe 01       	movw	r30, r28
    3328:	e3 5b       	subi	r30, 0xB3	; 179
    332a:	ff 4f       	sbci	r31, 0xFF	; 255
    332c:	80 81       	ld	r24, Z
    332e:	83 30       	cpi	r24, 0x03	; 3
    3330:	08 f4       	brcc	.+2      	; 0x3334 <handle_door+0x644>
    3332:	f8 cc       	rjmp	.-1552   	; 0x2d24 <handle_door+0x34>
		if (flag == 1) {
			flag = 0;
			break;
		}
	}
}
    3334:	cf 5a       	subi	r28, 0xAF	; 175
    3336:	df 4f       	sbci	r29, 0xFF	; 255
    3338:	0f b6       	in	r0, 0x3f	; 63
    333a:	f8 94       	cli
    333c:	de bf       	out	0x3e, r29	; 62
    333e:	0f be       	out	0x3f, r0	; 63
    3340:	cd bf       	out	0x3d, r28	; 61
    3342:	cf 91       	pop	r28
    3344:	df 91       	pop	r29
    3346:	1f 91       	pop	r17
    3348:	0f 91       	pop	r16
    334a:	08 95       	ret

0000334c <options>:
void options(void) {
    334c:	df 93       	push	r29
    334e:	cf 93       	push	r28
    3350:	cd b7       	in	r28, 0x3d	; 61
    3352:	de b7       	in	r29, 0x3e	; 62
    3354:	6e 97       	sbiw	r28, 0x1e	; 30
    3356:	0f b6       	in	r0, 0x3f	; 63
    3358:	f8 94       	cli
    335a:	de bf       	out	0x3e, r29	; 62
    335c:	0f be       	out	0x3f, r0	; 63
    335e:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    3360:	0e 94 35 11 	call	0x226a	; 0x226a <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "+:Open Door");
    3364:	2d ea       	ldi	r18, 0xAD	; 173
    3366:	30 e0       	ldi	r19, 0x00	; 0
    3368:	80 e0       	ldi	r24, 0x00	; 0
    336a:	60 e0       	ldi	r22, 0x00	; 0
    336c:	a9 01       	movw	r20, r18
    336e:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "-:Change Pass");
    3372:	29 eb       	ldi	r18, 0xB9	; 185
    3374:	30 e0       	ldi	r19, 0x00	; 0
    3376:	81 e0       	ldi	r24, 0x01	; 1
    3378:	60 e0       	ldi	r22, 0x00	; 0
    337a:	a9 01       	movw	r20, r18
    337c:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <LCD_displayStringRowColumn>

	switch (KEYPAD_getPressedKey()) {
    3380:	0e 94 17 0b 	call	0x162e	; 0x162e <KEYPAD_getPressedKey>
    3384:	28 2f       	mov	r18, r24
    3386:	30 e0       	ldi	r19, 0x00	; 0
    3388:	3e 8f       	std	Y+30, r19	; 0x1e
    338a:	2d 8f       	std	Y+29, r18	; 0x1d
    338c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    338e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3390:	8b 32       	cpi	r24, 0x2B	; 43
    3392:	91 05       	cpc	r25, r1
    3394:	09 f4       	brne	.+2      	; 0x3398 <options+0x4c>
    3396:	7b c0       	rjmp	.+246    	; 0x348e <options+0x142>
    3398:	2d 8d       	ldd	r18, Y+29	; 0x1d
    339a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    339c:	2d 32       	cpi	r18, 0x2D	; 45
    339e:	31 05       	cpc	r19, r1
    33a0:	09 f0       	breq	.+2      	; 0x33a4 <options+0x58>
    33a2:	e9 c0       	rjmp	.+466    	; 0x3576 <options+0x22a>
    33a4:	80 e0       	ldi	r24, 0x00	; 0
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	aa ef       	ldi	r26, 0xFA	; 250
    33aa:	b3 e4       	ldi	r27, 0x43	; 67
    33ac:	89 8f       	std	Y+25, r24	; 0x19
    33ae:	9a 8f       	std	Y+26, r25	; 0x1a
    33b0:	ab 8f       	std	Y+27, r26	; 0x1b
    33b2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33b4:	69 8d       	ldd	r22, Y+25	; 0x19
    33b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33bc:	20 e0       	ldi	r18, 0x00	; 0
    33be:	30 e0       	ldi	r19, 0x00	; 0
    33c0:	4a ef       	ldi	r20, 0xFA	; 250
    33c2:	54 e4       	ldi	r21, 0x44	; 68
    33c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33c8:	dc 01       	movw	r26, r24
    33ca:	cb 01       	movw	r24, r22
    33cc:	8d 8b       	std	Y+21, r24	; 0x15
    33ce:	9e 8b       	std	Y+22, r25	; 0x16
    33d0:	af 8b       	std	Y+23, r26	; 0x17
    33d2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    33d4:	6d 89       	ldd	r22, Y+21	; 0x15
    33d6:	7e 89       	ldd	r23, Y+22	; 0x16
    33d8:	8f 89       	ldd	r24, Y+23	; 0x17
    33da:	98 8d       	ldd	r25, Y+24	; 0x18
    33dc:	20 e0       	ldi	r18, 0x00	; 0
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	40 e8       	ldi	r20, 0x80	; 128
    33e2:	5f e3       	ldi	r21, 0x3F	; 63
    33e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33e8:	88 23       	and	r24, r24
    33ea:	2c f4       	brge	.+10     	; 0x33f6 <options+0xaa>
		__ticks = 1;
    33ec:	81 e0       	ldi	r24, 0x01	; 1
    33ee:	90 e0       	ldi	r25, 0x00	; 0
    33f0:	9c 8b       	std	Y+20, r25	; 0x14
    33f2:	8b 8b       	std	Y+19, r24	; 0x13
    33f4:	3f c0       	rjmp	.+126    	; 0x3474 <options+0x128>
	else if (__tmp > 65535)
    33f6:	6d 89       	ldd	r22, Y+21	; 0x15
    33f8:	7e 89       	ldd	r23, Y+22	; 0x16
    33fa:	8f 89       	ldd	r24, Y+23	; 0x17
    33fc:	98 8d       	ldd	r25, Y+24	; 0x18
    33fe:	20 e0       	ldi	r18, 0x00	; 0
    3400:	3f ef       	ldi	r19, 0xFF	; 255
    3402:	4f e7       	ldi	r20, 0x7F	; 127
    3404:	57 e4       	ldi	r21, 0x47	; 71
    3406:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    340a:	18 16       	cp	r1, r24
    340c:	4c f5       	brge	.+82     	; 0x3460 <options+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    340e:	69 8d       	ldd	r22, Y+25	; 0x19
    3410:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3412:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3414:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3416:	20 e0       	ldi	r18, 0x00	; 0
    3418:	30 e0       	ldi	r19, 0x00	; 0
    341a:	40 e2       	ldi	r20, 0x20	; 32
    341c:	51 e4       	ldi	r21, 0x41	; 65
    341e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3422:	dc 01       	movw	r26, r24
    3424:	cb 01       	movw	r24, r22
    3426:	bc 01       	movw	r22, r24
    3428:	cd 01       	movw	r24, r26
    342a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    342e:	dc 01       	movw	r26, r24
    3430:	cb 01       	movw	r24, r22
    3432:	9c 8b       	std	Y+20, r25	; 0x14
    3434:	8b 8b       	std	Y+19, r24	; 0x13
    3436:	0f c0       	rjmp	.+30     	; 0x3456 <options+0x10a>
    3438:	88 ec       	ldi	r24, 0xC8	; 200
    343a:	90 e0       	ldi	r25, 0x00	; 0
    343c:	9a 8b       	std	Y+18, r25	; 0x12
    343e:	89 8b       	std	Y+17, r24	; 0x11
    3440:	89 89       	ldd	r24, Y+17	; 0x11
    3442:	9a 89       	ldd	r25, Y+18	; 0x12
    3444:	01 97       	sbiw	r24, 0x01	; 1
    3446:	f1 f7       	brne	.-4      	; 0x3444 <options+0xf8>
    3448:	9a 8b       	std	Y+18, r25	; 0x12
    344a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    344c:	8b 89       	ldd	r24, Y+19	; 0x13
    344e:	9c 89       	ldd	r25, Y+20	; 0x14
    3450:	01 97       	sbiw	r24, 0x01	; 1
    3452:	9c 8b       	std	Y+20, r25	; 0x14
    3454:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3456:	8b 89       	ldd	r24, Y+19	; 0x13
    3458:	9c 89       	ldd	r25, Y+20	; 0x14
    345a:	00 97       	sbiw	r24, 0x00	; 0
    345c:	69 f7       	brne	.-38     	; 0x3438 <options+0xec>
    345e:	14 c0       	rjmp	.+40     	; 0x3488 <options+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3460:	6d 89       	ldd	r22, Y+21	; 0x15
    3462:	7e 89       	ldd	r23, Y+22	; 0x16
    3464:	8f 89       	ldd	r24, Y+23	; 0x17
    3466:	98 8d       	ldd	r25, Y+24	; 0x18
    3468:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    346c:	dc 01       	movw	r26, r24
    346e:	cb 01       	movw	r24, r22
    3470:	9c 8b       	std	Y+20, r25	; 0x14
    3472:	8b 8b       	std	Y+19, r24	; 0x13
    3474:	8b 89       	ldd	r24, Y+19	; 0x13
    3476:	9c 89       	ldd	r25, Y+20	; 0x14
    3478:	98 8b       	std	Y+16, r25	; 0x10
    347a:	8f 87       	std	Y+15, r24	; 0x0f
    347c:	8f 85       	ldd	r24, Y+15	; 0x0f
    347e:	98 89       	ldd	r25, Y+16	; 0x10
    3480:	01 97       	sbiw	r24, 0x01	; 1
    3482:	f1 f7       	brne	.-4      	; 0x3480 <options+0x134>
    3484:	98 8b       	std	Y+16, r25	; 0x10
    3486:	8f 87       	std	Y+15, r24	; 0x0f

	case '-': //change password
		_delay_ms(500);
		change_pass();
    3488:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <change_pass>
    348c:	74 c0       	rjmp	.+232    	; 0x3576 <options+0x22a>
		break;
    348e:	80 e0       	ldi	r24, 0x00	; 0
    3490:	90 e0       	ldi	r25, 0x00	; 0
    3492:	aa ef       	ldi	r26, 0xFA	; 250
    3494:	b3 e4       	ldi	r27, 0x43	; 67
    3496:	8b 87       	std	Y+11, r24	; 0x0b
    3498:	9c 87       	std	Y+12, r25	; 0x0c
    349a:	ad 87       	std	Y+13, r26	; 0x0d
    349c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    349e:	6b 85       	ldd	r22, Y+11	; 0x0b
    34a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    34a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    34a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    34a6:	20 e0       	ldi	r18, 0x00	; 0
    34a8:	30 e0       	ldi	r19, 0x00	; 0
    34aa:	4a ef       	ldi	r20, 0xFA	; 250
    34ac:	54 e4       	ldi	r21, 0x44	; 68
    34ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34b2:	dc 01       	movw	r26, r24
    34b4:	cb 01       	movw	r24, r22
    34b6:	8f 83       	std	Y+7, r24	; 0x07
    34b8:	98 87       	std	Y+8, r25	; 0x08
    34ba:	a9 87       	std	Y+9, r26	; 0x09
    34bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34be:	6f 81       	ldd	r22, Y+7	; 0x07
    34c0:	78 85       	ldd	r23, Y+8	; 0x08
    34c2:	89 85       	ldd	r24, Y+9	; 0x09
    34c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    34c6:	20 e0       	ldi	r18, 0x00	; 0
    34c8:	30 e0       	ldi	r19, 0x00	; 0
    34ca:	40 e8       	ldi	r20, 0x80	; 128
    34cc:	5f e3       	ldi	r21, 0x3F	; 63
    34ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34d2:	88 23       	and	r24, r24
    34d4:	2c f4       	brge	.+10     	; 0x34e0 <options+0x194>
		__ticks = 1;
    34d6:	81 e0       	ldi	r24, 0x01	; 1
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	9e 83       	std	Y+6, r25	; 0x06
    34dc:	8d 83       	std	Y+5, r24	; 0x05
    34de:	3f c0       	rjmp	.+126    	; 0x355e <options+0x212>
	else if (__tmp > 65535)
    34e0:	6f 81       	ldd	r22, Y+7	; 0x07
    34e2:	78 85       	ldd	r23, Y+8	; 0x08
    34e4:	89 85       	ldd	r24, Y+9	; 0x09
    34e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    34e8:	20 e0       	ldi	r18, 0x00	; 0
    34ea:	3f ef       	ldi	r19, 0xFF	; 255
    34ec:	4f e7       	ldi	r20, 0x7F	; 127
    34ee:	57 e4       	ldi	r21, 0x47	; 71
    34f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34f4:	18 16       	cp	r1, r24
    34f6:	4c f5       	brge	.+82     	; 0x354a <options+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    34fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    34fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    34fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3500:	20 e0       	ldi	r18, 0x00	; 0
    3502:	30 e0       	ldi	r19, 0x00	; 0
    3504:	40 e2       	ldi	r20, 0x20	; 32
    3506:	51 e4       	ldi	r21, 0x41	; 65
    3508:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    350c:	dc 01       	movw	r26, r24
    350e:	cb 01       	movw	r24, r22
    3510:	bc 01       	movw	r22, r24
    3512:	cd 01       	movw	r24, r26
    3514:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3518:	dc 01       	movw	r26, r24
    351a:	cb 01       	movw	r24, r22
    351c:	9e 83       	std	Y+6, r25	; 0x06
    351e:	8d 83       	std	Y+5, r24	; 0x05
    3520:	0f c0       	rjmp	.+30     	; 0x3540 <options+0x1f4>
    3522:	88 ec       	ldi	r24, 0xC8	; 200
    3524:	90 e0       	ldi	r25, 0x00	; 0
    3526:	9c 83       	std	Y+4, r25	; 0x04
    3528:	8b 83       	std	Y+3, r24	; 0x03
    352a:	8b 81       	ldd	r24, Y+3	; 0x03
    352c:	9c 81       	ldd	r25, Y+4	; 0x04
    352e:	01 97       	sbiw	r24, 0x01	; 1
    3530:	f1 f7       	brne	.-4      	; 0x352e <options+0x1e2>
    3532:	9c 83       	std	Y+4, r25	; 0x04
    3534:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3536:	8d 81       	ldd	r24, Y+5	; 0x05
    3538:	9e 81       	ldd	r25, Y+6	; 0x06
    353a:	01 97       	sbiw	r24, 0x01	; 1
    353c:	9e 83       	std	Y+6, r25	; 0x06
    353e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3540:	8d 81       	ldd	r24, Y+5	; 0x05
    3542:	9e 81       	ldd	r25, Y+6	; 0x06
    3544:	00 97       	sbiw	r24, 0x00	; 0
    3546:	69 f7       	brne	.-38     	; 0x3522 <options+0x1d6>
    3548:	14 c0       	rjmp	.+40     	; 0x3572 <options+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    354a:	6f 81       	ldd	r22, Y+7	; 0x07
    354c:	78 85       	ldd	r23, Y+8	; 0x08
    354e:	89 85       	ldd	r24, Y+9	; 0x09
    3550:	9a 85       	ldd	r25, Y+10	; 0x0a
    3552:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3556:	dc 01       	movw	r26, r24
    3558:	cb 01       	movw	r24, r22
    355a:	9e 83       	std	Y+6, r25	; 0x06
    355c:	8d 83       	std	Y+5, r24	; 0x05
    355e:	8d 81       	ldd	r24, Y+5	; 0x05
    3560:	9e 81       	ldd	r25, Y+6	; 0x06
    3562:	9a 83       	std	Y+2, r25	; 0x02
    3564:	89 83       	std	Y+1, r24	; 0x01
    3566:	89 81       	ldd	r24, Y+1	; 0x01
    3568:	9a 81       	ldd	r25, Y+2	; 0x02
    356a:	01 97       	sbiw	r24, 0x01	; 1
    356c:	f1 f7       	brne	.-4      	; 0x356a <options+0x21e>
    356e:	9a 83       	std	Y+2, r25	; 0x02
    3570:	89 83       	std	Y+1, r24	; 0x01
	case '+': //open door
		_delay_ms(500);
		handle_door();
    3572:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <handle_door>
		break;
	}

}
    3576:	6e 96       	adiw	r28, 0x1e	; 30
    3578:	0f b6       	in	r0, 0x3f	; 63
    357a:	f8 94       	cli
    357c:	de bf       	out	0x3e, r29	; 62
    357e:	0f be       	out	0x3f, r0	; 63
    3580:	cd bf       	out	0x3d, r28	; 61
    3582:	cf 91       	pop	r28
    3584:	df 91       	pop	r29
    3586:	08 95       	ret

00003588 <main>:
 *      Author: merna
 */

#include "APP/himi.h"

int main(void) {
    3588:	df 93       	push	r29
    358a:	cf 93       	push	r28
    358c:	cd b7       	in	r28, 0x3d	; 61
    358e:	de b7       	in	r29, 0x3e	; 62
    3590:	2e 97       	sbiw	r28, 0x0e	; 14
    3592:	0f b6       	in	r0, 0x3f	; 63
    3594:	f8 94       	cli
    3596:	de bf       	out	0x3e, r29	; 62
    3598:	0f be       	out	0x3f, r0	; 63
    359a:	cd bf       	out	0x3d, r28	; 61
	init();
    359c:	0e 94 3f 11 	call	0x227e	; 0x227e <init>
    35a0:	80 e0       	ldi	r24, 0x00	; 0
    35a2:	90 e0       	ldi	r25, 0x00	; 0
    35a4:	a8 e4       	ldi	r26, 0x48	; 72
    35a6:	b2 e4       	ldi	r27, 0x42	; 66
    35a8:	8b 87       	std	Y+11, r24	; 0x0b
    35aa:	9c 87       	std	Y+12, r25	; 0x0c
    35ac:	ad 87       	std	Y+13, r26	; 0x0d
    35ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    35b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    35b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    35b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    35b8:	20 e0       	ldi	r18, 0x00	; 0
    35ba:	30 e0       	ldi	r19, 0x00	; 0
    35bc:	4a ef       	ldi	r20, 0xFA	; 250
    35be:	54 e4       	ldi	r21, 0x44	; 68
    35c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35c4:	dc 01       	movw	r26, r24
    35c6:	cb 01       	movw	r24, r22
    35c8:	8f 83       	std	Y+7, r24	; 0x07
    35ca:	98 87       	std	Y+8, r25	; 0x08
    35cc:	a9 87       	std	Y+9, r26	; 0x09
    35ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35d0:	6f 81       	ldd	r22, Y+7	; 0x07
    35d2:	78 85       	ldd	r23, Y+8	; 0x08
    35d4:	89 85       	ldd	r24, Y+9	; 0x09
    35d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    35d8:	20 e0       	ldi	r18, 0x00	; 0
    35da:	30 e0       	ldi	r19, 0x00	; 0
    35dc:	40 e8       	ldi	r20, 0x80	; 128
    35de:	5f e3       	ldi	r21, 0x3F	; 63
    35e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35e4:	88 23       	and	r24, r24
    35e6:	2c f4       	brge	.+10     	; 0x35f2 <main+0x6a>
		__ticks = 1;
    35e8:	81 e0       	ldi	r24, 0x01	; 1
    35ea:	90 e0       	ldi	r25, 0x00	; 0
    35ec:	9e 83       	std	Y+6, r25	; 0x06
    35ee:	8d 83       	std	Y+5, r24	; 0x05
    35f0:	3f c0       	rjmp	.+126    	; 0x3670 <main+0xe8>
	else if (__tmp > 65535)
    35f2:	6f 81       	ldd	r22, Y+7	; 0x07
    35f4:	78 85       	ldd	r23, Y+8	; 0x08
    35f6:	89 85       	ldd	r24, Y+9	; 0x09
    35f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    35fa:	20 e0       	ldi	r18, 0x00	; 0
    35fc:	3f ef       	ldi	r19, 0xFF	; 255
    35fe:	4f e7       	ldi	r20, 0x7F	; 127
    3600:	57 e4       	ldi	r21, 0x47	; 71
    3602:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3606:	18 16       	cp	r1, r24
    3608:	4c f5       	brge	.+82     	; 0x365c <main+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    360a:	6b 85       	ldd	r22, Y+11	; 0x0b
    360c:	7c 85       	ldd	r23, Y+12	; 0x0c
    360e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3610:	9e 85       	ldd	r25, Y+14	; 0x0e
    3612:	20 e0       	ldi	r18, 0x00	; 0
    3614:	30 e0       	ldi	r19, 0x00	; 0
    3616:	40 e2       	ldi	r20, 0x20	; 32
    3618:	51 e4       	ldi	r21, 0x41	; 65
    361a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    361e:	dc 01       	movw	r26, r24
    3620:	cb 01       	movw	r24, r22
    3622:	bc 01       	movw	r22, r24
    3624:	cd 01       	movw	r24, r26
    3626:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    362a:	dc 01       	movw	r26, r24
    362c:	cb 01       	movw	r24, r22
    362e:	9e 83       	std	Y+6, r25	; 0x06
    3630:	8d 83       	std	Y+5, r24	; 0x05
    3632:	0f c0       	rjmp	.+30     	; 0x3652 <main+0xca>
    3634:	88 ec       	ldi	r24, 0xC8	; 200
    3636:	90 e0       	ldi	r25, 0x00	; 0
    3638:	9c 83       	std	Y+4, r25	; 0x04
    363a:	8b 83       	std	Y+3, r24	; 0x03
    363c:	8b 81       	ldd	r24, Y+3	; 0x03
    363e:	9c 81       	ldd	r25, Y+4	; 0x04
    3640:	01 97       	sbiw	r24, 0x01	; 1
    3642:	f1 f7       	brne	.-4      	; 0x3640 <main+0xb8>
    3644:	9c 83       	std	Y+4, r25	; 0x04
    3646:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3648:	8d 81       	ldd	r24, Y+5	; 0x05
    364a:	9e 81       	ldd	r25, Y+6	; 0x06
    364c:	01 97       	sbiw	r24, 0x01	; 1
    364e:	9e 83       	std	Y+6, r25	; 0x06
    3650:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3652:	8d 81       	ldd	r24, Y+5	; 0x05
    3654:	9e 81       	ldd	r25, Y+6	; 0x06
    3656:	00 97       	sbiw	r24, 0x00	; 0
    3658:	69 f7       	brne	.-38     	; 0x3634 <main+0xac>
    365a:	14 c0       	rjmp	.+40     	; 0x3684 <main+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    365c:	6f 81       	ldd	r22, Y+7	; 0x07
    365e:	78 85       	ldd	r23, Y+8	; 0x08
    3660:	89 85       	ldd	r24, Y+9	; 0x09
    3662:	9a 85       	ldd	r25, Y+10	; 0x0a
    3664:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3668:	dc 01       	movw	r26, r24
    366a:	cb 01       	movw	r24, r22
    366c:	9e 83       	std	Y+6, r25	; 0x06
    366e:	8d 83       	std	Y+5, r24	; 0x05
    3670:	8d 81       	ldd	r24, Y+5	; 0x05
    3672:	9e 81       	ldd	r25, Y+6	; 0x06
    3674:	9a 83       	std	Y+2, r25	; 0x02
    3676:	89 83       	std	Y+1, r24	; 0x01
    3678:	89 81       	ldd	r24, Y+1	; 0x01
    367a:	9a 81       	ldd	r25, Y+2	; 0x02
    367c:	01 97       	sbiw	r24, 0x01	; 1
    367e:	f1 f7       	brne	.-4      	; 0x367c <main+0xf4>
    3680:	9a 83       	std	Y+2, r25	; 0x02
    3682:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	Enter_Pass();
    3684:	0e 94 9c 11 	call	0x2338	; 0x2338 <Enter_Pass>
	while (1) {

		options();
    3688:	0e 94 a6 19 	call	0x334c	; 0x334c <options>
    368c:	fd cf       	rjmp	.-6      	; 0x3688 <main+0x100>

0000368e <__udivmodsi4>:
    368e:	a1 e2       	ldi	r26, 0x21	; 33
    3690:	1a 2e       	mov	r1, r26
    3692:	aa 1b       	sub	r26, r26
    3694:	bb 1b       	sub	r27, r27
    3696:	fd 01       	movw	r30, r26
    3698:	0d c0       	rjmp	.+26     	; 0x36b4 <__udivmodsi4_ep>

0000369a <__udivmodsi4_loop>:
    369a:	aa 1f       	adc	r26, r26
    369c:	bb 1f       	adc	r27, r27
    369e:	ee 1f       	adc	r30, r30
    36a0:	ff 1f       	adc	r31, r31
    36a2:	a2 17       	cp	r26, r18
    36a4:	b3 07       	cpc	r27, r19
    36a6:	e4 07       	cpc	r30, r20
    36a8:	f5 07       	cpc	r31, r21
    36aa:	20 f0       	brcs	.+8      	; 0x36b4 <__udivmodsi4_ep>
    36ac:	a2 1b       	sub	r26, r18
    36ae:	b3 0b       	sbc	r27, r19
    36b0:	e4 0b       	sbc	r30, r20
    36b2:	f5 0b       	sbc	r31, r21

000036b4 <__udivmodsi4_ep>:
    36b4:	66 1f       	adc	r22, r22
    36b6:	77 1f       	adc	r23, r23
    36b8:	88 1f       	adc	r24, r24
    36ba:	99 1f       	adc	r25, r25
    36bc:	1a 94       	dec	r1
    36be:	69 f7       	brne	.-38     	; 0x369a <__udivmodsi4_loop>
    36c0:	60 95       	com	r22
    36c2:	70 95       	com	r23
    36c4:	80 95       	com	r24
    36c6:	90 95       	com	r25
    36c8:	9b 01       	movw	r18, r22
    36ca:	ac 01       	movw	r20, r24
    36cc:	bd 01       	movw	r22, r26
    36ce:	cf 01       	movw	r24, r30
    36d0:	08 95       	ret

000036d2 <__prologue_saves__>:
    36d2:	2f 92       	push	r2
    36d4:	3f 92       	push	r3
    36d6:	4f 92       	push	r4
    36d8:	5f 92       	push	r5
    36da:	6f 92       	push	r6
    36dc:	7f 92       	push	r7
    36de:	8f 92       	push	r8
    36e0:	9f 92       	push	r9
    36e2:	af 92       	push	r10
    36e4:	bf 92       	push	r11
    36e6:	cf 92       	push	r12
    36e8:	df 92       	push	r13
    36ea:	ef 92       	push	r14
    36ec:	ff 92       	push	r15
    36ee:	0f 93       	push	r16
    36f0:	1f 93       	push	r17
    36f2:	cf 93       	push	r28
    36f4:	df 93       	push	r29
    36f6:	cd b7       	in	r28, 0x3d	; 61
    36f8:	de b7       	in	r29, 0x3e	; 62
    36fa:	ca 1b       	sub	r28, r26
    36fc:	db 0b       	sbc	r29, r27
    36fe:	0f b6       	in	r0, 0x3f	; 63
    3700:	f8 94       	cli
    3702:	de bf       	out	0x3e, r29	; 62
    3704:	0f be       	out	0x3f, r0	; 63
    3706:	cd bf       	out	0x3d, r28	; 61
    3708:	09 94       	ijmp

0000370a <__epilogue_restores__>:
    370a:	2a 88       	ldd	r2, Y+18	; 0x12
    370c:	39 88       	ldd	r3, Y+17	; 0x11
    370e:	48 88       	ldd	r4, Y+16	; 0x10
    3710:	5f 84       	ldd	r5, Y+15	; 0x0f
    3712:	6e 84       	ldd	r6, Y+14	; 0x0e
    3714:	7d 84       	ldd	r7, Y+13	; 0x0d
    3716:	8c 84       	ldd	r8, Y+12	; 0x0c
    3718:	9b 84       	ldd	r9, Y+11	; 0x0b
    371a:	aa 84       	ldd	r10, Y+10	; 0x0a
    371c:	b9 84       	ldd	r11, Y+9	; 0x09
    371e:	c8 84       	ldd	r12, Y+8	; 0x08
    3720:	df 80       	ldd	r13, Y+7	; 0x07
    3722:	ee 80       	ldd	r14, Y+6	; 0x06
    3724:	fd 80       	ldd	r15, Y+5	; 0x05
    3726:	0c 81       	ldd	r16, Y+4	; 0x04
    3728:	1b 81       	ldd	r17, Y+3	; 0x03
    372a:	aa 81       	ldd	r26, Y+2	; 0x02
    372c:	b9 81       	ldd	r27, Y+1	; 0x01
    372e:	ce 0f       	add	r28, r30
    3730:	d1 1d       	adc	r29, r1
    3732:	0f b6       	in	r0, 0x3f	; 63
    3734:	f8 94       	cli
    3736:	de bf       	out	0x3e, r29	; 62
    3738:	0f be       	out	0x3f, r0	; 63
    373a:	cd bf       	out	0x3d, r28	; 61
    373c:	ed 01       	movw	r28, r26
    373e:	08 95       	ret

00003740 <itoa>:
    3740:	fb 01       	movw	r30, r22
    3742:	9f 01       	movw	r18, r30
    3744:	e8 94       	clt
    3746:	42 30       	cpi	r20, 0x02	; 2
    3748:	c4 f0       	brlt	.+48     	; 0x377a <itoa+0x3a>
    374a:	45 32       	cpi	r20, 0x25	; 37
    374c:	b4 f4       	brge	.+44     	; 0x377a <itoa+0x3a>
    374e:	4a 30       	cpi	r20, 0x0A	; 10
    3750:	29 f4       	brne	.+10     	; 0x375c <itoa+0x1c>
    3752:	97 fb       	bst	r25, 7
    3754:	1e f4       	brtc	.+6      	; 0x375c <itoa+0x1c>
    3756:	90 95       	com	r25
    3758:	81 95       	neg	r24
    375a:	9f 4f       	sbci	r25, 0xFF	; 255
    375c:	64 2f       	mov	r22, r20
    375e:	77 27       	eor	r23, r23
    3760:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <__udivmodhi4>
    3764:	80 5d       	subi	r24, 0xD0	; 208
    3766:	8a 33       	cpi	r24, 0x3A	; 58
    3768:	0c f0       	brlt	.+2      	; 0x376c <itoa+0x2c>
    376a:	89 5d       	subi	r24, 0xD9	; 217
    376c:	81 93       	st	Z+, r24
    376e:	cb 01       	movw	r24, r22
    3770:	00 97       	sbiw	r24, 0x00	; 0
    3772:	a1 f7       	brne	.-24     	; 0x375c <itoa+0x1c>
    3774:	16 f4       	brtc	.+4      	; 0x377a <itoa+0x3a>
    3776:	5d e2       	ldi	r21, 0x2D	; 45
    3778:	51 93       	st	Z+, r21
    377a:	10 82       	st	Z, r1
    377c:	c9 01       	movw	r24, r18
    377e:	0c 94 c1 1b 	jmp	0x3782	; 0x3782 <strrev>

00003782 <strrev>:
    3782:	dc 01       	movw	r26, r24
    3784:	fc 01       	movw	r30, r24
    3786:	67 2f       	mov	r22, r23
    3788:	71 91       	ld	r23, Z+
    378a:	77 23       	and	r23, r23
    378c:	e1 f7       	brne	.-8      	; 0x3786 <strrev+0x4>
    378e:	32 97       	sbiw	r30, 0x02	; 2
    3790:	04 c0       	rjmp	.+8      	; 0x379a <strrev+0x18>
    3792:	7c 91       	ld	r23, X
    3794:	6d 93       	st	X+, r22
    3796:	70 83       	st	Z, r23
    3798:	62 91       	ld	r22, -Z
    379a:	ae 17       	cp	r26, r30
    379c:	bf 07       	cpc	r27, r31
    379e:	c8 f3       	brcs	.-14     	; 0x3792 <strrev+0x10>
    37a0:	08 95       	ret

000037a2 <__udivmodhi4>:
    37a2:	aa 1b       	sub	r26, r26
    37a4:	bb 1b       	sub	r27, r27
    37a6:	51 e1       	ldi	r21, 0x11	; 17
    37a8:	07 c0       	rjmp	.+14     	; 0x37b8 <__udivmodhi4_ep>

000037aa <__udivmodhi4_loop>:
    37aa:	aa 1f       	adc	r26, r26
    37ac:	bb 1f       	adc	r27, r27
    37ae:	a6 17       	cp	r26, r22
    37b0:	b7 07       	cpc	r27, r23
    37b2:	10 f0       	brcs	.+4      	; 0x37b8 <__udivmodhi4_ep>
    37b4:	a6 1b       	sub	r26, r22
    37b6:	b7 0b       	sbc	r27, r23

000037b8 <__udivmodhi4_ep>:
    37b8:	88 1f       	adc	r24, r24
    37ba:	99 1f       	adc	r25, r25
    37bc:	5a 95       	dec	r21
    37be:	a9 f7       	brne	.-22     	; 0x37aa <__udivmodhi4_loop>
    37c0:	80 95       	com	r24
    37c2:	90 95       	com	r25
    37c4:	bc 01       	movw	r22, r24
    37c6:	cd 01       	movw	r24, r26
    37c8:	08 95       	ret

000037ca <_exit>:
    37ca:	f8 94       	cli

000037cc <__stop_program>:
    37cc:	ff cf       	rjmp	.-2      	; 0x37cc <__stop_program>
