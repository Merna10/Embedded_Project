/*
 * icu.c
 *
 *  Created on: Oct 12, 2022
 *      Author: merna
 */

#include "icu.h"
#include "common_macros.h"
#include "avr/interrupt.h"
#include "avr/io.h"

static volatile void (*g_callBackPtr)(void) = NULL_PTR;

ISR(TIMER1_CAPT_vect)
{
	if(g_callBackPtr != NULL_PTR)
	{
		(*g_callBackPtr)();
	}
}

void Icu_init(const Icu_ConfigType * Config_Ptr)
{
	/* Configure ICP1/PD6 as i/p pin */
	DDRD &= ~(1<<PD6);

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
	/*
     * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);

	/* Initial Value for Timer1 */
	TCNT1 = 0;

	/* Initial Value for the input capture register */
	ICR1 = 0;

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
}
void Icu_setCallBack(void(*a_ptr)(void))
{
	g_callBackPtr = a_ptr;
}
void Icu_setEdgeDetectionType(const Icu_EdgeType a_edgeType)
{
	TCCR1B = (TCCR1B & 0XBF) | (a_edgeType<<6);
}
uint16 Icu_getInputCaptureValue(void)
{
	return ICR1;
}
void Icu_clearTimerValue(void)
{
	TCNT1 = 0;
}
void Icu_DeInit(void)
{
	TCCR1A = 0 ;
	TCCR1B = 0 ;
	TCCR1B = 0 ;
	TCNT1 = 0;
	ICR1 = 0;
	TIMSK &= ~(1<TICIE1);
}
